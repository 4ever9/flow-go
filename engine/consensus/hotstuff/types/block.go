package types

import (
	"encoding/binary"
	"time"

	"github.com/dapperlabs/flow-go/crypto"
	"github.com/dapperlabs/flow-go/model/flow"
)

type Block struct {
	// specified
	View        uint64
	QC          *QuorumCertificate
	PayloadHash []byte

	// configed
	Height  uint64
	ChainID string

	// autogenerated
	Timestamp time.Time

	id flow.Identifier // needed basic implementation of Block.ID() for testing
}

func (b *Block) ID() flow.Identifier {
	return b.id
}

func NewBlock(view uint64, qc *QuorumCertificate, payloadHash []byte, height uint64, chainID string) *Block {

	t := time.Now()

	block := &Block{
		View:        view,
		QC:          qc,
		PayloadHash: payloadHash,
		Height:      height,
		ChainID:     chainID,
		Timestamp:   t,
	}
	block.id = computeID(block)

	return block
}

func (b *Block) ToVote() *UnsignedVote {
	panic("")
}

// computeID is an INCOMPLETE STUB needed so we can test Forks.
// When computing the Block's ID, this implementation only considers
// the fields used by Forks.
// TODO need full implementation
func computeID(b *Block) flow.Identifier {
	id := make([]byte, 0)

	viewBytes := make([]byte, 8)
	binary.BigEndian.PutUint64(viewBytes, b.View)
	id = append(id, viewBytes...)

	viewQC := make([]byte, 8)
	binary.BigEndian.PutUint64(viewQC, b.QC.View)
	id = append(id, viewQC...)

	id = append(id, b.PayloadHash...)

	hasher := crypto.NewSHA3_256()
	hash := hasher.ComputeHash(id)

	var identifier flow.Identifier
	copy(identifier[:], hash)
	return identifier
}
