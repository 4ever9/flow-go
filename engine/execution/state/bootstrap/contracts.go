// Code generated by go-bindata. DO NOT EDIT.
// sources:
// engine/execution/state/bootstrap/contracts/FeeContract.cdc (1.89kB)
// engine/execution/state/bootstrap/contracts/FlowToken.cdc (7.515kB)
// engine/execution/state/bootstrap/contracts/FungibleToken.cdc (7.131kB)
// engine/execution/state/bootstrap/contracts/ServiceAccount.cdc (1.973kB)

package bootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsFeecontractCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xcf\x6f\x9c\x3a\x10\xbe\xf3\x57\xcc\xe5\x49\x10\x65\xe1\x1d\x9e\xde\x21\xdd\x54\x55\x93\xac\xd4\x5b\x55\xa5\xb9\xcf\x9a\x21\xb8\x05\x1b\xd9\x66\xc9\x36\xca\xff\x5e\xf9\x17\xe0\x84\xaa\xed\x5e\xbc\x30\xf3\xcd\xaf\xef\x1b\x5c\x5d\x5c\x64\xd9\x81\x08\x6e\xa4\x30\x0a\x99\xc9\xb2\xfb\x96\x6b\x60\xe1\x11\x06\x25\x4f\xbc\x26\x0d\x08\x27\x1c\x3b\x03\x53\x4b\x8a\xc0\xc8\xef\x24\x34\xa0\x22\x60\xb2\xeb\x88\x19\xaa\x01\xad\x57\x43\x74\x09\x68\xc0\xb4\x04\x24\xea\x4c\x36\x40\x83\x64\xad\x7d\x71\x76\x80\xe3\xa8\x04\xd5\x70\x3c\x3b\x1f\xac\x7b\x2e\x00\x19\x93\xa3\x30\x65\x96\x5d\x54\x59\xc6\xfb\x41\x2a\x03\x87\x51\x3c\xf2\x63\x47\xf7\x36\x19\x34\x4a\xf6\xf0\xef\xd3\x3f\x7a\x36\x77\x72\x7a\x6d\xca\x86\xf1\xb8\x14\x7f\x20\x8a\x7d\xc1\x73\x96\x01\x00\x54\x15\xdc\x9d\x48\xd8\xfa\xd0\x00\xd7\x40\x3d\x37\xb6\xf8\xa9\x25\xe1\x0a\x9a\xd1\x2d\x6a\xe0\x82\x1b\x8e\x1d\xff\x41\xb5\x83\xdb\xf0\xe4\xf0\xab\xd8\x9f\x16\xa7\xbc\xf8\xa3\x34\xcb\xf4\x6a\x1a\xa4\xe6\xd6\x62\x24\x20\x3c\xd8\x19\xbf\xcd\x74\x1b\xbd\x72\xec\xed\x9c\xae\xe0\xeb\x81\x3f\xfd\xff\xdf\xdf\x67\xd3\x46\xc9\xf3\x56\x33\x6e\x92\xfa\xa3\xe3\xe6\x97\x59\x3e\x2b\x7e\x42\x43\x5e\x0a\x97\x30\x71\xd3\xda\x28\x1d\x67\xb1\x11\x68\x46\xc1\x0c\x97\x22\x40\xdc\x81\x8c\x91\xd6\xb9\xa6\xae\x29\xe0\x84\xca\xe3\xaf\xe0\x43\xc2\x70\xe9\x9b\x8f\xb9\x42\xc0\x75\x9c\x70\xd8\xba\x9b\x51\x44\x8f\xdc\xd2\xbf\x1d\xac\x80\x67\x87\xb0\xbf\x8e\x0c\x1c\xb1\x43\xc1\x08\xae\x9d\x64\xca\xf0\x38\xbb\xd8\x02\x4b\x57\x5b\x99\xc6\xde\xef\x1c\xa0\x98\x3d\xed\x80\xb7\x89\x09\x31\xbd\xeb\xcb\xdc\x8d\x1b\xac\x4a\x9b\x81\x2f\xa4\xe5\xa8\x18\x81\x3c\x7e\x23\x16\xe8\x4b\x16\x42\x03\x43\x01\xad\xec\x9c\x3e\xec\xe6\x04\x3a\xcb\xd7\x03\x51\x31\x96\xcf\x14\xf5\x1e\x32\x59\xa4\x67\x78\xf5\x76\xed\x70\x4b\x86\x54\xcf\x05\x69\xb7\x04\x71\x50\xb2\x71\x8f\xf6\x0b\xf1\xe0\x39\xd7\x13\x0e\x3a\x7d\xe9\x75\x80\x62\x1d\x8f\xfa\xc1\x9c\x23\x26\xc8\xee\x35\x0c\x45\xed\x06\xa9\x01\x45\x10\xa2\x8b\x64\x5a\x4a\x6a\x0f\xb5\xb8\xe9\x4c\xa8\x17\x15\x97\x5b\xcd\x44\x75\x2c\x2d\xe7\x45\x54\xf2\x4a\x0e\x51\x12\x9e\x37\xb8\x5e\x2f\x74\xd0\x40\x94\x47\x82\xb1\xf2\x75\xcd\xf9\x1e\xf6\xbb\xe5\x3b\x54\x32\x45\x68\xe8\x6e\xb6\xe6\x45\x02\x7d\x93\x01\xf6\xbb\xf7\xab\x60\x89\x73\x68\x72\x6d\x4e\xec\x51\x81\x9b\x7b\xeb\xcf\x34\xbb\x22\x63\xe5\xe3\x4d\xb3\x25\x28\x34\x1c\xf6\x73\x97\xaf\x97\xa6\xaa\xe0\xc6\x35\xe5\xa8\x5b\x68\xd3\x78\x22\xe0\x06\xb8\x00\x6d\xa4\xc2\x47\xda\xa2\x62\xd9\xa7\xdf\xce\x29\x5d\x53\x2f\xe1\xfd\x0e\xbc\x67\xd0\x74\x5e\xbc\x4b\x43\xc7\x5b\xc3\x56\x93\xef\x77\x1e\x76\x09\x46\x5e\x41\x15\xca\xaa\x1a\x22\x8f\x2e\x92\x85\xb8\xb3\xe3\x9b\x65\xe7\xa4\xa5\x5b\x39\x69\xff\x37\xb9\x07\xa6\x8d\x7b\x60\xcd\xc0\xf6\x35\xe0\xa7\xfa\x92\xfd\x0c\x00\x00\xff\xff\x16\x1c\x39\xed\x62\x07\x00\x00")

func contractsFeecontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsFeecontractCdc,
		"contracts/FeeContract.cdc",
	)
}

func contractsFeecontractCdc() (*asset, error) {
	bytes, err := contractsFeecontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/FeeContract.cdc", size: 1890, mode: os.FileMode(420), modTime: time.Unix(1590113377, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x30, 0x3a, 0x63, 0x23, 0x19, 0xc6, 0x4c, 0x4e, 0x0, 0xa3, 0xe, 0x13, 0x8d, 0xdb, 0x29, 0x20, 0x9a, 0xe9, 0x94, 0xd1, 0x16, 0x1f, 0x3a, 0x11, 0x57, 0x1f, 0xf1, 0x86, 0x8b, 0xd7, 0x93, 0x65}}
	return a, nil
}

var _contractsFlowtokenCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xdf\x6f\x23\xb7\x11\x7e\xd7\x5f\x31\x4d\xd1\x46\xbe\xc8\xb2\x03\x14\x7d\x30\x7c\xc9\xf9\x9a\x3b\xe0\x1e\xd2\x14\xe9\xb5\x7d\x35\x77\x77\x64\x31\xde\x25\x05\x92\x2b\x59\x39\xf8\x7f\x2f\x66\xf8\x63\x49\x5a\x92\xed\xa6\xf1\x43\x72\xda\x25\x67\x86\xc3\x6f\xbe\xf9\xc8\xbd\x78\xf3\x66\x36\xfb\x23\x7c\xec\xf5\xee\xb3\xbe\x47\x05\xf8\x20\x86\x4d\x8f\xd0\x6a\xe5\x8c\x68\xdd\x6c\xf6\x79\x2d\x2d\x48\x0b\x62\x7a\x29\xe9\xbf\x03\x2a\x27\x9c\xd4\x0a\xf4\x0a\xdc\x1a\xd9\x08\x7c\x1c\xd5\x9d\x6c\x7a\x04\x6f\xce\x3a\xa1\x3a\x61\xba\xe5\xec\x93\x05\xa5\x1d\x6c\x84\x71\x71\x42\x7c\xb9\x80\x66\x74\xf0\xcb\x68\x1d\xd8\xb5\xde\x59\x58\xeb\x1d\x0c\xda\x3a\x70\x64\xc4\xce\xec\x5a\x8f\x7d\x37\xb9\xad\x66\x4b\xd5\xf6\x63\x27\xd5\xdd\x14\x86\x42\xb7\xd3\xe6\xde\x1b\x00\xe9\x2c\xf6\xab\x25\xad\x05\xb3\xb5\xc6\x35\x82\x56\xfd\x1e\x14\x62\x67\xc1\x69\x68\x10\x3a\xdc\xf4\x7a\x8f\x1d\x48\x05\x5a\x21\x88\xb6\xd5\xa3\x72\x4b\x36\xc0\xa3\xf3\x75\x24\x3b\x6e\x2d\x1c\xec\x38\xd6\x86\x02\xd4\xc6\x9b\x40\xd1\xae\x61\xb4\x68\xbe\xb6\xd1\xd4\x4c\x5a\x9e\xfb\x6f\x31\xf6\x0e\x74\xf3\x0b\xb6\x6e\x01\x0d\xf6\x7a\xe7\xc3\xac\x72\xdc\x69\xf4\x09\xa4\x30\x29\x4a\x83\x1d\xae\xa4\x42\xb6\x22\x95\x43\xb3\x12\x2d\x5a\x1f\x83\x30\x38\x13\xbd\x41\xd1\xed\xc1\x0f\xe3\x38\x38\x3d\xe5\x06\xa5\x99\xb3\xd9\x9b\x8b\xd9\x4c\x0e\x1b\x6d\x5c\x1a\xe4\xc7\xac\x8c\x1e\xe0\xf2\xe1\x4f\x76\x36\xdb\x8c\xcd\xb4\xdc\x94\xc9\xab\x6a\xc2\x97\xd9\x0c\x00\xe0\xe2\x02\x3e\x6b\x27\x7a\xb0\xe3\x66\xd3\xef\x29\x5d\x2b\xda\x1c\xbf\xab\x9c\x98\x07\x69\x1d\xaa\x16\x79\x3c\x19\xdf\x0a\x03\x8e\x26\xfd\x93\xe7\x5c\xc1\xbf\x3e\xca\x87\xbf\xfe\x25\x19\xfc\xb0\xf5\xfb\x2f\x1c\x61\x12\x07\xe9\x1c\x76\xb0\x5b\xa3\x2a\xb7\x42\x5a\x68\x0d\x0a\x87\x5d\x32\x8d\x3c\xb5\x88\xf4\x93\x92\x4e\x8a\x5e\xfe\x8a\xdd\x5c\xfa\x7f\x97\x7e\xcf\x5e\xe4\xd8\xaf\x47\x18\x84\x9d\x74\xeb\xce\x88\x5d\x48\x9a\xf0\xfb\x5b\x85\xf0\x9f\x30\x68\x2e\x06\x82\x42\xf4\xb5\xe0\x39\x57\x70\xd3\x75\x06\xad\xfd\xfe\xb5\xbe\x3b\xdc\x68\x2b\x9d\x87\xc7\x61\xcf\x3f\xf8\x21\x4f\x1c\x3b\xfd\x4a\xb7\x0a\x77\xb9\xeb\x81\x60\x54\x67\xfa\x47\xa9\x6a\x4f\xaf\x5f\x92\x75\x86\x0a\xb1\x32\xfd\x7e\x34\xea\x7f\x31\x2d\x60\xc0\x9d\x8f\xd6\x80\x41\xab\x47\xd3\xe2\x71\xac\xfc\xc8\x03\xff\xe6\xdf\xcd\x45\xdf\xeb\x1d\x76\x37\x47\xdc\x4e\xf9\xbe\xb8\x48\xa1\xc4\xc2\xf7\x64\xc0\x24\x2a\x15\x31\x57\x8b\x54\x0e\x4c\x25\x13\x0d\xf8\x12\x95\x7e\xb4\xb8\xc3\x54\x45\x6b\x84\xd5\xa8\x5a\x62\x02\x1b\x0b\xd9\x4f\x11\xaa\x83\x3b\xbd\x45\x43\x25\xde\x78\x63\x1b\x83\xfc\x7c\x43\x14\xda\x6a\xd5\x49\x9e\x18\xad\x49\x55\x95\x6b\xac\x9e\x3d\xe7\xbc\x15\x7d\x8f\xdd\x32\xf7\xdd\xae\xb1\xbd\xb7\xb0\x16\x9b\x0d\x25\xd1\x81\x19\x95\x93\x03\xf2\x4c\xdc\xa2\x01\x91\xe2\xe3\x6c\x16\x26\xa2\xa5\x9f\x43\xbe\xe9\xbd\xf2\x4b\x6f\x30\x66\x3e\xae\x8a\x0a\x18\x1f\x8e\x50\x2b\xc5\x18\xad\x79\x78\x44\x6a\x5b\x80\xd5\xf4\xda\xf0\x6e\x2a\x0d\x3b\xb1\x87\x95\xa6\xc0\x06\xd1\xcb\x56\xea\xd1\xfa\x8d\x70\x3a\xb8\xf4\x09\x4c\x59\xd1\x63\x70\x2a\x15\x08\x69\x96\x70\x03\x76\x83\xad\x14\x7d\x80\xc1\x84\x97\xb2\x53\xf8\x10\x9c\x66\x58\x45\x6b\x53\x7d\x14\x59\x20\x68\x25\x33\xec\xbf\xa2\xce\xe5\x3f\x8c\xde\xca\x0e\xcd\xa2\x7a\xfe\x33\xb6\x28\xb7\x4f\x9f\xbf\x17\x3d\x83\x29\x50\x6e\x70\xbf\xd6\x7d\xe7\xfb\x4b\x13\xde\xeb\x15\x08\x4e\x80\x8d\x4d\x35\x0e\x8f\xac\x1b\x46\x96\x8c\x9b\x20\x13\x79\xb2\x30\x4a\x48\x88\xab\xe1\xa4\xd2\xfe\x13\x30\xd2\x5c\x9a\x38\xaf\x2c\x9f\xc1\x97\xf4\x9e\xfe\xb8\x37\x47\x93\x6f\xa3\xf1\x34\xe4\xb1\x88\x24\x12\x6c\xf6\x2c\x7f\xfd\x31\xa2\xd0\xe3\x45\xdc\xc7\x9a\x73\x78\x47\x30\xe5\xda\x05\xc1\x0f\x85\xb9\x1b\xa9\xc1\xe6\xf3\xa9\x6c\xa2\x8b\xd8\x4b\xfd\x1c\xe6\xf3\x54\x77\xcb\x7c\xd2\x27\x17\x20\x65\x41\xf8\x9d\x47\x6a\xa3\xc2\xec\x43\x91\x46\x2e\x1a\xad\x47\x0a\x6d\x4f\x6e\x80\xcc\x0e\x5a\xe1\x3e\x8d\x6c\x90\xe5\x8c\x11\xca\xae\xd0\x18\xec\x96\xe4\xc5\xa0\x1b\x8d\xf2\x1b\xab\x70\xd7\xef\x73\x23\xb1\x90\x82\x4b\x5d\x94\x13\xdb\xf5\x65\x49\x95\x22\x1d\xd7\x60\x93\x35\x8d\xdc\x14\xf6\x16\x77\x54\x4c\xcb\x43\x69\x26\xc0\xac\x46\x95\xf2\x54\x13\xf1\x15\xbc\x2b\x31\xea\x23\x3a\xb9\xe9\xc5\xcf\xf3\x90\xf3\x62\x02\xf1\xf8\xd3\xce\xe9\xff\x1f\x3b\x27\x5b\xd1\x3b\x85\xe6\xfb\xa5\xf0\xed\xec\xac\x30\xe2\x13\x08\xd7\xe7\x39\x05\x4c\xf8\xf4\xd6\xce\x8e\x40\x2f\xa4\xea\x35\xc8\x2b\xe4\x5d\x05\x3b\xc6\x9a\xe8\x3a\x5b\x14\x9a\xb3\xa9\xba\xc2\x16\x66\x15\x4c\x3f\x79\x79\xf6\x30\x0a\x49\xa5\xfb\x26\x45\x93\x43\xf3\xf4\x62\x99\x1c\xfa\x60\x1a\x6c\xc5\x68\x71\xc2\x72\x51\x5e\x14\x63\x86\x5f\x42\x2a\x9a\xe8\x3b\x30\x1a\xf7\x04\x9e\xfa\xf5\x14\xed\x5a\x14\x0b\x69\xd0\x0b\x6c\x3b\x0e\xd8\xf1\x52\x99\x9d\x57\x9a\x3b\x4c\x80\x5e\x68\xee\xcb\x27\xd0\x0a\xa9\x9e\xfb\x6d\x3d\x04\xa7\x9a\x44\x7a\x74\xb0\xe5\xf5\x5d\x9f\x07\xed\x65\xff\x00\xef\x92\x44\x5d\x96\x4b\x7d\x0e\x82\xdf\x78\x63\xcb\x9a\x8c\x12\x12\x6b\x25\x55\x0c\xf7\x82\xea\x59\x34\x16\x73\xe0\x2d\x5c\x2e\x2f\x8b\xf7\x71\x03\xb7\x45\xe8\x19\x28\xc3\x80\x79\x9d\x8c\x69\xd5\x99\x94\x86\xb7\x47\x9e\x9f\x17\x4b\xcf\xfc\x64\xde\x12\xbf\x7c\x18\x36\x6e\x7f\x48\xea\x94\xf8\x2f\xf9\xd0\x03\x8f\xf8\x02\x44\x8e\xe7\x5f\xd1\xe8\xd4\xcf\x55\x97\xf8\x4d\x4e\xfc\x25\xfa\x9e\x98\x30\xf0\x18\x75\x65\xee\xe2\x03\x1d\x16\xe9\x25\x35\x6c\x9b\xc4\x47\x6e\x8c\x15\x17\x1b\xf1\x66\x13\x35\xd6\x2a\x8b\x0f\x79\xa6\xf3\xda\x80\xeb\xc7\xbf\x4f\xc6\xfc\x89\x2d\x34\x7c\x41\x67\x27\x3e\x7f\x71\x43\x8e\x50\xb5\x41\x3c\x84\xf6\x0a\x6e\xbf\xc1\x27\xad\x9f\xa0\x5d\xa7\x71\xfe\x3c\x5f\x92\x0a\xfb\xe9\x87\x9f\xae\xf2\x36\xcc\xc9\x4c\xf9\x83\xe7\xb9\xed\xdb\xcb\xcb\xe5\xe5\x59\xb5\xa7\xa4\x6c\x6e\x54\x47\x72\xfa\x88\x58\x8b\xdc\xe5\x59\x8d\x97\x26\xba\x81\x34\x92\xcf\x8a\x85\x96\xcf\xbb\xa9\xa5\x51\x3b\xf3\x5a\x88\x77\xa1\xa1\x98\x5e\xa2\x86\xb2\x50\x2a\x31\x43\x5b\x18\x9a\x30\xe5\xd8\x9f\x0e\xa2\x1e\x8c\x62\xbe\xa4\xbe\x24\xc5\x20\x13\x38\x07\xf5\x7b\xe1\x89\xa6\x7d\x2e\xd5\xd1\x29\x92\xa7\xe1\x36\x5b\xdc\x82\xe9\x9c\xa2\x1a\x22\x7e\xb9\xce\xc0\x17\xda\xa2\x16\x1a\x59\x3b\x1f\x8e\x00\xfe\x54\xff\x9d\xa2\x3d\xd4\x81\x4b\xe2\xab\x08\x82\x4e\x08\xe5\x13\xfa\x0b\x49\xfe\x2e\x98\x99\x5f\x9e\x5d\xc1\x57\x3e\x5d\xe1\x84\xe7\xeb\xae\x41\xb8\x63\x8c\x19\xca\x83\x62\x18\x7e\x75\xcc\xda\x75\x60\xd6\x2a\xfb\x47\xec\xf6\x68\xad\x37\xca\xbb\x1e\x76\xd4\x9b\x2a\x5d\x3c\xfe\x06\xc6\xfb\xe6\x90\xc0\x78\x1a\x25\x1c\x0a\xfd\x84\x3a\x29\x0e\xbc\xb5\x96\x78\x41\x89\x9e\x96\x1f\x54\x49\xaf\x00\x67\xa9\x40\x4a\xe9\xb1\x00\x3b\x36\x7c\xae\xb2\xb9\xe2\xc8\x8d\x25\xb9\xeb\xb2\x1b\x9c\x05\x3d\x51\xb1\xed\x64\x17\x58\x8b\xaa\x5e\x0d\x36\x7b\x30\x38\xe8\x6d\xbc\x95\x0b\x65\xcb\x66\xd3\xad\xcf\x41\x79\xc9\xe4\x33\xe9\xdc\x00\x23\x7f\xb5\x26\x2c\xa7\xc1\x9d\xd4\xa5\x53\xa2\x7e\x5f\xfd\x40\x53\x44\x04\xca\x71\xb9\x70\xb8\x8b\x27\xd0\x14\x57\x19\xa7\x11\xe0\x51\xf3\x77\xdc\xf9\x03\xe9\x8b\x60\x90\x1a\x71\xc6\x37\xbe\x29\x57\xb7\x20\xa7\x32\x5a\x39\x3e\x72\x13\x72\x05\xef\x4a\x12\x7f\xb2\xd6\x93\xf7\x29\xc5\xcf\xd3\x75\x93\xb9\x79\xa1\x95\x2c\x91\x7c\x24\x3d\xbc\x82\x43\x67\x94\x9a\x11\x8a\xdf\x47\xc5\x12\xdf\xe0\xa6\x6e\x6d\xf8\x2a\x22\xbf\xcf\x58\xc2\x4d\xdf\xc3\x4a\x22\x9d\xd3\x65\x75\x77\x49\x64\x18\x0d\x35\xb9\x9d\x8e\x4e\xdc\xfe\x6e\x9a\xca\x98\x84\xb8\xbf\x9b\xe7\xbb\xf3\xec\x82\x5e\xaf\x60\xb7\x16\x6e\x92\x43\xf5\x75\xb2\x6f\xda\x9d\x8e\xbe\xb3\x58\xeb\x6b\x1b\x5a\x8a\x1a\x87\x86\x4e\x1d\xc2\x20\x08\xd3\x48\x47\x87\x83\x62\x20\x67\xf5\xac\x14\x2d\x9f\xca\x5b\x83\x9c\x81\x79\xe5\xb1\xe7\x05\xe7\x4f\x68\x88\xf3\x5f\xf2\xf9\xb7\x97\x24\x63\x8a\xaa\xf0\x70\xca\xae\xc4\x58\x1a\xd5\xd4\x95\x49\x07\x16\x87\x62\x8b\x24\x33\xa5\x2a\xee\xda\x2a\xfc\x17\xa4\x70\x98\xb3\xeb\x18\xcf\xca\xe8\xe3\x87\x03\xf2\x37\xbf\x3e\x67\x63\xfe\x74\x70\x11\xfc\x5e\xac\x22\xc5\x78\x5e\x3a\xb4\x36\x41\x95\xd8\xcb\x16\x5a\xb1\x11\x8d\xec\xa5\xdb\xc7\xdc\x85\x8f\x0c\xd9\x3d\x03\x5f\xac\xe1\xc3\x46\x5b\xb4\xb5\x8c\xba\x0d\x6a\xf5\x16\x06\x74\x6b\x4d\x87\x32\xa3\xc7\x3b\x9f\xae\xdb\x78\xc7\x74\x9b\x7d\x15\x38\x90\x95\x62\x61\xbd\x54\xf7\xd7\x7f\xfe\x72\xf8\xb2\xea\xf1\xbb\x79\x51\x50\x17\x7e\x19\xd3\x92\xd3\xad\x56\x31\xcc\x09\x73\x87\xee\x68\x8a\xd2\xd8\xdf\x39\x57\x61\x8f\x6f\x23\x58\xf3\x54\xbd\x8f\xef\x7e\x63\xa6\x82\x9d\x67\x13\x15\xc6\xfd\x5f\xf3\x44\x4d\x20\x27\xec\x24\xc5\xa7\xd3\x93\xaf\x90\x78\x00\xaa\x2b\x85\xca\x63\xc8\x0c\x4c\x45\x72\x82\xa0\xb3\x73\xc8\xb1\x2a\xc9\x6c\x1e\xab\x95\xcc\x41\xb9\xba\x0f\xd4\x67\x88\x09\xa7\x8f\x00\xfe\x9b\x62\x3a\x30\x24\x9a\x25\x35\x91\x71\x6b\xb2\xc2\xad\xea\xa5\x9f\x89\x0e\xd7\xff\xe3\xec\x71\xf6\xdf\x00\x00\x00\xff\xff\x95\x23\x11\x6e\x5b\x1d\x00\x00")

func contractsFlowtokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsFlowtokenCdc,
		"contracts/FlowToken.cdc",
	)
}

func contractsFlowtokenCdc() (*asset, error) {
	bytes, err := contractsFlowtokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/FlowToken.cdc", size: 7515, mode: os.FileMode(420), modTime: time.Unix(1590122988, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0x65, 0x1a, 0x84, 0x26, 0x76, 0xc, 0x1a, 0xc5, 0x76, 0x95, 0x2a, 0x83, 0x4c, 0x41, 0xd5, 0xd, 0x7e, 0xd, 0xcf, 0x8e, 0x24, 0x45, 0xb0, 0xf4, 0x3b, 0x3f, 0xdb, 0xe7, 0xa1, 0x2, 0x73}}
	return a, nil
}

var _contractsFungibletokenCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\xcf\x73\xdb\xba\x11\xbe\xf3\xaf\xd8\x49\x0e\x71\x52\xd9\x7a\x87\x4e\x0f\x9e\xc9\x6b\x93\x79\xf1\x4c\x2e\x4d\xa7\x75\xfb\xae\x82\xc8\xa5\x84\x1a\x04\xf8\x00\x50\x32\xf3\x26\xff\x7b\x67\x17\x3f\x08\x52\xb2\x2d\x4f\x9f\x2f\x96\x48\x60\xb1\xbb\xf8\xf6\xdb\x0f\xd0\xfa\xc3\x87\xaa\x7a\x0b\xf7\x7b\x84\x3b\x65\x8e\x70\x37\xe8\x9d\xdc\x2a\x84\x7b\xf3\x80\x1a\x9c\x17\xba\x11\xb6\xa9\xaa\xb7\x6f\x61\x93\x5e\xf2\xbb\x0d\xd4\x46\x7b\x2b\x6a\x0f\x52\x7b\xb4\xad\xa8\xb1\xaa\xc8\x50\xfe\x0a\x7e\x2f\x3c\x08\xa5\xa0\x4d\x66\x3d\x9b\x4d\x33\x1d\x1c\xcd\xa0\x1a\xd8\x8b\x03\xbd\xa2\xe7\xad\xb1\x1d\x78\x73\x53\x7d\x6d\x41\xc0\xe0\xd0\x3a\x38\x0a\xed\x1d\xbd\x6f\xb0\x57\x66\x04\x01\x1a\x8f\x0b\x53\x2b\xf0\x7b\x94\x36\x7f\xaf\x82\x65\x8d\xd8\xd0\x4c\xd9\xf5\x0a\x3b\xd4\x9e\x86\xc1\x2c\x90\xc9\xdf\x1b\xf6\xbf\x30\xb2\x70\xaf\x35\x8a\x72\x44\x01\x91\x15\x3b\x28\x74\x20\x74\x03\x5a\x74\x52\xef\x2a\x0e\xd7\xcf\x32\xe0\x7a\xac\x65\x2b\xd1\xdd\x84\x14\xfe\x47\x0c\xca\x6f\xc0\xa2\x33\x83\xa5\x84\x7d\x11\xf5\x1e\x44\x5d\x9b\x81\x7d\x13\x1e\xcc\x51\xbb\x10\x5c\x4a\x4f\x0a\x82\xfd\x10\xe4\x30\xed\x4b\x8d\x95\x69\x79\x39\x36\x9a\x6d\x82\xf3\xc6\x62\x03\x52\xc7\x94\x24\xeb\xf4\x5c\xec\x62\x94\xcb\x49\x7b\xe1\xa0\x43\xbf\x37\x8d\x83\x1c\x87\x39\x6a\xb4\x1c\xa1\xf1\x7b\xb4\x71\x3b\x6a\xa1\xa1\x16\x4a\xc5\x90\xfe\x61\xcd\x41\x36\x68\x37\x2b\xd8\xfc\x13\x6b\x94\x07\xfe\x4c\xb3\x36\x9f\x85\x22\x47\xa7\x80\xa7\xd4\x38\x76\xc3\x95\x4f\xa0\xc1\x5a\x09\x8b\xd0\x5b\xbc\xae\x8d\x6e\xa4\x97\x46\x87\x14\xf7\xc6\xf9\xf2\x19\xfb\x68\xd1\x79\x2b\x6b\x5f\x91\xb3\xf8\x88\xf5\x40\x2f\x21\xa6\xa5\x1d\x74\x1d\x06\x87\x54\x84\x90\x43\xf8\x23\xd0\x3a\x0e\x7b\x61\x85\x47\xd8\x62\x2d\x06\xf2\xc5\xc3\x4e\x1e\xd0\xf1\x70\x8a\x96\x3f\x88\xad\x54\xd2\x8f\xb4\x05\x6e\x2f\x2c\x56\x02\x2c\xb6\x68\x51\xd7\x8c\x8b\x90\xe6\x90\xd0\xb0\x85\x5a\x8d\x80\x8f\xbd\x71\xd1\x54\x2b\x51\x35\x6e\xf2\xa8\x92\x1a\x8c\x46\x30\x16\x3a\x63\x31\x79\x3c\xa5\xe2\xa6\xaa\xbe\x52\xe9\x38\x13\x1d\x0a\xa9\x5f\x78\xd3\x89\x07\x84\x7a\x70\xde\x74\x39\xc3\x31\x35\x19\xf0\x94\x9b\x79\x96\xa9\x90\x0c\x1c\x84\x95\x66\xa0\xd1\x52\xef\x1c\x1c\xa5\xdf\xb3\xf9\x80\xbc\x9b\xea\xce\x58\xc0\x47\x41\x66\x56\x20\xa0\x15\x43\x8d\x9e\xf7\x7e\x8b\x93\x75\x6c\x60\x3b\xa6\xba\xe5\x1a\xe0\x74\x40\x02\xc5\xac\xb8\x3e\x8f\x30\x38\xa9\x77\x85\xaf\xb4\xb5\x93\x6b\xab\x18\xa6\x69\x17\x25\x9a\x09\xa3\x22\x07\x1c\xea\x86\x67\xda\x00\xb7\x54\x2d\x3d\xa2\xbd\xf6\xe6\x9a\xfe\xaf\x38\x22\x33\x78\xaa\x1a\x5a\x93\x48\x80\x16\x62\x6e\xa0\x60\x05\xd4\x48\x56\x15\x28\x6c\x76\x68\xc1\x75\xc2\xfa\xbc\xd4\x0d\xdc\x9b\xb0\x52\xb4\xee\x0d\x08\x3d\xd5\xc1\xaa\x0a\xf4\x14\x6b\xd4\x51\x4a\x46\x5e\xb4\xb1\xe2\x58\xa4\x12\x5a\x6b\xba\x12\x23\x4c\x55\xa1\x84\x18\xb8\x0d\xf6\xc6\x49\x9f\xd1\x01\x46\xcf\x56\x7a\xe7\x12\xb6\x88\x21\x29\xf3\x1e\x83\x7d\x2b\xb4\x6b\xd1\xde\x54\xd5\x87\x75\x55\xad\xd7\xcc\xe3\x9d\x90\x7a\xc9\xe3\xc5\x2e\xac\xd7\xf0\x8d\x4d\x3f\xcd\xc9\x52\xa9\x19\x61\x4a\x57\x50\xfc\x7a\x5d\xf5\xc3\xf6\x0c\xf9\x2f\xb6\xec\xf7\xaa\x02\x00\x88\x4e\x79\xe3\x85\x02\x3d\x74\x5b\xb4\x8c\xf6\x90\x1a\xa9\x01\x1f\xa5\xf3\x54\x49\x37\x69\xfc\x57\x0f\xd2\xc1\xd0\xc7\xd2\x2a\xc0\x66\xe9\x11\x6a\x37\xd8\xd8\x5b\x82\x59\x37\xf4\xbd\x1a\xd3\x74\xe7\xc5\xe8\x88\xf4\x06\x2e\x6d\xc2\x49\xb0\xd5\x08\x8f\x3c\x88\xfc\x3f\x08\x1b\x66\xff\x8b\x27\xdf\xc2\xbf\xef\xe4\xe3\x5f\xfe\x9c\x9d\xfe\x72\xc0\x44\xc8\xd2\x01\x76\xd2\x13\xd6\x8f\xb4\x71\xe4\xd3\x14\xbe\x83\xda\xa2\xf0\xd8\x64\xd3\xc8\x53\x67\xd9\xf8\xaa\xa5\x97\x42\xc9\xef\xd8\x5c\xc9\xf0\x79\xbe\xee\xfb\x8b\x16\x0e\x49\x23\xe6\x4a\x38\xd3\x01\x5d\x22\x20\x64\xe1\xc2\xaf\x71\xd0\x95\xe8\xa8\x01\xa4\xb5\x56\x3c\xe7\x16\x3e\x35\x8d\x45\xe7\xfe\xfa\xda\xb5\x23\x5e\x43\x4f\x3a\xbf\xf2\x2f\x61\xc8\xc9\xc2\xde\x9c\x5b\x36\x91\x45\xfc\x9e\x71\x30\xd7\x11\x48\x1c\x53\x47\x42\xb5\xf8\xdb\x20\x2d\xa3\xc2\x41\x6b\x6c\x4e\x08\x71\x50\x9c\xbf\x28\xbf\x09\x47\x4c\x07\x63\x9f\x11\x97\x26\xfc\x8a\xd0\x18\xfd\x2e\x2f\x35\x5f\xc5\x68\xd8\x6c\x53\x3f\xdb\xa3\xc5\x55\x9a\x57\x74\x0f\x85\x82\xd8\xda\xf4\x11\x27\xbd\x71\x4e\x46\xc2\x36\x6d\x80\x0a\x2d\x1f\x49\xbb\x8f\x91\xbb\xec\x33\x45\x1a\x9c\xd0\x58\xa3\x73\xc2\x4a\x35\x46\x05\xc0\x14\x62\x8e\x1a\xa2\x1b\x33\xff\x29\xf9\xa7\x5d\x76\x22\xe2\x58\x8f\x71\x9d\x94\xae\xe2\x59\xf9\xfa\x2e\x51\x11\xfb\xe3\x86\x6d\xa4\x86\x65\x4a\x59\x20\x24\x7e\x2a\x0d\x04\x76\xf6\x83\x25\xcc\x2c\xb5\x46\xee\x35\x16\x3b\x73\xc0\x26\xf7\x9c\xf3\xce\xdc\x17\xbd\xfc\x1d\x57\x36\x3a\x07\x0a\x0f\xa8\x08\xa6\xfd\xb0\x55\xb2\x5e\xc1\x76\x48\x5c\xe5\x28\x7d\x82\x92\xbb\x55\xd8\x95\xa6\xd2\x4e\x71\x83\x9e\x14\x0e\x37\x15\x6f\x2c\x03\x83\xfd\xca\x79\x9c\x6b\xa8\xd2\x56\xcd\x4a\x8c\x6b\x59\x8d\xcc\xe6\x61\xf9\xe4\xea\x73\xe1\x84\x65\x3b\x31\xc2\xce\x0a\xed\xa3\xbc\x8a\x8b\xe4\x10\xa9\xb3\x26\xc0\x50\x38\xf2\x90\x18\x2c\xbb\xd0\x67\x35\x40\x1b\x15\x5a\x91\x60\x95\x1a\x95\x67\x3d\x93\x6e\x54\xb0\x6c\xbb\xb4\xc2\x38\x4d\x30\xc9\xa1\xfb\xbd\x35\xc3\x8e\xda\x64\xd6\x3a\x97\x45\x14\x44\x0b\x87\x45\x39\x79\x21\x28\xde\xbc\x4b\x63\x22\x7b\x67\xc3\x99\xc5\x50\x5a\x7b\x75\x38\x54\x46\xed\xa0\x73\x81\x2c\x28\xec\xfd\x2d\xfc\x2d\xa0\xf9\xf7\x3c\x85\xa7\x19\xb7\x7c\x14\x3d\xd8\x58\x74\x51\xf3\xb7\xd1\xe7\x00\x31\x2a\x0e\x38\x08\x35\xe0\xc9\xb4\x30\xe5\x26\x96\x39\x7c\xfc\x08\xd1\x8b\x93\x91\xf4\xf7\x26\xf1\xbc\x50\x71\x1c\x74\x83\xf3\xa4\xd3\x68\x25\x27\x3a\x04\x11\x52\x94\x2c\x46\xbd\x39\x75\x11\x8e\xe9\xcd\xcc\xfc\x8f\x6a\xfe\xe9\x47\xe6\xeb\xa4\xf2\xff\x1f\xbe\x8e\x4d\xe4\x94\xae\xa5\x5e\xb6\xfd\x17\xe9\x5a\xea\x5a\x0d\x0d\x92\xa2\x4b\x07\x84\xe0\x42\xbd\xc7\xfa\x61\x1e\x79\x64\x80\x64\xe3\x88\x7c\xba\xa4\x5d\x21\x9d\x7d\x89\xcc\x0e\xb1\x07\x99\x5d\x15\x5c\xd0\x98\x34\xe6\xbc\xa4\x5e\x81\x92\x0f\x74\x22\x54\x92\x4f\x57\x1d\xc9\x12\xa1\x9b\xac\x5b\x58\x6b\xd2\x73\xd2\x2a\xb2\x65\x94\x7a\xe8\x55\x38\x0f\xc0\x8b\x54\x9f\xb6\x65\x41\xf5\x31\xd3\x17\x31\x7d\x94\xf7\x44\x66\xa1\xbd\x27\x6d\x1a\x42\x28\x27\x9e\xdf\xa7\xa9\xde\xc6\x1e\x9f\xab\xaf\x68\xf8\x2a\x48\x91\x50\x53\xef\x97\x45\x65\xf1\x4c\x4d\xd1\x8c\x5c\x1a\x3f\xc7\xba\xbc\xfa\xe9\xfd\x13\xc5\x11\xa5\x48\x06\x40\x2a\x8d\x00\xbf\x03\x5e\x0a\xfa\x78\x94\x7d\x1e\xf3\x24\x0b\x85\xd4\x01\x41\x93\x5a\xe0\xe3\x1f\x94\xa7\xf5\x34\x9f\xfa\x64\x51\x28\xc4\x77\xa4\xb6\x34\x1e\xc3\xb8\x77\x41\x72\x45\x89\xb9\x2a\xa1\x9c\x4c\xb0\x3a\xcf\xf2\x12\x6a\x63\x2d\xd6\x5e\x8d\x97\x40\x26\x06\xb5\x40\xcc\x24\xd8\x17\x7c\x11\xb9\xfc\x9d\x5b\xe2\x21\x29\xea\x38\x7e\xae\xa6\xe9\x8f\x3c\xbc\x5a\xbc\x3d\xd9\xee\xf3\x1c\xea\x50\xb5\x25\x15\x26\x2b\xe7\xb7\xfb\xf3\x62\x9b\xcb\xd4\x24\xc0\x86\x47\xc9\xd0\xa5\x00\x28\xf7\xad\x3c\xda\x14\x2d\x66\x89\x80\xe9\x06\xc2\x9b\xa7\x4e\xad\x4b\x56\xbb\xe7\x13\x61\xad\x84\x15\xe9\x32\x83\x79\xad\xb6\x7c\xec\x1b\x7b\x56\x25\xe2\xdc\x01\xac\x43\xa1\xe7\xbc\x84\x07\xb4\xe3\xf2\x30\x98\x67\xce\x2f\x0a\xdc\xf2\xa4\x17\x6d\x70\x26\x1b\x6c\xa5\xc6\xd2\x93\xd0\x05\xcd\xf6\xbf\x18\x2d\x65\x2e\x0c\x97\x01\xb9\xd3\x5d\x76\x41\x54\xdc\x0b\x15\xa5\x11\x99\x9d\xb3\xe9\xf2\x35\x0a\xbd\x99\xae\x52\x9e\x42\x39\x3b\x78\x9b\x05\xf0\x2a\xf3\xe3\xaa\x80\xfd\x2b\x50\xff\x7a\xd0\x47\xa3\xd3\xed\x48\xd8\xbe\x98\xd0\x70\xd5\x35\x89\x48\xf9\x7d\x2e\x5d\xd2\xe5\xa9\x39\x3a\xd2\x7e\x14\x45\xd2\xa7\x0b\x04\x27\x47\x0f\x0b\x15\xfe\x7c\xf5\x9d\x3d\x0f\x14\x5a\x7f\x13\xb4\xc4\x66\x52\xfb\x6c\xdf\xe5\x55\x53\xef\x82\x24\xb5\x92\xdc\x3f\x94\xd0\xc8\x5d\x30\x59\xc6\x66\xc6\x60\xf0\xc7\xe8\xaf\xb3\xad\x62\x46\x1d\x3f\xbf\xa0\xa2\x3e\x05\xe9\x34\x69\xa2\x44\x21\x2a\x08\x4c\xa1\xc1\x58\xc0\xdf\x06\xa1\xc2\xb7\x33\x82\xea\x59\x19\x05\xcf\xea\x44\x3a\x96\x70\x9a\x48\xb7\x0b\x35\xdd\x06\x6d\xb6\xd8\x1a\x8b\x1b\xd6\x28\xe8\xe3\x4e\xa8\x21\x2f\xba\xe8\x33\xe7\x8c\xc7\xfb\xdc\x2d\xee\xa4\xd6\x84\xa2\xc5\x15\xe9\x74\x79\x7a\x66\xf6\xcb\x8c\xcc\x0e\x5e\x95\x8f\xdf\xc3\xf5\xf3\xd9\xfe\x7b\xea\x70\x27\x8d\x99\xaf\xc4\xa2\xfc\x99\x32\xdb\x5b\x3c\xf0\x7d\x65\x81\xbe\xd7\x69\xd8\x33\x9a\x08\xbc\x78\xc0\x13\xc4\x0a\x7a\xd2\x0b\x2b\x3a\xf4\xf1\xfa\x5b\x34\xcd\x5c\xfc\x14\x65\x10\x69\x6e\x81\x84\x78\x09\xff\x64\x49\xbe\x4a\x07\x5d\xd8\x18\xcf\x6d\xc3\x9f\xd2\xe3\x52\x36\x3d\xa5\x95\x9e\xdf\x14\x37\x74\x2f\xee\xc6\x74\x37\xf4\xaa\x13\x45\xd0\x37\x5f\xba\xde\x8f\xe7\xda\xec\x27\x3d\x86\xbb\xd6\xf4\xd3\xc3\xfc\xa4\xcd\x17\xa3\x6c\x21\xfe\x34\x54\xf6\xa6\xd9\xcd\xca\x5e\x4c\x2e\x7f\xfc\x08\x3f\x2d\x9b\x07\xed\xc8\xd2\x97\xab\xcc\x39\x33\x62\xff\xf6\xcb\xb7\x5b\xb0\x78\x8d\x5a\xf0\x25\x2a\x39\xc4\x1b\x95\xcf\x20\xe5\xf0\xc5\x16\xae\xd7\xfc\xef\xf4\x9c\x37\xa9\x59\x78\x43\xbd\x43\xe3\x51\x8d\x49\xfe\xc5\xb8\x78\x4f\xf8\xb7\xa0\xef\x68\xcd\xa9\x8c\x59\xaf\xe1\x47\xf5\xa3\xfa\x5f\x00\x00\x00\xff\xff\x47\xe5\x95\x87\xdb\x1b\x00\x00")

func contractsFungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsFungibletokenCdc,
		"contracts/FungibleToken.cdc",
	)
}

func contractsFungibletokenCdc() (*asset, error) {
	bytes, err := contractsFungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/FungibleToken.cdc", size: 7131, mode: os.FileMode(420), modTime: time.Unix(1590123319, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0xa1, 0x6b, 0xec, 0x14, 0xb8, 0xbe, 0xf8, 0x10, 0xf3, 0x60, 0xfc, 0xd8, 0xd5, 0x44, 0xc9, 0xf6, 0xe4, 0xec, 0x18, 0x29, 0x87, 0xfb, 0x84, 0xf6, 0xdf, 0xee, 0xdf, 0x96, 0x32, 0x70, 0xd9}}
	return a, nil
}

var _contractsServiceaccountCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\x4c\x02\x0d\x12\x24\xb2\x0b\xa5\x07\x91\x0f\x52\xb7\x3e\x97\xd4\xe9\xb5\xac\x56\x23\x6b\xc9\x7a\x57\xac\x46\xfe\xc0\xf8\xbf\x97\x95\x56\xb2\xd6\x1f\x35\x2d\x2d\x34\x27\x25\xf3\xde\xcc\xbc\xb7\x33\x13\xb1\x28\xb5\x21\x98\xd6\x6a\x2e\x52\x89\x33\xfd\x86\x0a\x72\xa3\x17\x30\x5e\xbf\xab\x82\x2e\x2c\xf5\xea\x5c\x08\x71\xa2\x15\x19\xc6\x69\x10\x0c\xca\x3a\x05\xde\xfd\xfd\x1b\x9a\xa5\xe0\xf8\xcc\xb9\xae\x15\xc1\x36\x08\x00\x00\x2c\x44\x22\x01\x19\xa6\x2a\xc6\x49\x68\x35\x45\x4c\xe0\x75\x2a\xd6\x1f\x3f\x78\x10\xd6\x32\x27\x06\xd9\x21\xac\xc7\xe5\xb5\x82\x0c\xb3\x9a\xd3\xcc\x4b\x18\xfe\xb0\x74\x4a\xe0\xb9\xa6\xc2\xb5\x10\xc1\xb6\xe1\xd9\x9f\xa6\x05\xab\xed\x3b\xab\x25\xc1\x03\x54\x28\xf3\x38\xc3\xdc\xfe\x3a\xeb\x03\xa1\x4d\x12\x79\xac\x1c\xb1\xe5\xdc\xdf\x0d\x32\xc4\x2b\x41\x45\x66\xd8\x2a\x64\x0b\x5b\x2b\x69\x13\xfa\x2a\xa3\xa0\xcf\x34\x30\x30\xce\xb0\xd4\x95\xa0\xd0\x1a\x99\xd8\xb4\x5d\x89\xb6\xf0\xee\x94\xda\xe7\x23\x6f\xfe\x13\xc5\xc7\x8f\xf6\x57\x54\x0b\x25\xe8\xf3\xa0\xd7\x4b\x6a\x47\x23\x68\x5a\x40\x60\xa0\x70\x35\x98\xe5\x56\x0a\x53\x19\x94\x35\x81\x20\x10\x0a\x2a\xd2\x86\xcd\xb1\x67\xdb\xd4\x71\xc5\x96\x18\xde\xdf\xf5\xcc\x98\x37\x09\xbf\x2c\x4a\xda\xb4\x56\x45\xb7\x40\x3a\x81\x91\xa3\x8f\xf2\x0e\xea\x74\x9c\xec\xa6\xac\x53\x29\x38\x70\x56\xb2\x54\x48\x41\x1b\x20\x0d\x54\xa0\x6b\x8c\x0a\x46\xa0\x95\xdc\x00\xae\x4b\x5d\x61\x35\x4c\x62\x61\xce\x37\xeb\x4a\x33\x57\x40\x85\xd1\xf5\xbc\x68\x82\x2f\xc8\x51\x2c\xd1\x80\x50\x84\x26\x67\xfc\x40\x93\x14\xea\xed\xfe\x66\xeb\x2d\x7e\xdc\x91\x76\x8f\x61\x8f\x6e\x0a\xb6\xad\xee\x65\x75\xc0\x5b\x0f\x46\xcc\xcc\x91\xce\xda\xd0\x63\xff\x91\x1f\x29\x93\x4c\x71\x84\x5c\xa0\xcc\x3c\x33\x3e\xb9\xc8\xef\x78\xe1\x38\x17\xad\x70\xb8\x3f\x75\xe2\xe4\x5e\xef\xa7\xdb\x65\xef\x87\xfc\x6b\x53\xbd\x1b\xf3\xee\x0a\x1e\x2c\xb7\x33\xe2\x05\x73\x78\x68\x78\x5e\x6f\xf1\x1c\x69\xd2\x7b\x1c\x9e\x13\x14\x5d\xf9\xac\x54\x1b\xa3\x57\xbf\xb0\x29\xba\xda\x3f\xab\x41\xaa\x8d\x1a\x34\x12\xbb\xcf\x4b\x7a\xdb\x75\x3a\xb5\xd2\x09\xdc\xec\x17\xb0\x9d\x88\xed\x61\xbd\xe6\x35\xbb\x46\x0f\xd0\x8f\xee\xbe\x9c\xdb\x51\x78\x7a\x82\x92\x29\xc1\xc3\xeb\x57\xc5\x52\x89\x76\xfa\xda\x5c\x60\x30\x47\x83\x76\x82\xdc\x44\xba\x96\xdb\x23\x08\x4b\xfb\x7d\xed\xbd\xa5\xbd\x52\xe1\xf0\x0c\x9d\xf8\x27\x00\x0f\x30\x8e\xc7\xe3\xf7\x3e\xe6\xf8\x6c\x7a\xb8\x5d\xb0\x0b\x7e\x06\x00\x00\xff\xff\x56\x24\xdf\xe5\xb5\x07\x00\x00")

func contractsServiceaccountCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsServiceaccountCdc,
		"contracts/ServiceAccount.cdc",
	)
}

func contractsServiceaccountCdc() (*asset, error) {
	bytes, err := contractsServiceaccountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/ServiceAccount.cdc", size: 1973, mode: os.FileMode(420), modTime: time.Unix(1590112880, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0x94, 0xa4, 0x32, 0xb, 0xce, 0xcb, 0x4f, 0x94, 0xec, 0x20, 0xa6, 0x43, 0x95, 0xe3, 0xaf, 0x41, 0xf1, 0x4f, 0x13, 0x4c, 0x3e, 0x5d, 0x35, 0xb1, 0xf1, 0xd4, 0x93, 0x19, 0x28, 0x21, 0x49}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/FeeContract.cdc": contractsFeecontractCdc,

	"contracts/FlowToken.cdc": contractsFlowtokenCdc,

	"contracts/FungibleToken.cdc": contractsFungibletokenCdc,

	"contracts/ServiceAccount.cdc": contractsServiceaccountCdc,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": &bintree{nil, map[string]*bintree{
		"FeeContract.cdc":    &bintree{contractsFeecontractCdc, map[string]*bintree{}},
		"FlowToken.cdc":      &bintree{contractsFlowtokenCdc, map[string]*bintree{}},
		"FungibleToken.cdc":  &bintree{contractsFungibletokenCdc, map[string]*bintree{}},
		"ServiceAccount.cdc": &bintree{contractsServiceaccountCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
