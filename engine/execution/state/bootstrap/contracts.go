// Code generated by go-bindata. DO NOT EDIT.
// sources:
// engine/execution/state/bootstrap/contracts/FeeContract.cdc (1.89kB)
// engine/execution/state/bootstrap/contracts/FlowToken.cdc (7.523kB)
// engine/execution/state/bootstrap/contracts/FungibleToken.cdc (7.131kB)
// engine/execution/state/bootstrap/contracts/ServiceAccount.cdc (1.973kB)

package bootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsFeecontractCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xcf\x6f\x9c\x3a\x10\xbe\xf3\x57\xcc\xe5\x49\x10\x65\xe1\x1d\x9e\xde\x21\xdd\x54\x55\x93\xac\xd4\x5b\x55\xa5\xb9\xcf\x9a\x21\xb8\x05\x1b\xd9\x66\xc9\x36\xca\xff\x5e\xf9\x17\xe0\x84\xaa\xed\x5e\xbc\x30\xf3\xcd\xaf\xef\x1b\x5c\x5d\x5c\x64\xd9\x81\x08\x6e\xa4\x30\x0a\x99\xc9\xb2\xfb\x96\x6b\x60\xe1\x11\x06\x25\x4f\xbc\x26\x0d\x08\x27\x1c\x3b\x03\x53\x4b\x8a\xc0\xc8\xef\x24\x34\xa0\x22\x60\xb2\xeb\x88\x19\xaa\x01\xad\x57\x43\x74\x09\x68\xc0\xb4\x04\x24\xea\x4c\x36\x40\x83\x64\xad\x7d\x71\x76\x80\xe3\xa8\x04\xd5\x70\x3c\x3b\x1f\xac\x7b\x2e\x00\x19\x93\xa3\x30\x65\x96\x5d\x54\x59\xc6\xfb\x41\x2a\x03\x87\x51\x3c\xf2\x63\x47\xf7\x36\x19\x34\x4a\xf6\xf0\xef\xd3\x3f\x7a\x36\x77\x72\x7a\x6d\xca\x86\xf1\xb8\x14\x7f\x20\x8a\x7d\xc1\x73\x96\x01\x00\x54\x15\xdc\x9d\x48\xd8\xfa\xd0\x00\xd7\x40\x3d\x37\xb6\xf8\xa9\x25\xe1\x0a\x9a\xd1\x2d\x6a\xe0\x82\x1b\x8e\x1d\xff\x41\xb5\x83\xdb\xf0\xe4\xf0\xab\xd8\x9f\x16\xa7\xbc\xf8\xa3\x34\xcb\xf4\x6a\x1a\xa4\xe6\xd6\x62\x24\x20\x3c\xd8\x19\xbf\xcd\x74\x1b\xbd\x72\xec\xed\x9c\xae\xe0\xeb\x81\x3f\xfd\xff\xdf\xdf\x67\xd3\x46\xc9\xf3\x56\x33\x6e\x92\xfa\xa3\xe3\xe6\x97\x59\x3e\x2b\x7e\x42\x43\x5e\x0a\x97\x30\x71\xd3\xda\x28\x1d\x67\xb1\x11\x68\x46\xc1\x0c\x97\x22\x40\xdc\x81\x8c\x91\xd6\xb9\xa6\xae\x29\xe0\x84\xca\xe3\xaf\xe0\x43\xc2\x70\xe9\x9b\x8f\xb9\x42\xc0\x75\x9c\x70\xd8\xba\x9b\x51\x44\x8f\xdc\xd2\xbf\x1d\xac\x80\x67\x87\xb0\xbf\x8e\x0c\x1c\xb1\x43\xc1\x08\xae\x9d\x64\xca\xf0\x38\xbb\xd8\x02\x4b\x57\x5b\x99\xc6\xde\xef\x1c\xa0\x98\x3d\xed\x80\xb7\x89\x09\x31\xbd\xeb\xcb\xdc\x8d\x1b\xac\x4a\x9b\x81\x2f\xa4\xe5\xa8\x18\x81\x3c\x7e\x23\x16\xe8\x4b\x16\x42\x03\x43\x01\xad\xec\x9c\x3e\xec\xe6\x04\x3a\xcb\xd7\x03\x51\x31\x96\xcf\x14\xf5\x1e\x32\x59\xa4\x67\x78\xf5\x76\xed\x70\x4b\x86\x54\xcf\x05\x69\xb7\x04\x71\x50\xb2\x71\x8f\xf6\x0b\xf1\xe0\x39\xd7\x13\x0e\x3a\x7d\xe9\x75\x80\x62\x1d\x8f\xfa\xc1\x9c\x23\x26\xc8\xee\x35\x0c\x45\xed\x06\xa9\x01\x45\x10\xa2\x8b\x64\x5a\x4a\x6a\x0f\xb5\xb8\xe9\x4c\xa8\x17\x15\x97\x5b\xcd\x44\x75\x2c\x2d\xe7\x45\x54\xf2\x4a\x0e\x51\x12\x9e\x37\xb8\x5e\x2f\x74\xd0\x40\x94\x47\x82\xb1\xf2\x75\xcd\xf9\x1e\xf6\xbb\xe5\x3b\x54\x32\x45\x68\xe8\x6e\xb6\xe6\x45\x02\x7d\x93\x01\xf6\xbb\xf7\xab\x60\x89\x73\x68\x72\x6d\x4e\xec\x51\x81\x9b\x7b\xeb\xcf\x34\xbb\x22\x63\xe5\xe3\x4d\xb3\x25\x28\x34\x1c\xf6\x73\x97\xaf\x97\xa6\xaa\xe0\xc6\x35\xe5\xa8\x5b\x68\xd3\x78\x22\xe0\x06\xb8\x00\x6d\xa4\xc2\x47\xda\xa2\x62\xd9\xa7\xdf\xce\x29\x5d\x53\x2f\xe1\xfd\x0e\xbc\x67\xd0\x74\x5e\xbc\x4b\x43\xc7\x5b\xc3\x56\x93\xef\x77\x1e\x76\x09\x46\x5e\x41\x15\xca\xaa\x1a\x22\x8f\x2e\x92\x85\xb8\xb3\xe3\x9b\x65\xe7\xa4\xa5\x5b\x39\x69\xff\x37\xb9\x07\xa6\x8d\x7b\x60\xcd\xc0\xf6\x35\xe0\xa7\xfa\x92\xfd\x0c\x00\x00\xff\xff\x16\x1c\x39\xed\x62\x07\x00\x00")

func contractsFeecontractCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsFeecontractCdc,
		"contracts/FeeContract.cdc",
	)
}

func contractsFeecontractCdc() (*asset, error) {
	bytes, err := contractsFeecontractCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/FeeContract.cdc", size: 1890, mode: os.FileMode(420), modTime: time.Unix(1590113377, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x30, 0x3a, 0x63, 0x23, 0x19, 0xc6, 0x4c, 0x4e, 0x0, 0xa3, 0xe, 0x13, 0x8d, 0xdb, 0x29, 0x20, 0x9a, 0xe9, 0x94, 0xd1, 0x16, 0x1f, 0x3a, 0x11, 0x57, 0x1f, 0xf1, 0x86, 0x8b, 0xd7, 0x93, 0x65}}
	return a, nil
}

var _contractsFlowtokenCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x5f\x6f\x23\xb7\x11\x7f\xd7\xa7\x98\xa6\x68\x23\x5f\x64\xd9\x01\x8a\x3e\x18\xbe\xe4\x7c\xcd\x1d\x70\x0f\x69\x8a\xf4\xda\xbe\x9a\xbb\x3b\xb2\x18\xef\x92\x02\xc9\x95\xac\x1c\xfc\xdd\x8b\x19\xfe\x59\x92\x96\x64\xbb\x69\xfc\x90\x9c\x76\xc9\xf9\xc7\x99\xdf\xfc\x38\x7b\xf1\xe6\xcd\x6c\xf6\x47\xf8\xd8\xeb\xdd\x67\x7d\x8f\x0a\xf0\x41\x0c\x9b\x1e\xa1\xd5\xca\x19\xd1\xba\xd9\xec\xf3\x5a\x5a\x90\x16\xc4\xf4\x52\xd2\x7f\x07\x54\x4e\x38\xa9\x15\xe8\x15\xb8\x35\xb2\x10\xf8\x38\xaa\x3b\xd9\xf4\x08\x5e\x9c\x75\x42\x75\xc2\x74\xcb\xd9\x27\x0b\x4a\x3b\xd8\x08\xe3\xe2\x86\xf8\x72\x01\xcd\xe8\xe0\x97\xd1\x3a\xb0\x6b\xbd\xb3\xb0\xd6\x3b\x18\xb4\x75\xe0\x48\x88\x9d\xd9\xb5\x1e\xfb\x6e\x52\x5b\xed\x96\xaa\xed\xc7\x4e\xaa\xbb\xc9\x0c\x85\x6e\xa7\xcd\xbd\x17\x00\xd2\x59\xec\x57\x4b\xf2\x05\x33\x5f\xa3\x8f\xa0\x55\xbf\x07\x85\xd8\x59\x70\x1a\x1a\x84\x0e\x37\xbd\xde\x63\x07\x52\x81\x56\x08\xa2\x6d\xf5\xa8\xdc\x92\x05\xf0\xea\xdc\x8f\x24\xc7\xad\x85\x83\x1d\xdb\xda\x90\x81\xda\x78\x11\x28\xda\x35\x8c\x16\xcd\xd7\x36\x8a\x9a\x49\xcb\x7b\xff\x2d\xc6\xde\x81\x6e\x7e\xc1\xd6\x2d\xa0\xc1\x5e\xef\xbc\x99\x55\x8c\x3b\x8d\x3e\x80\x64\x26\x59\x69\xb0\xc3\x95\x54\xc8\x52\xa4\x72\x68\x56\xa2\x45\xeb\x6d\x10\x06\x67\xa2\x37\x28\xba\x3d\xf8\x65\x6c\x07\x87\xa7\x3c\xa0\xb4\x73\x36\x7b\x73\x31\x9b\xc9\x61\xa3\x8d\x4b\x8b\xfc\x9a\x95\xd1\x03\x5c\x3e\xfc\xc9\xce\x66\x9b\xb1\x99\xdc\x4d\x91\xbc\xaa\x36\x7c\x99\xcd\x00\x00\x2e\x2e\xe0\xb3\x76\xa2\x07\x3b\x6e\x36\xfd\x9e\xc2\xb5\xa2\xc3\xf1\xa7\xca\x81\x79\x90\xd6\xa1\x6a\x91\xd7\x93\xf0\xad\x30\xe0\x68\xd3\x3f\x79\xcf\x15\xfc\xeb\xa3\x7c\xf8\xeb\x5f\x92\xc0\x0f\x5b\x7f\xfe\xc2\x51\x4e\xe2\x20\x9d\xc3\x0e\x76\x6b\x54\xe5\x51\x48\x0b\xad\x41\xe1\xb0\x4b\xa2\x91\xb7\x16\x96\x7e\x52\xd2\x49\xd1\xcb\x5f\xb1\x9b\x4b\xff\xef\x52\xef\xd9\x8b\x14\x7b\x7f\x84\x41\xd8\x49\xb7\xee\x8c\xd8\x85\xa0\x09\x7f\xbe\x95\x09\xff\x09\x8b\xe6\x62\xa0\x54\x88\xba\x16\xbc\xe7\x0a\x6e\xba\xce\xa0\xb5\xdf\xbf\x56\x77\x87\x1b\x6d\xa5\xf3\xe9\x71\x58\xf3\x0f\x7e\xc9\x13\xc5\x4e\xbf\x52\xad\xc2\x5d\xae\x7a\xa0\x34\xaa\x23\xfd\xa3\x54\xb5\xa6\xd7\xbb\x64\x9d\xa1\x42\xac\x44\xbf\x1f\x8d\xfa\x5f\x44\x0b\x18\x70\xe7\xad\x35\x60\xd0\xea\xd1\xb4\x78\x3c\x57\x7e\xe4\x85\x7f\xf3\xef\xe6\xa2\xef\xf5\x0e\xbb\x9b\x23\x6a\xa7\x78\x5f\x5c\x24\x53\x62\xe1\x7b\x30\x60\x10\x95\x8a\x90\xab\x45\x2a\x07\x86\x92\x09\x06\x7c\x89\x4a\xbf\x5a\xdc\x61\xaa\xa2\x35\xc2\x6a\x54\x2d\x21\x81\x8d\x85\xec\xb7\x08\xd5\xc1\x9d\xde\xa2\xa1\x12\x6f\xbc\xb0\x8d\x41\x7e\xbe\x21\x08\x6d\xb5\xea\x24\x6f\x8c\xd2\xa4\xaa\xca\x35\x56\xcf\x9e\x63\xde\x8a\xbe\xc7\x6e\x99\xeb\x6e\xd7\xd8\xde\x5b\x58\x8b\xcd\x86\x82\xe8\xc0\x8c\xca\xc9\x01\x79\x27\x6e\xd1\x80\x48\xf6\x71\x34\x0b\x11\x51\xd2\xcf\x21\xde\xf4\x5e\x79\xd7\x1b\x8c\x91\x8f\x5e\x51\x01\xe3\xc3\x11\x68\x25\x1b\xa3\x34\x9f\x1e\x11\xda\x16\x60\x35\xbd\x36\x7c\x9a\x4a\xc3\x4e\xec\x61\xa5\xc9\xb0\x41\xf4\xb2\x95\x7a\xb4\xfe\x20\x9c\x0e\x2a\x7d\x00\x53\x54\xf4\x18\x94\x4a\x05\x42\x9a\x25\xdc\x80\xdd\x60\x2b\x45\x1f\xd2\x60\xca\x97\xb2\x53\x78\x13\x9c\xe6\xb4\x8a\xd2\xa6\xfa\x28\xa2\x40\xa9\x95\xc4\xb0\xfe\x0a\x3a\x97\xff\x30\x7a\x2b\x3b\x34\x8b\xea\xf9\xcf\xd8\xa2\xdc\x3e\x7d\xfe\x5e\xf4\x9c\x4c\x01\x72\x83\xfa\xb5\xee\x3b\xdf\x5f\x9a\xf0\x5e\xaf\x40\x70\x00\x6c\x6c\xaa\x71\x79\x44\xdd\xb0\xb2\x44\xdc\x94\x32\x11\x27\x0b\xa1\x94\x09\xd1\x1b\x0e\x2a\x9d\x3f\x25\x46\xda\x4b\x1b\xe7\x95\xe4\x33\xf8\x92\xde\xd3\x1f\xf7\xe6\x28\xf2\x6d\x14\x9e\x96\x3c\x16\x96\x44\x80\xcd\x9e\xe5\xaf\x3f\xc6\x2c\xf4\xf9\x22\xee\x63\xcd\x39\xbc\xa3\x34\xe5\xda\x05\xc1\x0f\x85\xb9\x1b\xa9\xc1\xe6\xfb\xa9\x6c\xa2\x8a\xd8\x4b\xfd\x1e\xc6\xf3\x54\x77\xcb\x7c\xd3\x27\x17\x52\xca\x82\xf0\x27\x8f\xd4\x46\x85\xd9\x87\x22\x8d\x58\x34\x5a\x9f\x29\x74\x3c\xb9\x00\x12\x3b\x68\x85\xfb\xb4\xb2\x41\xa6\x33\x46\x28\xbb\x42\x63\xb0\x5b\x92\x16\x83\x6e\x34\xca\x1f\xac\xc2\x5d\xbf\xcf\x85\xc4\x42\x0a\x2a\x75\x51\x4e\x2c\xd7\x97\x25\x55\x8a\x74\x5c\x83\x4d\xd6\x34\x72\x51\xd8\x5b\xdc\x51\x31\x2d\x0f\x85\x99\x12\x66\x35\xaa\x14\xa7\x1a\x88\xaf\xe0\x5d\x99\xa3\xde\xa2\x93\x87\x5e\xfc\x3c\x0f\x31\x2f\x36\x10\x8e\x3f\xed\x9c\xfe\xff\xb1\x73\xb2\x14\xbd\x53\x68\xbe\x5f\x0a\xdf\xce\xce\x0a\x21\x3e\x80\x70\x7d\x9e\x43\xc0\x94\x9f\x5e\xda\xd9\x91\xd4\x0b\xa1\x7a\x4d\xe6\x15\xf4\xae\x4a\x3b\xce\x35\xd1\x75\xb6\x28\x34\x67\x53\x75\x85\x23\xcc\x2a\x98\x7e\xb2\x7b\xf6\x70\x16\x12\x4b\xf7\x4d\x8a\x36\x87\xe6\xe9\xc9\x32\x29\xf4\xc6\x34\xd8\x8a\xd1\xe2\x94\xcb\x45\x79\x91\x8d\x59\xfe\x52\xa6\xa2\x89\xba\x03\xa2\x71\x4f\xe0\xad\x5f\x4f\xd6\xae\x45\xe1\x48\x83\x9e\x60\xdb\x71\xc0\x8e\x5d\x65\x74\x5e\x69\xee\x30\x21\xf5\x42\x73\x5f\x3e\x49\xad\x10\xea\xb9\x3f\xd6\x43\xe9\x54\x83\x48\x8f\x0e\xb6\xec\xdf\xf5\x79\xe0\x5e\xf6\x0f\xf0\x2e\x51\xd4\x65\xe9\xea\x73\x29\xf8\x8d\x17\xb6\xac\xc1\x28\x65\x62\xcd\xa4\x8a\xe5\x9e\x50\x3d\x9b\x8d\xc5\x1e\x78\x0b\x97\xcb\xcb\xe2\x7d\x3c\xc0\x6d\x61\x7a\x96\x94\x61\xc1\xbc\x0e\xc6\xe4\x75\x46\xa5\xe1\xed\x91\xe7\xe7\x85\xeb\x99\x9e\x4c\x5b\xc2\x97\x0f\xc3\xc6\xed\x0f\x51\x9d\x32\xff\x4b\x3c\xf4\x89\x47\x78\x01\x22\xcf\xe7\x5f\xd1\xe8\xd4\xcf\x55\x97\xf0\x4d\x4e\xf8\x25\xfa\x9e\x90\x30\xe0\x18\x75\x65\xee\xe2\x03\x5d\x16\xe9\x25\x35\x6c\x9b\xc8\x47\x2e\x8c\x19\x17\x0b\xf1\x62\x13\x34\xd6\x2c\x8b\x2f\x79\xa6\xf3\xdc\x80\xeb\xc7\xbf\x4f\xc2\xfc\x8d\x2d\x34\x7c\x41\x77\x27\xbe\x7f\x71\x43\x8e\xa9\x6a\x03\x79\x08\xed\x15\xdc\x7e\x83\x4f\x5a\x3f\xa5\x76\x1d\xc6\xf9\xf3\x78\x49\x2c\xec\xa7\x1f\x7e\xba\xca\xdb\x30\x07\x33\xc5\x0f\x9e\xc7\xb6\x6f\x2f\x2f\x97\x97\x67\xd5\x99\x12\xb3\xb9\x51\x1d\xd1\xe9\x23\x64\x2d\x62\x97\x47\x35\x76\x4d\x74\x03\x71\x24\x1f\x15\x0b\x2d\xdf\x77\x53\x4b\xa3\x76\xe6\xb9\x10\x9f\x42\x43\x36\xbd\x84\x0d\x65\xa6\x54\x64\x86\x8e\x30\x34\x61\x8a\xb1\xbf\x1d\x44\x3e\x18\xc9\x7c\x09\x7d\x89\x8a\x41\x46\x70\x0e\xf2\xf7\x42\x13\x6d\xfb\x5c\xb2\xa3\x53\x20\x4f\xcb\x6d\xe6\xdc\x82\xe1\x9c\xac\x1a\x62\xfe\x72\x9d\x81\x2f\xb4\x45\x4d\x34\xb2\x76\x3e\x1c\x49\xf8\x53\xfd\x77\xb2\xf6\x50\x07\x2e\x81\xaf\x02\x08\xba\x21\x94\x4f\xe8\x2f\x04\xf9\xbb\x20\x66\x7e\x79\x76\x05\x5f\xf9\x70\x85\x1b\x9e\xaf\xbb\x06\xe1\x8e\x73\xcc\x50\x1c\x14\xa7\xe1\x57\xc7\xa4\x5d\x07\x64\xad\xa2\x7f\x44\x6e\x8f\xd6\x7a\xa1\x7c\xea\xe1\x44\xbd\xa8\x52\xc5\xe3\x6f\x40\xbc\x6f\x0e\x11\x8c\xa7\x56\xc2\x21\xd3\x4f\xb0\x93\xe2\xc2\x5b\x73\x89\x17\x94\xe8\x69\xfa\x41\x95\xf4\x8a\xe4\x2c\x19\x48\x49\x3d\x16\x60\xc7\x86\xef\x55\x36\x67\x1c\xb9\xb0\x44\x77\x5d\x36\xc1\x59\xd0\x13\x15\xdb\x4e\x36\xc0\x5a\x54\xf5\x6a\xb0\xd9\x83\xc1\x41\x6f\xe3\x54\x2e\x94\x2d\x8b\x4d\x53\x9f\x83\xf4\x92\xc1\x67\xe2\xb9\x21\x8d\xfc\x68\x4d\x58\x0e\x83\x3b\xc9\x4b\xa7\x40\xfd\xbe\xfc\x81\xb6\x88\x98\x28\xc7\xe9\xc2\xe1\x2e\x9e\x92\xa6\x18\x65\x9c\xce\x00\x9f\x35\x7f\xc7\x9d\xbf\x90\xbe\x28\x0d\x52\x23\xce\xf0\xc6\x37\xe5\x6a\x0a\x72\x2a\xa2\x95\xe2\x23\x93\x90\x2b\x78\x57\x82\xf8\x13\x5f\x4f\xce\x53\x8a\x9f\xa7\xeb\x26\x53\xf3\x42\x29\x59\x20\xf9\x4a\x7a\xd8\x83\x43\x77\x94\x1a\x11\x8a\xdf\x47\xc9\x12\x4f\x70\x53\xb7\x36\x3c\x8a\xc8\xe7\x19\x4b\xb8\xe9\x7b\x58\x49\xa4\x7b\xba\xac\x66\x97\x04\x86\x51\x50\x93\xcb\xe9\xe8\xc6\xed\x67\xd3\x54\xc6\x44\xc4\xfd\x6c\x9e\x67\xe7\xd9\x80\x5e\xaf\x60\xb7\x16\x6e\xa2\x43\xf5\x38\xd9\x37\xed\x4e\x47\xdd\x99\xad\xf5\xd8\x86\x5c\x51\xe3\xd0\xd0\xad\x43\x18\x04\x61\x1a\xe9\xe8\x72\x50\x2c\xe4\xa8\x9e\x95\xa4\xe5\x53\x39\x35\xc8\x11\x98\x3d\x8f\x3d\x2f\x28\x7f\x02\x43\x1c\xff\x12\xcf\xbf\xbd\x9c\xfe\x96\x97\x45\x75\xf8\xb4\xca\x46\x63\x4c\x91\x6a\x08\xcb\x28\x04\x93\x44\xb1\x45\xa2\x9b\x52\x15\x33\xb7\xaa\x0e\x0a\x70\x38\x8c\xdd\xb5\xad\x67\xa5\x17\xf1\x03\x02\xe9\x9b\x5f\x9f\xb3\x30\x7f\x4b\xb8\x08\x7a\x2f\x56\x11\x6a\x3c\x3e\x1d\xf2\x4d\x50\x45\xf6\xb2\x85\x56\x6c\x44\x23\x7b\xe9\xf6\x31\x86\xe1\x63\x43\x36\x6f\xe0\x01\x1b\x3e\x6c\xb4\x45\x5b\xd3\xa9\xdb\xc0\x5a\x6f\x61\x40\xb7\xd6\x74\x39\x33\x7a\xbc\xf3\xe1\xba\x8d\xb3\xa6\xdb\xec\xeb\xc0\x81\xa8\x14\x8e\xf5\x52\xdd\x5f\xff\xf9\xcb\xe1\xa1\xd5\xe3\x77\xf3\xa2\xb0\x2e\xbc\x1b\x93\xcb\x69\xba\x55\x2c\x73\xc2\xdc\xa1\x3b\x1a\xa2\xb4\xf6\x77\x8e\x55\x38\xe3\xdb\x98\xb4\x79\xa8\xde\xc7\x77\xbf\x31\x52\x41\xce\xb3\x81\x0a\xeb\xfe\xaf\x71\xa2\x66\x90\x03\x77\xa2\xe4\xd3\x2d\xca\x57\x48\xbc\x08\xd5\x95\x42\xe5\x31\x64\x02\xa6\x22\x39\x01\xd4\xd9\x7d\xe4\x58\x95\x64\x32\x8f\xd5\x4a\xa6\xa0\xf4\xee\x03\xf5\x1b\x42\xc4\xe9\x63\x80\xff\xb6\x98\x2e\x0e\x09\x6e\x89\x55\x64\x18\x9b\xa4\x70\xcb\x7a\xe9\xe7\xa2\xc3\xf5\xff\x38\x7b\x9c\xfd\x37\x00\x00\xff\xff\x40\x35\x47\xd1\x63\x1d\x00\x00")

func contractsFlowtokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsFlowtokenCdc,
		"contracts/FlowToken.cdc",
	)
}

func contractsFlowtokenCdc() (*asset, error) {
	bytes, err := contractsFlowtokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/FlowToken.cdc", size: 7523, mode: os.FileMode(420), modTime: time.Unix(1590181872, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0xe2, 0xa7, 0xaa, 0xce, 0x11, 0xe, 0x8b, 0x54, 0x20, 0xee, 0x1d, 0xd2, 0x4d, 0xd, 0x49, 0x8f, 0xb4, 0x68, 0x44, 0x2f, 0x18, 0xec, 0xb6, 0x96, 0xed, 0xb0, 0x54, 0xad, 0x37, 0x4d, 0xdc}}
	return a, nil
}

var _contractsFungibletokenCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\xcf\x73\xdb\xba\x11\xbe\xf3\xaf\xd8\x49\x0e\x71\x52\xd9\x7a\x87\x4e\x0f\x9e\xc9\x6b\x93\x79\xf1\x4c\x2e\x4d\xa7\x75\xfb\xae\x82\xc8\xa5\x84\x1a\x04\xf8\x00\x50\x32\xf3\x26\xff\x7b\x67\x17\x3f\x08\x52\xb2\x2d\x4f\x9f\x2f\x96\x48\x60\xb1\xbb\xf8\xf6\xdb\x0f\xd0\xfa\xc3\x87\xaa\x7a\x0b\xf7\x7b\x84\x3b\x65\x8e\x70\x37\xe8\x9d\xdc\x2a\x84\x7b\xf3\x80\x1a\x9c\x17\xba\x11\xb6\xa9\xaa\xb7\x6f\x61\x93\x5e\xf2\xbb\x0d\xd4\x46\x7b\x2b\x6a\x0f\x52\x7b\xb4\xad\xa8\xb1\xaa\xc8\x50\xfe\x0a\x7e\x2f\x3c\x08\xa5\xa0\x4d\x66\x3d\x9b\x4d\x33\x1d\x1c\xcd\xa0\x1a\xd8\x8b\x03\xbd\xa2\xe7\xad\xb1\x1d\x78\x73\x53\x7d\x6d\x41\xc0\xe0\xd0\x3a\x38\x0a\xed\x1d\xbd\x6f\xb0\x57\x66\x04\x01\x1a\x8f\x0b\x53\x2b\xf0\x7b\x94\x36\x7f\xaf\x82\x65\x8d\xd8\xd0\x4c\xd9\xf5\x0a\x3b\xd4\x9e\x86\xc1\x2c\x90\xc9\xdf\x1b\xf6\xbf\x30\xb2\x70\xaf\x35\x8a\x72\x44\x01\x91\x15\x3b\x28\x74\x20\x74\x03\x5a\x74\x52\xef\x2a\x0e\xd7\xcf\x32\xe0\x7a\xac\x65\x2b\xd1\xdd\x84\x14\xfe\x47\x0c\xca\x6f\xc0\xa2\x33\x83\xa5\x84\x7d\x11\xf5\x1e\x44\x5d\x9b\x81\x7d\x13\x1e\xcc\x51\xbb\x10\x5c\x4a\x4f\x0a\x82\xfd\x10\xe4\x30\xed\x4b\x8d\x95\x69\x79\x39\x36\x9a\x6d\x82\xf3\xc6\x62\x03\x52\xc7\x94\x24\xeb\xf4\x5c\xec\x62\x94\xcb\x49\x7b\xe1\xa0\x43\xbf\x37\x8d\x83\x1c\x87\x39\x6a\xb4\x1c\xa1\xf1\x7b\xb4\x71\x3b\x6a\xa1\xa1\x16\x4a\xc5\x90\xfe\x61\xcd\x41\x36\x68\x37\x2b\xd8\xfc\x13\x6b\x94\x07\xfe\x4c\xb3\x36\x9f\x85\x22\x47\xa7\x80\xa7\xd4\x38\x76\xc3\x95\x4f\xa0\xc1\x5a\x09\x8b\xd0\x5b\xbc\xae\x8d\x6e\xa4\x97\x46\x87\x14\xf7\xc6\xf9\xf2\x19\xfb\x68\xd1\x79\x2b\x6b\x5f\x91\xb3\xf8\x88\xf5\x40\x2f\x21\xa6\xa5\x1d\x74\x1d\x06\x87\x54\x84\x90\x43\xf8\x23\xd0\x3a\x0e\x7b\x61\x85\x47\xd8\x62\x2d\x06\xf2\xc5\xc3\x4e\x1e\xd0\xf1\x70\x8a\x96\x3f\x88\xad\x54\xd2\x8f\xb4\x05\x6e\x2f\x2c\x56\x02\x2c\xb6\x68\x51\xd7\x8c\x8b\x90\xe6\x90\xd0\xb0\x85\x5a\x8d\x80\x8f\xbd\x71\xd1\x54\x2b\x51\x35\x6e\xf2\xa8\x92\x1a\x8c\x46\x30\x16\x3a\x63\x31\x79\x3c\xa5\xe2\xa6\xaa\xbe\x52\xe9\x38\x13\x1d\x0a\xa9\x5f\x78\xd3\x89\x07\x84\x7a\x70\xde\x74\x39\xc3\x31\x35\x19\xf0\x94\x9b\x79\x96\xa9\x90\x0c\x1c\x84\x95\x66\xa0\xd1\x52\xef\x1c\x1c\xa5\xdf\xb3\xf9\x80\xbc\x9b\xea\xce\x58\xc0\x47\x41\x66\x56\x20\xa0\x15\x43\x8d\x9e\xf7\x7e\x8b\x93\x75\x6c\x60\x3b\xa6\xba\xe5\x1a\xe0\x74\x40\x02\xc5\xac\xb8\x3e\x8f\x30\x38\xa9\x77\x85\xaf\xb4\xb5\x93\x6b\xab\x18\xa6\x69\x17\x25\x9a\x09\xa3\x22\x07\x1c\xea\x86\x67\xda\x00\xb7\x54\x2d\x3d\xa2\xbd\xf6\xe6\x9a\xfe\xaf\x38\x22\x33\x78\xaa\x1a\x5a\x93\x48\x80\x16\x62\x6e\xa0\x60\x05\xd4\x48\x56\x15\x28\x6c\x76\x68\xc1\x75\xc2\xfa\xbc\xd4\x0d\xdc\x9b\xb0\x52\xb4\xee\x0d\x08\x3d\xd5\xc1\xaa\x0a\xf4\x14\x6b\xd4\x51\x4a\x46\x5e\xb4\xb1\xe2\x58\xa4\x12\x5a\x6b\xba\x12\x23\x4c\x55\xa1\x84\x18\xb8\x0d\xf6\xc6\x49\x9f\xd1\x01\x46\xcf\x56\x7a\xe7\x12\xb6\x88\x21\x29\xf3\x1e\x83\x7d\x2b\xb4\x6b\xd1\xde\x54\xd5\x87\x75\x55\xad\xd7\xcc\xe3\x9d\x90\x7a\xc9\xe3\xc5\x2e\xac\xd7\xf0\x8d\x4d\x3f\xcd\xc9\x52\xa9\x19\x61\x4a\x57\x50\xfc\x7a\x5d\xf5\xc3\xf6\x0c\xf9\x2f\xb6\xec\xf7\xaa\x02\x00\x88\x4e\x79\xe3\x85\x02\x3d\x74\x5b\xb4\x8c\xf6\x90\x1a\xa9\x01\x1f\xa5\xf3\x54\x49\x37\x69\xfc\x57\x0f\xd2\xc1\xd0\xc7\xd2\x2a\xc0\x66\xe9\x11\x6a\x37\xd8\xd8\x5b\x82\x59\x37\xf4\xbd\x1a\xd3\x74\xe7\xc5\xe8\x88\xf4\x06\x2e\x6d\xc2\x49\xb0\xd5\x08\x8f\x3c\x88\xfc\x3f\x08\x1b\x66\xff\x8b\x27\xdf\xc2\xbf\xef\xe4\xe3\x5f\xfe\x9c\x9d\xfe\x72\xc0\x44\xc8\xd2\x01\x76\xd2\x13\xd6\x8f\xb4\x71\xe4\xd3\x14\xbe\x83\xda\xa2\xf0\xd8\x64\xd3\xc8\x53\x67\xd9\xf8\xaa\xa5\x97\x42\xc9\xef\xd8\x5c\xc9\xf0\x79\xbe\xee\xfb\x8b\x16\x0e\x49\x23\xe6\x4a\x38\xd3\x01\x5d\x22\x20\x64\xe1\xc2\xaf\x71\xd0\x95\xe8\xa8\x01\xa4\xb5\x56\x3c\xe7\x16\x3e\x35\x8d\x45\xe7\xfe\xfa\xda\xb5\x23\x5e\x43\x4f\x3a\xbf\xf2\x2f\x61\xc8\xc9\xc2\xde\x9c\x5b\x36\x91\x45\xfc\x9e\x71\x30\xd7\x11\x48\x1c\x53\x47\x42\xb5\xf8\xdb\x20\x2d\xa3\xc2\x41\x6b\x6c\x4e\x08\x71\x50\x9c\xbf\x28\xbf\x09\x47\x4c\x07\x63\x9f\x11\x97\x26\xfc\x8a\xd0\x18\xfd\x2e\x2f\x35\x5f\xc5\x68\xd8\x6c\x53\x3f\xdb\xa3\xc5\x55\x9a\x57\x74\x0f\x85\x82\xd8\xda\xf4\x11\x27\xbd\x71\x4e\x46\xc2\x36\x6d\x80\x0a\x2d\x1f\x49\xbb\x8f\x91\xbb\xec\x33\x45\x1a\x9c\xd0\x58\xa3\x73\xc2\x4a\x35\x46\x05\xc0\x14\x62\x8e\x1a\xa2\x1b\x33\xff\x29\xf9\xa7\x5d\x76\x22\xe2\x58\x8f\x71\x9d\x94\xae\xe2\x59\xf9\xfa\x2e\x51\x11\xfb\xe3\x86\x6d\xa4\x86\x65\x4a\x59\x20\x24\x7e\x2a\x0d\x04\x76\xf6\x83\x25\xcc\x2c\xb5\x46\xee\x35\x16\x3b\x73\xc0\x26\xf7\x9c\xf3\xce\xdc\x17\xbd\xfc\x1d\x57\x36\x3a\x07\x0a\x0f\xa8\x08\xa6\xfd\xb0\x55\xb2\x5e\xc1\x76\x48\x5c\xe5\x28\x7d\x82\x92\xbb\x55\xd8\x95\xa6\xd2\x4e\x71\x83\x9e\x14\x0e\x37\x15\x6f\x2c\x03\x83\xfd\xca\x79\x9c\x6b\xa8\xd2\x56\xcd\x4a\x8c\x6b\x59\x8d\xcc\xe6\x61\xf9\xe4\xea\x73\xe1\x84\x65\x3b\x31\xc2\xce\x0a\xed\xa3\xbc\x8a\x8b\xe4\x10\xa9\xb3\x26\xc0\x50\x38\xf2\x90\x18\x2c\xbb\xd0\x67\x35\x40\x1b\x15\x5a\x91\x60\x95\x1a\x95\x67\x3d\x93\x6e\x54\xb0\x6c\xbb\xb4\xc2\x38\x4d\x30\xc9\xa1\xfb\xbd\x35\xc3\x8e\xda\x64\xd6\x3a\x97\x45\x14\x44\x0b\x87\x45\x39\x79\x21\x28\xde\xbc\x4b\x63\x22\x7b\x67\xc3\x99\xc5\x50\x5a\x7b\x75\x38\x54\x46\xed\xa0\x73\x81\x2c\x28\xec\xfd\x2d\xfc\x2d\xa0\xf9\xf7\x3c\x85\xa7\x19\xb7\x7c\x14\x3d\xd8\x58\x74\x51\xf3\xb7\xd1\xe7\x00\x31\x2a\x0e\x38\x08\x35\xe0\xc9\xb4\x30\xe5\x26\x96\x39\x7c\xfc\x08\xd1\x8b\x93\x91\xf4\xf7\x26\xf1\xbc\x50\x71\x1c\x74\x83\xf3\xa4\xd3\x68\x25\x27\x3a\x04\x11\x52\x94\x2c\x46\xbd\x39\x75\x11\x8e\xe9\xcd\xcc\xfc\x8f\x6a\xfe\xe9\x47\xe6\xeb\xa4\xf2\xff\x1f\xbe\x8e\x4d\xe4\x94\xae\xa5\x5e\xb6\xfd\x17\xe9\x5a\xea\x5a\x0d\x0d\x92\xa2\x4b\x07\x84\xe0\x42\xbd\xc7\xfa\x61\x1e\x79\x64\x80\x64\xe3\x88\x7c\xba\xa4\x5d\x21\x9d\x7d\x89\xcc\x0e\xb1\x07\x99\x5d\x15\x5c\xd0\x98\x34\xe6\xbc\xa4\x5e\x81\x92\x0f\x74\x22\x54\x92\x4f\x57\x1d\xc9\x12\xa1\x9b\xac\x5b\x58\x6b\xd2\x73\xd2\x2a\xb2\x65\x94\x7a\xe8\x55\x38\x0f\xc0\x8b\x54\x9f\xb6\x65\x41\xf5\x31\xd3\x17\x31\x7d\x94\xf7\x44\x66\xa1\xbd\x27\x6d\x1a\x42\x28\x27\x9e\xdf\xa7\xa9\xde\xc6\x1e\x9f\xab\xaf\x68\xf8\x2a\x48\x91\x50\x53\xef\x97\x45\x65\xf1\x4c\x4d\xd1\x8c\x5c\x1a\x3f\xc7\xba\xbc\xfa\xe9\xfd\x13\xc5\x11\xa5\x48\x06\x40\x2a\x8d\x00\xbf\x03\x5e\x0a\xfa\x78\x94\x7d\x1e\xf3\x24\x0b\x85\xd4\x01\x41\x93\x5a\xe0\xe3\x1f\x94\xa7\xf5\x34\x9f\xfa\x64\x51\x28\xc4\x77\xa4\xb6\x34\x1e\xc3\xb8\x77\x41\x72\x45\x89\xb9\x2a\xa1\x9c\x4c\xb0\x3a\xcf\xf2\x12\x6a\x63\x2d\xd6\x5e\x8d\x97\x40\x26\x06\xb5\x40\xcc\x24\xd8\x17\x7c\x11\xb9\xfc\x9d\x5b\xe2\x21\x29\xea\x38\x7e\xae\xa6\xe9\x8f\x3c\xbc\x5a\xbc\x3d\xd9\xee\xf3\x1c\xea\x50\xb5\x25\x15\x26\x2b\xe7\xb7\xfb\xf3\x62\x9b\xcb\xd4\x24\xc0\x86\x47\xc9\xd0\xa5\x00\x28\xf7\xad\x3c\xda\x14\x2d\x66\x89\x80\xe9\x06\xc2\x9b\xa7\x4e\xad\x4b\x56\xbb\xe7\x13\x61\xad\x84\x15\xe9\x32\x83\x79\xad\xb6\x7c\xec\x1b\x7b\x56\x25\xe2\xdc\x01\xac\x43\xa1\xe7\xbc\x84\x07\xb4\xe3\xf2\x30\x98\x67\xce\x2f\x0a\xdc\xf2\xa4\x17\x6d\x70\x26\x1b\x6c\xa5\xc6\xd2\x93\xd0\x05\xcd\xf6\xbf\x18\x2d\x65\x2e\x0c\x97\x01\xb9\xd3\x5d\x76\x41\x54\xdc\x0b\x15\xa5\x11\x99\x9d\xb3\xe9\xf2\x35\x0a\xbd\x99\xae\x52\x9e\x42\x39\x3b\x78\x9b\x05\xf0\x2a\xf3\xe3\xaa\x80\xfd\x2b\x50\xff\x7a\xd0\x47\xa3\xd3\xed\x48\xd8\xbe\x98\xd0\x70\xd5\x35\x89\x48\xf9\x7d\x2e\x5d\xd2\xe5\xa9\x39\x3a\xd2\x7e\x14\x45\xd2\xa7\x0b\x04\x27\x47\x0f\x0b\x15\xfe\x7c\xf5\x9d\x3d\x0f\x14\x5a\x7f\x13\xb4\xc4\x66\x52\xfb\x6c\xdf\xe5\x55\x53\xef\x82\x24\xb5\x92\xdc\x3f\x94\xd0\xc8\x5d\x30\x59\xc6\x66\xc6\x60\xf0\xc7\xe8\xaf\xb3\xad\x62\x46\x1d\x3f\xbf\xa0\xa2\x3e\x05\xe9\x34\x69\xa2\x44\x21\x2a\x08\x4c\xa1\xc1\x58\xc0\xdf\x06\xa1\xc2\xb7\x33\x82\xea\x59\x19\x05\xcf\xea\x44\x3a\x96\x70\x9a\x48\xb7\x0b\x35\xdd\x06\x6d\xb6\xd8\x1a\x8b\x1b\xd6\x28\xe8\xe3\x4e\xa8\x21\x2f\xba\xe8\x33\xe7\x8c\xc7\xfb\xdc\x2d\xee\xa4\xd6\x84\xa2\xc5\x15\xe9\x74\x79\x7a\x66\xf6\xcb\x8c\xcc\x0e\x5e\x95\x8f\xdf\xc3\xf5\xf3\xd9\xfe\x7b\xea\x70\x27\x8d\x99\xaf\xc4\xa2\xfc\x99\x32\xdb\x5b\x3c\xf0\x7d\x65\x81\xbe\xd7\x69\xd8\x33\x9a\x08\xbc\x78\xc0\x13\xc4\x0a\x7a\xd2\x0b\x2b\x3a\xf4\xf1\xfa\x5b\x34\xcd\x5c\xfc\x14\x65\x10\x69\x6e\x81\x84\x78\x09\xff\x64\x49\xbe\x4a\x07\x5d\xd8\x18\xcf\x6d\xc3\x9f\xd2\xe3\x52\x36\x3d\xa5\x95\x9e\xdf\x14\x37\x74\x2f\xee\xc6\x74\x37\xf4\xaa\x13\x45\xd0\x37\x5f\xba\xde\x8f\xe7\xda\xec\x27\x3d\x86\xbb\xd6\xf4\xd3\xc3\xfc\xa4\xcd\x17\xa3\x6c\x21\xfe\x34\x54\xf6\xa6\xd9\xcd\xca\x5e\x4c\x2e\x7f\xfc\x08\x3f\x2d\x9b\x07\xed\xc8\xd2\x97\xab\xcc\x39\x33\x62\xff\xf6\xcb\xb7\x5b\xb0\x78\x8d\x5a\xf0\x25\x2a\x39\xc4\x1b\x95\xcf\x20\xe5\xf0\xc5\x16\xae\xd7\xfc\xef\xf4\x9c\x37\xa9\x59\x78\x43\xbd\x43\xe3\x51\x8d\x49\xfe\xc5\xb8\x78\x4f\xf8\xb7\xa0\xef\x68\xcd\xa9\x8c\x59\xaf\xe1\x47\xf5\xa3\xfa\x5f\x00\x00\x00\xff\xff\x47\xe5\x95\x87\xdb\x1b\x00\x00")

func contractsFungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsFungibletokenCdc,
		"contracts/FungibleToken.cdc",
	)
}

func contractsFungibletokenCdc() (*asset, error) {
	bytes, err := contractsFungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/FungibleToken.cdc", size: 7131, mode: os.FileMode(420), modTime: time.Unix(1590123319, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0xa1, 0x6b, 0xec, 0x14, 0xb8, 0xbe, 0xf8, 0x10, 0xf3, 0x60, 0xfc, 0xd8, 0xd5, 0x44, 0xc9, 0xf6, 0xe4, 0xec, 0x18, 0x29, 0x87, 0xfb, 0x84, 0xf6, 0xdf, 0xee, 0xdf, 0x96, 0x32, 0x70, 0xd9}}
	return a, nil
}

var _contractsServiceaccountCdc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\x4c\x02\x0d\x12\x24\xb2\x0b\xa5\x07\x91\x0f\x52\xb7\x3e\x97\xd4\xe9\xb5\xac\x56\x23\x6b\xc9\x7a\x57\xac\x46\xfe\xc0\xf8\xbf\x97\x95\x56\xb2\xd6\x1f\x35\x2d\x2d\x34\x27\x25\xf3\xde\xcc\xbc\xb7\x33\x13\xb1\x28\xb5\x21\x98\xd6\x6a\x2e\x52\x89\x33\xfd\x86\x0a\x72\xa3\x17\x30\x5e\xbf\xab\x82\x2e\x2c\xf5\xea\x5c\x08\x71\xa2\x15\x19\xc6\x69\x10\x0c\xca\x3a\x05\xde\xfd\xfd\x1b\x9a\xa5\xe0\xf8\xcc\xb9\xae\x15\xc1\x36\x08\x00\x00\x2c\x44\x22\x01\x19\xa6\x2a\xc6\x49\x68\x35\x45\x4c\xe0\x75\x2a\xd6\x1f\x3f\x78\x10\xd6\x32\x27\x06\xd9\x21\xac\xc7\xe5\xb5\x82\x0c\xb3\x9a\xd3\xcc\x4b\x18\xfe\xb0\x74\x4a\xe0\xb9\xa6\xc2\xb5\x10\xc1\xb6\xe1\xd9\x9f\xa6\x05\xab\xed\x3b\xab\x25\xc1\x03\x54\x28\xf3\x38\xc3\xdc\xfe\x3a\xeb\x03\xa1\x4d\x12\x79\xac\x1c\xb1\xe5\xdc\xdf\x0d\x32\xc4\x2b\x41\x45\x66\xd8\x2a\x64\x0b\x5b\x2b\x69\x13\xfa\x2a\xa3\xa0\xcf\x34\x30\x30\xce\xb0\xd4\x95\xa0\xd0\x1a\x99\xd8\xb4\x5d\x89\xb6\xf0\xee\x94\xda\xe7\x23\x6f\xfe\x13\xc5\xc7\x8f\xf6\x57\x54\x0b\x25\xe8\xf3\xa0\xd7\x4b\x6a\x47\x23\x68\x5a\x40\x60\xa0\x70\x35\x98\xe5\x56\x0a\x53\x19\x94\x35\x81\x20\x10\x0a\x2a\xd2\x86\xcd\xb1\x67\xdb\xd4\x71\xc5\x96\x18\xde\xdf\xf5\xcc\x98\x37\x09\xbf\x2c\x4a\xda\xb4\x56\x45\xb7\x40\x3a\x81\x91\xa3\x8f\xf2\x0e\xea\x74\x9c\xec\xa6\xac\x53\x29\x38\x70\x56\xb2\x54\x48\x41\x1b\x20\x0d\x54\xa0\x6b\x8c\x0a\x46\xa0\x95\xdc\x00\xae\x4b\x5d\x61\x35\x4c\x62\x61\xce\x37\xeb\x4a\x33\x57\x40\x85\xd1\xf5\xbc\x68\x82\x2f\xc8\x51\x2c\xd1\x80\x50\x84\x26\x67\xfc\x40\x93\x14\xea\xed\xfe\x66\xeb\x2d\x7e\xdc\x91\x76\x8f\x61\x8f\x6e\x0a\xb6\xad\xee\x65\x75\xc0\x5b\x0f\x46\xcc\xcc\x91\xce\xda\xd0\x63\xff\x91\x1f\x29\x93\x4c\x71\x84\x5c\xa0\xcc\x3c\x33\x3e\xb9\xc8\xef\x78\xe1\x38\x17\xad\x70\xb8\x3f\x75\xe2\xe4\x5e\xef\xa7\xdb\x65\xef\x87\xfc\x6b\x53\xbd\x1b\xf3\xee\x0a\x1e\x2c\xb7\x33\xe2\x05\x73\x78\x68\x78\x5e\x6f\xf1\x1c\x69\xd2\x7b\x1c\x9e\x13\x14\x5d\xf9\xac\x54\x1b\xa3\x57\xbf\xb0\x29\xba\xda\x3f\xab\x41\xaa\x8d\x1a\x34\x12\xbb\xcf\x4b\x7a\xdb\x75\x3a\xb5\xd2\x09\xdc\xec\x17\xb0\x9d\x88\xed\x61\xbd\xe6\x35\xbb\x46\x0f\xd0\x8f\xee\xbe\x9c\xdb\x51\x78\x7a\x82\x92\x29\xc1\xc3\xeb\x57\xc5\x52\x89\x76\xfa\xda\x5c\x60\x30\x47\x83\x76\x82\xdc\x44\xba\x96\xdb\x23\x08\x4b\xfb\x7d\xed\xbd\xa5\xbd\x52\xe1\xf0\x0c\x9d\xf8\x27\x00\x0f\x30\x8e\xc7\xe3\xf7\x3e\xe6\xf8\x6c\x7a\xb8\x5d\xb0\x0b\x7e\x06\x00\x00\xff\xff\x56\x24\xdf\xe5\xb5\x07\x00\x00")

func contractsServiceaccountCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsServiceaccountCdc,
		"contracts/ServiceAccount.cdc",
	)
}

func contractsServiceaccountCdc() (*asset, error) {
	bytes, err := contractsServiceaccountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/ServiceAccount.cdc", size: 1973, mode: os.FileMode(420), modTime: time.Unix(1590112880, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0x94, 0xa4, 0x32, 0xb, 0xce, 0xcb, 0x4f, 0x94, 0xec, 0x20, 0xa6, 0x43, 0x95, 0xe3, 0xaf, 0x41, 0xf1, 0x4f, 0x13, 0x4c, 0x3e, 0x5d, 0x35, 0xb1, 0xf1, 0xd4, 0x93, 0x19, 0x28, 0x21, 0x49}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/FeeContract.cdc": contractsFeecontractCdc,

	"contracts/FlowToken.cdc": contractsFlowtokenCdc,

	"contracts/FungibleToken.cdc": contractsFungibletokenCdc,

	"contracts/ServiceAccount.cdc": contractsServiceaccountCdc,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": &bintree{nil, map[string]*bintree{
		"FeeContract.cdc":    &bintree{contractsFeecontractCdc, map[string]*bintree{}},
		"FlowToken.cdc":      &bintree{contractsFlowtokenCdc, map[string]*bintree{}},
		"FungibleToken.cdc":  &bintree{contractsFungibletokenCdc, map[string]*bintree{}},
		"ServiceAccount.cdc": &bintree{contractsServiceaccountCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
