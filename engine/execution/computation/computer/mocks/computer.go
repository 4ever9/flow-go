// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dapperlabs/flow-go/engine/execution/computation/computer (interfaces: BlockComputer)

// Package mocks is a generated GoMock package.
package mocks

import (
	execution "github.com/dapperlabs/flow-go/engine/execution"
	state "github.com/dapperlabs/flow-go/engine/execution/state"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBlockComputer is a mock of BlockComputer interface
type MockBlockComputer struct {
	ctrl     *gomock.Controller
	recorder *MockBlockComputerMockRecorder
}

// MockBlockComputerMockRecorder is the mock recorder for MockBlockComputer
type MockBlockComputerMockRecorder struct {
	mock *MockBlockComputer
}

// NewMockBlockComputer creates a new mock instance
func NewMockBlockComputer(ctrl *gomock.Controller) *MockBlockComputer {
	mock := &MockBlockComputer{ctrl: ctrl}
	mock.recorder = &MockBlockComputerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockComputer) EXPECT() *MockBlockComputerMockRecorder {
	return m.recorder
}

// ExecuteBlock mocks base method
func (m *MockBlockComputer) ExecuteBlock(arg0 *execution.CompleteBlock, arg1 *state.View, arg2 []byte) (*execution.ComputationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(*execution.ComputationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteBlock indicates an expected call of ExecuteBlock
func (mr *MockBlockComputerMockRecorder) ExecuteBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBlock", reflect.TypeOf((*MockBlockComputer)(nil).ExecuteBlock), arg0, arg1, arg2)
}
