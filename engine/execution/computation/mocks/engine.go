// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dapperlabs/flow-go/engine/execution/computation (interfaces: ComputationEngine)

// Package mocks is a generated GoMock package.
package mocks

import (
	state "github.com/dapperlabs/flow-go/engine/execution/state"
	flow "github.com/dapperlabs/flow-go/model/flow"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockComputationEngine is a mock of ComputationEngine interface
type MockComputationEngine struct {
	ctrl     *gomock.Controller
	recorder *MockComputationEngineMockRecorder
}

// MockComputationEngineMockRecorder is the mock recorder for MockComputationEngine
type MockComputationEngineMockRecorder struct {
	mock *MockComputationEngine
}

// NewMockComputationEngine creates a new mock instance
func NewMockComputationEngine(ctrl *gomock.Controller) *MockComputationEngine {
	mock := &MockComputationEngine{ctrl: ctrl}
	mock.recorder = &MockComputationEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComputationEngine) EXPECT() *MockComputationEngineMockRecorder {
	return m.recorder
}

// ExecuteScript mocks base method
func (m *MockComputationEngine) ExecuteScript(arg0 []byte, arg1 *flow.Header, arg2 *state.View) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteScript", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScript indicates an expected call of ExecuteScript
func (mr *MockComputationEngineMockRecorder) ExecuteScript(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScript", reflect.TypeOf((*MockComputationEngine)(nil).ExecuteScript), arg0, arg1, arg2)
}

// Process mocks base method
func (m *MockComputationEngine) Process(arg0 flow.Identifier, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process
func (mr *MockComputationEngineMockRecorder) Process(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockComputationEngine)(nil).Process), arg0, arg1)
}

// ProcessLocal mocks base method
func (m *MockComputationEngine) ProcessLocal(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessLocal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessLocal indicates an expected call of ProcessLocal
func (mr *MockComputationEngineMockRecorder) ProcessLocal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLocal", reflect.TypeOf((*MockComputationEngine)(nil).ProcessLocal), arg0)
}

// Submit mocks base method
func (m *MockComputationEngine) Submit(arg0 flow.Identifier, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Submit", arg0, arg1)
}

// Submit indicates an expected call of Submit
func (mr *MockComputationEngineMockRecorder) Submit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockComputationEngine)(nil).Submit), arg0, arg1)
}

// SubmitLocal mocks base method
func (m *MockComputationEngine) SubmitLocal(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubmitLocal", arg0)
}

// SubmitLocal indicates an expected call of SubmitLocal
func (mr *MockComputationEngineMockRecorder) SubmitLocal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitLocal", reflect.TypeOf((*MockComputationEngine)(nil).SubmitLocal), arg0)
}
