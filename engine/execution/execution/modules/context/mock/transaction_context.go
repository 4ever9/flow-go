// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import ast "github.com/dapperlabs/flow-go/language/runtime/ast"

import interpreter "github.com/dapperlabs/flow-go/language/runtime/interpreter"
import mock "github.com/stretchr/testify/mock"
import runtime "github.com/dapperlabs/flow-go/language/runtime"

// TransactionContext is an autogenerated mock type for the TransactionContext type
type TransactionContext struct {
	mock.Mock
}

// AddAccountKey provides a mock function with given fields: address, publicKey
func (_m *TransactionContext) AddAccountKey(address interpreter.AddressValue, publicKey []byte) error {
	ret := _m.Called(address, publicKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(interpreter.AddressValue, []byte) error); ok {
		r0 = rf(address, publicKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckCode provides a mock function with given fields: address, code
func (_m *TransactionContext) CheckCode(address interpreter.AddressValue, code []byte) error {
	ret := _m.Called(address, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(interpreter.AddressValue, []byte) error); ok {
		r0 = rf(address, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccount provides a mock function with given fields: publicKeys
func (_m *TransactionContext) CreateAccount(publicKeys [][]byte) (interpreter.AddressValue, error) {
	ret := _m.Called(publicKeys)

	var r0 interpreter.AddressValue
	if rf, ok := ret.Get(0).(func([][]byte) interpreter.AddressValue); ok {
		r0 = rf(publicKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interpreter.AddressValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([][]byte) error); ok {
		r1 = rf(publicKeys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmitEvent provides a mock function with given fields: _a0
func (_m *TransactionContext) EmitEvent(_a0 runtime.Event) {
	_m.Called(_a0)
}

// GetSigningAccounts provides a mock function with given fields:
func (_m *TransactionContext) GetSigningAccounts() []interpreter.AddressValue {
	ret := _m.Called()

	var r0 []interpreter.AddressValue
	if rf, ok := ret.Get(0).(func() []interpreter.AddressValue); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interpreter.AddressValue)
		}
	}

	return r0
}

// GetValue provides a mock function with given fields: owner, controller, key
func (_m *TransactionContext) GetValue(owner []byte, controller []byte, key []byte) ([]byte, error) {
	ret := _m.Called(owner, controller, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, []byte, []byte) []byte); ok {
		r0 = rf(owner, controller, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, []byte, []byte) error); ok {
		r1 = rf(owner, controller, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Log provides a mock function with given fields: _a0
func (_m *TransactionContext) Log(_a0 string) {
	_m.Called(_a0)
}

// RemoveAccountKey provides a mock function with given fields: address, index
func (_m *TransactionContext) RemoveAccountKey(address interpreter.AddressValue, index int) ([]byte, error) {
	ret := _m.Called(address, index)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(interpreter.AddressValue, int) []byte); ok {
		r0 = rf(address, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interpreter.AddressValue, int) error); ok {
		r1 = rf(address, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveImport provides a mock function with given fields: _a0
func (_m *TransactionContext) ResolveImport(_a0 ast.Location) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(ast.Location) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ast.Location) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetValue provides a mock function with given fields: owner, controller, key, value
func (_m *TransactionContext) SetValue(owner []byte, controller []byte, key []byte, value []byte) error {
	ret := _m.Called(owner, controller, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte, []byte, []byte) error); ok {
		r0 = rf(owner, controller, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountCode provides a mock function with given fields: address, code, checkPermission
func (_m *TransactionContext) UpdateAccountCode(address interpreter.AddressValue, code []byte, checkPermission bool) error {
	ret := _m.Called(address, code, checkPermission)

	var r0 error
	if rf, ok := ret.Get(0).(func(interpreter.AddressValue, []byte, bool) error); ok {
		r0 = rf(address, code, checkPermission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
