// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dapperlabs/flow-go/engine/execution/execution (interfaces: ExecutionEngine)

// Package mocks is a generated GoMock package.
package mocks

import (
	state "github.com/dapperlabs/flow-go/engine/execution/execution/state"
	flow "github.com/dapperlabs/flow-go/model/flow"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExecutionEngine is a mock of ExecutionEngine interface
type MockExecutionEngine struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionEngineMockRecorder
}

// MockExecutionEngineMockRecorder is the mock recorder for MockExecutionEngine
type MockExecutionEngineMockRecorder struct {
	mock *MockExecutionEngine
}

// NewMockExecutionEngine creates a new mock instance
func NewMockExecutionEngine(ctrl *gomock.Controller) *MockExecutionEngine {
	mock := &MockExecutionEngine{ctrl: ctrl}
	mock.recorder = &MockExecutionEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutionEngine) EXPECT() *MockExecutionEngineMockRecorder {
	return m.recorder
}

// ExecuteScript mocks base method
func (m *MockExecutionEngine) ExecuteScript(arg0 []byte, arg1 *flow.Header, arg2 *state.View) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteScript", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScript indicates an expected call of ExecuteScript
func (mr *MockExecutionEngineMockRecorder) ExecuteScript(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScript", reflect.TypeOf((*MockExecutionEngine)(nil).ExecuteScript), arg0, arg1, arg2)
}

// Process mocks base method
func (m *MockExecutionEngine) Process(arg0 flow.Identifier, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process
func (mr *MockExecutionEngineMockRecorder) Process(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockExecutionEngine)(nil).Process), arg0, arg1)
}

// ProcessLocal mocks base method
func (m *MockExecutionEngine) ProcessLocal(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessLocal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessLocal indicates an expected call of ProcessLocal
func (mr *MockExecutionEngineMockRecorder) ProcessLocal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLocal", reflect.TypeOf((*MockExecutionEngine)(nil).ProcessLocal), arg0)
}

// Submit mocks base method
func (m *MockExecutionEngine) Submit(arg0 flow.Identifier, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Submit", arg0, arg1)
}

// Submit indicates an expected call of Submit
func (mr *MockExecutionEngineMockRecorder) Submit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockExecutionEngine)(nil).Submit), arg0, arg1)
}

// SubmitLocal mocks base method
func (m *MockExecutionEngine) SubmitLocal(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubmitLocal", arg0)
}

// SubmitLocal indicates an expected call of SubmitLocal
func (mr *MockExecutionEngineMockRecorder) SubmitLocal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitLocal", reflect.TypeOf((*MockExecutionEngine)(nil).SubmitLocal), arg0)
}
