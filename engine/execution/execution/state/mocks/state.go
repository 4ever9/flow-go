// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dapperlabs/flow-go/engine/execution/execution/state (interfaces: ExecutionState)

// Package mocks is a generated GoMock package.
package mocks

import (
	state "github.com/dapperlabs/flow-go/engine/execution/execution/state"
	flow "github.com/dapperlabs/flow-go/model/flow"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExecutionState is a mock of ExecutionState interface
type MockExecutionState struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionStateMockRecorder
}

// MockExecutionStateMockRecorder is the mock recorder for MockExecutionState
type MockExecutionStateMockRecorder struct {
	mock *MockExecutionState
}

// NewMockExecutionState creates a new mock instance
func NewMockExecutionState(ctrl *gomock.Controller) *MockExecutionState {
	mock := &MockExecutionState{ctrl: ctrl}
	mock.recorder = &MockExecutionStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutionState) EXPECT() *MockExecutionStateMockRecorder {
	return m.recorder
}

// ChunkHeaderByChunkID mocks base method
func (m *MockExecutionState) ChunkHeaderByChunkID(arg0 flow.Identifier) (*flow.ChunkHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChunkHeaderByChunkID", arg0)
	ret0, _ := ret[0].(*flow.ChunkHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChunkHeaderByChunkID indicates an expected call of ChunkHeaderByChunkID
func (mr *MockExecutionStateMockRecorder) ChunkHeaderByChunkID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChunkHeaderByChunkID", reflect.TypeOf((*MockExecutionState)(nil).ChunkHeaderByChunkID), arg0)
}

// CommitDelta mocks base method
func (m *MockExecutionState) CommitDelta(arg0 state.Delta) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitDelta", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitDelta indicates an expected call of CommitDelta
func (mr *MockExecutionStateMockRecorder) CommitDelta(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitDelta", reflect.TypeOf((*MockExecutionState)(nil).CommitDelta), arg0)
}

// GetChunkRegisters mocks base method
func (m *MockExecutionState) GetChunkRegisters(arg0 flow.Identifier) (flow.Ledger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChunkRegisters", arg0)
	ret0, _ := ret[0].(flow.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChunkRegisters indicates an expected call of GetChunkRegisters
func (mr *MockExecutionStateMockRecorder) GetChunkRegisters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunkRegisters", reflect.TypeOf((*MockExecutionState)(nil).GetChunkRegisters), arg0)
}

// GetRegisters mocks base method
func (m *MockExecutionState) GetRegisters(arg0 []byte, arg1 [][]byte) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisters", arg0, arg1)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisters indicates an expected call of GetRegisters
func (mr *MockExecutionStateMockRecorder) GetRegisters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisters", reflect.TypeOf((*MockExecutionState)(nil).GetRegisters), arg0, arg1)
}

// NewView mocks base method
func (m *MockExecutionState) NewView(arg0 []byte) *state.View {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewView", arg0)
	ret0, _ := ret[0].(*state.View)
	return ret0
}

// NewView indicates an expected call of NewView
func (mr *MockExecutionStateMockRecorder) NewView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewView", reflect.TypeOf((*MockExecutionState)(nil).NewView), arg0)
}

// PersistChunkHeader mocks base method
func (m *MockExecutionState) PersistChunkHeader(arg0 *flow.ChunkHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistChunkHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistChunkHeader indicates an expected call of PersistChunkHeader
func (mr *MockExecutionStateMockRecorder) PersistChunkHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistChunkHeader", reflect.TypeOf((*MockExecutionState)(nil).PersistChunkHeader), arg0)
}

// PersistStateCommitment mocks base method
func (m *MockExecutionState) PersistStateCommitment(arg0 flow.Identifier, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistStateCommitment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistStateCommitment indicates an expected call of PersistStateCommitment
func (mr *MockExecutionStateMockRecorder) PersistStateCommitment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistStateCommitment", reflect.TypeOf((*MockExecutionState)(nil).PersistStateCommitment), arg0, arg1)
}

// StateCommitmentByBlockID mocks base method
func (m *MockExecutionState) StateCommitmentByBlockID(arg0 flow.Identifier) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateCommitmentByBlockID", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateCommitmentByBlockID indicates an expected call of StateCommitmentByBlockID
func (mr *MockExecutionStateMockRecorder) StateCommitmentByBlockID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateCommitmentByBlockID", reflect.TypeOf((*MockExecutionState)(nil).StateCommitmentByBlockID), arg0)
}
