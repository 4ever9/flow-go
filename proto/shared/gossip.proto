syntax = "proto3";

import "shared/messages.proto";

package bamboo.shared.gossip;

option go_package = "shared";

// Message models a single message that is supposed to get exchanged by the gossip network
message GossipMessage {
  oneof Payload {                   // The payload of the message, i.e., the data to be exchanged
    bamboo.shared.messages.SignedCollectionHash signedCollectionHash = 1;
    bamboo.shared.messages.Collection collection = 2;
    bamboo.shared.messages.Block block = 3;
    bamboo.shared.messages.BlockSeal blockSeal = 4;
    bamboo.shared.messages.IntermediateRegisters intermediateRegisters = 5;
    bamboo.shared.messages.ExecutionReceipt executionReceipt = 6;
    bamboo.shared.messages.ResultApproval resultApproval = 7;
    bamboo.shared.messages.Transaction transaction = 8;
    bamboo.shared.messages.SignedTransaction signedTransaction = 9;
    bamboo.shared.messages.Register register = 10;
    bamboo.shared.messages.TransactionRegister transactionRegister = 11;
    bamboo.shared.messages.Inventory inventory = 12;
    bamboo.shared.messages.InvalidExecutionReceiptChallenge invalidExecutionReceiptChallenge = 13;
    bamboo.shared.messages.StateTransition stateTransition = 14;
    bamboo.shared.messages.SignedStateTransition signedStateTransition = 15;
    bamboo.shared.messages.FinalizedStateTransition finalizedStateTransition = 16;
    bamboo.shared.messages.Vote vote = 17;
    bamboo.shared.messages.StateTransitionVote stateTransitionVote = 18;
    MessageRequest messageRequest = 19;
    MessageReply messageReply = 20;
  }
  string Method = 21;                // Name of RPC method to be invoked on the message
  repeated string Recipients = 22;   // Address of the recipients to which the message should be delivered
  string Sender = 23;                // Address of the sender of this message
  repeated string Path = 24;         // Address of the nodes that this message visited so far
  uint64 TTL = 25;                   // The time to live of the message, i.e., maximum number of hops it should be gossiped
}

////////////////////////////////////////////////////////////////////////////
// 2 testing messages + rpc service to be deleted later

service Messages {
  rpc SendMessage (GossipMessage) returns (MessageReply) {}
}

message MessageRequest {
  string Text = 1;
}

message MessageReply {
  string TextResponse = 1;
}

////////////////////////////////////////////////////////////////////////////
