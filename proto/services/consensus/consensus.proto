syntax = "proto3";

package bamboo.services.consensus;

option go_package = "consensus";

import "shared/messages.proto";
import "google/protobuf/empty.proto";


service ConsensusService {
  // Receive a signed collection from an access node.
  rpc SubmitCollection (SubmitCollectionRequest) returns (google.protobuf.Empty);

  // Notify the security node that another has proposed a block.
  rpc ProposeBlock (ProposeBlockRequest) returns (ProposeBlockResponse);
  
  // Update a block proposal to add new signatures.
  rpc UpdateProposedBlock (UpdateProposedBlockRequest) returns (UpdateProposedBlockResponse);

  // Returns a block by hash
  rpc GetBlockByHash (GetBlockByHashRequest) returns (GetBlockResponse);

  // Returns a block by height
  rpc GetBlockByHeight (GetBlockByHeightRequest) returns (GetBlockResponse);

  // Returns the finalized state transitions at the requested heights.
  rpc GetFinalizedStateTransitions(GetFinalizedStateTransitionsRequest) returns (GetFinalizedStateTransitionsResponse);

  // Process state transition proposal from other security node.
  rpc ProcessStateTransitionProposal(bamboo.shared.SignedStateTransition) returns (google.protobuf.Empty);

  // Process state transition prepare vote from other security node.
  rpc ProcessStateTransitionPrepareVote(ProcessSignedStateTransitionPrepareVoteRequest) returns (google.protobuf.Empty);

  // Process state transition commit vote from other security node.
  rpc ProcessStateTransitionCommitVote(ProcessSignedStateTransitionCommitVoteRequest) returns (google.protobuf.Empty);
}


message SubmitCollectionRequest {
  bamboo.shared.Collection collection = 1;
  repeated bytes accessSignatures = 2;
}

message ProposeBlockRequest {}

message ProposeBlockResponse {}

message UpdateProposedBlockRequest {}

message UpdateProposedBlockResponse {}

message GetBlockByHashRequest {
  bytes blockHash = 1;
}

message GetBlockByHeightRequest {
  uint64 blockHeight = 1;
}

message GetBlockResponse {
  bamboo.shared.Block block = 1;
}

message GetFinalizedStateTransitionsRequest {
  repeated uint64 stateTransitionHeights = 1;
}

message GetFinalizedStateTransitionsResponse {
  repeated bamboo.shared.FinalizedStateTransition finalizedStateTransitions = 1;
}

message ProcessSignedStateTransitionPrepareVoteRequest {
  bamboo.shared.StateTransitionVote stateTransitionVote = 1;
  bytes signature = 2;
}

message ProcessSignedStateTransitionCommitVoteRequest {
  bamboo.shared.StateTransitionVote stateTransitionVote = 1;
  bytes signature = 2;
}
