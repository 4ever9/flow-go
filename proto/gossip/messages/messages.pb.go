// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gossip/messages/messages.proto

package messages

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Message models a single message that is supposed to get exchanged by the gossip network
type GossipMessage struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	MessageType          uint64   `protobuf:"varint,2,opt,name=messageType,proto3" json:"messageType,omitempty"`
	Recipients           []string `protobuf:"bytes,3,rep,name=Recipients,proto3" json:"Recipients,omitempty"`
	Sender               string   `protobuf:"bytes,4,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Path                 []string `protobuf:"bytes,5,rep,name=Path,proto3" json:"Path,omitempty"`
	TTL                  uint64   `protobuf:"varint,6,opt,name=TTL,proto3" json:"TTL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GossipMessage) Reset()         { *m = GossipMessage{} }
func (m *GossipMessage) String() string { return proto.CompactTextString(m) }
func (*GossipMessage) ProtoMessage()    {}
func (*GossipMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f1c3d59bb108c3, []int{0}
}

func (m *GossipMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GossipMessage.Unmarshal(m, b)
}
func (m *GossipMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GossipMessage.Marshal(b, m, deterministic)
}
func (m *GossipMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GossipMessage.Merge(m, src)
}
func (m *GossipMessage) XXX_Size() int {
	return xxx_messageInfo_GossipMessage.Size(m)
}
func (m *GossipMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GossipMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GossipMessage proto.InternalMessageInfo

func (m *GossipMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GossipMessage) GetMessageType() uint64 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *GossipMessage) GetRecipients() []string {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *GossipMessage) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *GossipMessage) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *GossipMessage) GetTTL() uint64 {
	if m != nil {
		return m.TTL
	}
	return 0
}

type Socket struct {
	Ip                   []byte   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Socket) Reset()         { *m = Socket{} }
func (m *Socket) String() string { return proto.CompactTextString(m) }
func (*Socket) ProtoMessage()    {}
func (*Socket) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f1c3d59bb108c3, []int{1}
}

func (m *Socket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Socket.Unmarshal(m, b)
}
func (m *Socket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Socket.Marshal(b, m, deterministic)
}
func (m *Socket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Socket.Merge(m, src)
}
func (m *Socket) XXX_Size() int {
	return xxx_messageInfo_Socket.Size(m)
}
func (m *Socket) XXX_DiscardUnknown() {
	xxx_messageInfo_Socket.DiscardUnknown(m)
}

var xxx_messageInfo_Socket proto.InternalMessageInfo

func (m *Socket) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *Socket) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type HashMessage struct {
	HashBytes            []byte   `protobuf:"bytes,1,opt,name=hashBytes,proto3" json:"hashBytes,omitempty"`
	SenderSocket         *Socket  `protobuf:"bytes,2,opt,name=senderSocket,proto3" json:"senderSocket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HashMessage) Reset()         { *m = HashMessage{} }
func (m *HashMessage) String() string { return proto.CompactTextString(m) }
func (*HashMessage) ProtoMessage()    {}
func (*HashMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f1c3d59bb108c3, []int{2}
}

func (m *HashMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HashMessage.Unmarshal(m, b)
}
func (m *HashMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HashMessage.Marshal(b, m, deterministic)
}
func (m *HashMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashMessage.Merge(m, src)
}
func (m *HashMessage) XXX_Size() int {
	return xxx_messageInfo_HashMessage.Size(m)
}
func (m *HashMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HashMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HashMessage proto.InternalMessageInfo

func (m *HashMessage) GetHashBytes() []byte {
	if m != nil {
		return m.HashBytes
	}
	return nil
}

func (m *HashMessage) GetSenderSocket() *Socket {
	if m != nil {
		return m.SenderSocket
	}
	return nil
}

type GossipReply struct {
	ResponseByte         []byte   `protobuf:"bytes,1,opt,name=responseByte,proto3" json:"responseByte,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GossipReply) Reset()         { *m = GossipReply{} }
func (m *GossipReply) String() string { return proto.CompactTextString(m) }
func (*GossipReply) ProtoMessage()    {}
func (*GossipReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f1c3d59bb108c3, []int{3}
}

func (m *GossipReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GossipReply.Unmarshal(m, b)
}
func (m *GossipReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GossipReply.Marshal(b, m, deterministic)
}
func (m *GossipReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GossipReply.Merge(m, src)
}
func (m *GossipReply) XXX_Size() int {
	return xxx_messageInfo_GossipReply.Size(m)
}
func (m *GossipReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GossipReply.DiscardUnknown(m)
}

var xxx_messageInfo_GossipReply proto.InternalMessageInfo

func (m *GossipReply) GetResponseByte() []byte {
	if m != nil {
		return m.ResponseByte
	}
	return nil
}

func init() {
	proto.RegisterType((*GossipMessage)(nil), "flow.gossip.messages.GossipMessage")
	proto.RegisterType((*Socket)(nil), "flow.gossip.messages.Socket")
	proto.RegisterType((*HashMessage)(nil), "flow.gossip.messages.HashMessage")
	proto.RegisterType((*GossipReply)(nil), "flow.gossip.messages.GossipReply")
}

func init() { proto.RegisterFile("gossip/messages/messages.proto", fileDescriptor_f6f1c3d59bb108c3) }

var fileDescriptor_f6f1c3d59bb108c3 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xc1, 0x4e, 0xab, 0x50,
	0x10, 0x7d, 0x94, 0x3e, 0xde, 0x63, 0x68, 0x6d, 0x33, 0x31, 0x86, 0x98, 0xa6, 0x41, 0xdc, 0xb0,
	0x30, 0xa8, 0xf5, 0x07, 0xb4, 0x1b, 0x5d, 0x68, 0x52, 0x2f, 0xd5, 0x85, 0x1b, 0x45, 0x3a, 0x16,
	0x62, 0xcb, 0xbd, 0xe1, 0x52, 0x0d, 0x6b, 0xbf, 0xc6, 0xbf, 0x34, 0xbd, 0x80, 0xb6, 0x49, 0xe3,
	0xae, 0xbb, 0x33, 0x67, 0xe6, 0xcc, 0x39, 0x0c, 0xb9, 0xd0, 0x9f, 0x72, 0x29, 0x13, 0x71, 0x3c,
	0x27, 0x29, 0xc3, 0x29, 0xc9, 0x6f, 0xe0, 0x8b, 0x8c, 0xe7, 0x1c, 0x77, 0x5f, 0x66, 0xfc, 0xdd,
	0x2f, 0x87, 0xfc, 0xba, 0xe7, 0x7e, 0x6a, 0xd0, 0xbe, 0x54, 0xdc, 0x4d, 0x49, 0xa1, 0x0d, 0xff,
	0x46, 0x61, 0x31, 0xe3, 0xe1, 0xc4, 0xd6, 0x1c, 0xcd, 0x6b, 0xb1, 0xba, 0x44, 0x07, 0xac, 0x4a,
	0x37, 0x2e, 0x04, 0xd9, 0x0d, 0x47, 0xf3, 0x9a, 0x6c, 0x95, 0xc2, 0x3e, 0x00, 0xa3, 0x28, 0x11,
	0x09, 0xa5, 0xb9, 0xb4, 0x75, 0x47, 0xf7, 0x4c, 0xb6, 0xc2, 0xe0, 0x1e, 0x18, 0x01, 0xa5, 0x13,
	0xca, 0xec, 0xa6, 0xa3, 0x79, 0x26, 0xab, 0x2a, 0x44, 0x68, 0x8e, 0xc2, 0x3c, 0xb6, 0xff, 0x2a,
	0x85, 0xc2, 0xd8, 0x05, 0x7d, 0x3c, 0xbe, 0xb6, 0x0d, 0xe5, 0xb2, 0x84, 0xee, 0x11, 0x18, 0x01,
	0x8f, 0x5e, 0x29, 0xc7, 0x1d, 0x68, 0x24, 0xa2, 0x8a, 0xd7, 0x48, 0xc4, 0x52, 0x2f, 0x78, 0x96,
	0xab, 0x48, 0x6d, 0xa6, 0xb0, 0x3b, 0x07, 0xeb, 0x2a, 0x94, 0x71, 0xfd, 0x59, 0x3d, 0x30, 0xe3,
	0x50, 0xc6, 0xc3, 0x22, 0x27, 0x59, 0x29, 0x7f, 0x08, 0x3c, 0x87, 0x96, 0x54, 0x51, 0x4a, 0x03,
	0xb5, 0xc8, 0x1a, 0xf4, 0xfc, 0x4d, 0x37, 0xf3, 0xcb, 0x19, 0xb6, 0xa6, 0x70, 0x4f, 0xc1, 0x2a,
	0xef, 0xc8, 0x48, 0xcc, 0x0a, 0x74, 0xa1, 0x95, 0x91, 0x14, 0x3c, 0x95, 0xb4, 0x74, 0xa8, 0x1c,
	0xd7, 0xb8, 0xc1, 0x87, 0x0e, 0x9d, 0x2a, 0x1e, 0xa3, 0x88, 0x92, 0x37, 0xca, 0xf0, 0x1e, 0xe0,
	0x42, 0x16, 0x69, 0x74, 0xbb, 0xa0, 0x05, 0xe1, 0xe1, 0xe6, 0x00, 0x6b, 0x3f, 0x6c, 0xff, 0xe0,
	0xb7, 0x21, 0x95, 0xc6, 0xfd, 0x83, 0x77, 0x60, 0x06, 0x5b, 0x58, 0xfb, 0x04, 0xdd, 0x20, 0xcf,
	0x28, 0x9c, 0x6f, 0x23, 0xb4, 0xa7, 0x9d, 0x68, 0xf8, 0x08, 0x9d, 0xd2, 0x21, 0xd8, 0x8e, 0xc1,
	0x10, 0x1e, 0xfe, 0xd7, 0xdd, 0x67, 0x43, 0x3d, 0x95, 0xb3, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xb1, 0xb6, 0x10, 0x09, 0x4c, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageReceiverClient is the client API for MessageReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageReceiverClient interface {
	AsyncQueue(ctx context.Context, in *GossipMessage, opts ...grpc.CallOption) (*GossipReply, error)
	SyncQueue(ctx context.Context, in *GossipMessage, opts ...grpc.CallOption) (*GossipReply, error)
	StreamAsyncQueue(ctx context.Context, opts ...grpc.CallOption) (MessageReceiver_StreamAsyncQueueClient, error)
	StreamSyncQueue(ctx context.Context, opts ...grpc.CallOption) (MessageReceiver_StreamSyncQueueClient, error)
}

type messageReceiverClient struct {
	cc *grpc.ClientConn
}

func NewMessageReceiverClient(cc *grpc.ClientConn) MessageReceiverClient {
	return &messageReceiverClient{cc}
}

func (c *messageReceiverClient) AsyncQueue(ctx context.Context, in *GossipMessage, opts ...grpc.CallOption) (*GossipReply, error) {
	out := new(GossipReply)
	err := c.cc.Invoke(ctx, "/flow.gossip.messages.MessageReceiver/AsyncQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageReceiverClient) SyncQueue(ctx context.Context, in *GossipMessage, opts ...grpc.CallOption) (*GossipReply, error) {
	out := new(GossipReply)
	err := c.cc.Invoke(ctx, "/flow.gossip.messages.MessageReceiver/SyncQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageReceiverClient) StreamAsyncQueue(ctx context.Context, opts ...grpc.CallOption) (MessageReceiver_StreamAsyncQueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageReceiver_serviceDesc.Streams[0], "/flow.gossip.messages.MessageReceiver/StreamAsyncQueue", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageReceiverStreamAsyncQueueClient{stream}
	return x, nil
}

type MessageReceiver_StreamAsyncQueueClient interface {
	Send(*GossipMessage) error
	Recv() (*GossipReply, error)
	grpc.ClientStream
}

type messageReceiverStreamAsyncQueueClient struct {
	grpc.ClientStream
}

func (x *messageReceiverStreamAsyncQueueClient) Send(m *GossipMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageReceiverStreamAsyncQueueClient) Recv() (*GossipReply, error) {
	m := new(GossipReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageReceiverClient) StreamSyncQueue(ctx context.Context, opts ...grpc.CallOption) (MessageReceiver_StreamSyncQueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageReceiver_serviceDesc.Streams[1], "/flow.gossip.messages.MessageReceiver/StreamSyncQueue", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageReceiverStreamSyncQueueClient{stream}
	return x, nil
}

type MessageReceiver_StreamSyncQueueClient interface {
	Send(*GossipMessage) error
	Recv() (*GossipReply, error)
	grpc.ClientStream
}

type messageReceiverStreamSyncQueueClient struct {
	grpc.ClientStream
}

func (x *messageReceiverStreamSyncQueueClient) Send(m *GossipMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageReceiverStreamSyncQueueClient) Recv() (*GossipReply, error) {
	m := new(GossipReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageReceiverServer is the server API for MessageReceiver service.
type MessageReceiverServer interface {
	AsyncQueue(context.Context, *GossipMessage) (*GossipReply, error)
	SyncQueue(context.Context, *GossipMessage) (*GossipReply, error)
	StreamAsyncQueue(MessageReceiver_StreamAsyncQueueServer) error
	StreamSyncQueue(MessageReceiver_StreamSyncQueueServer) error
}

// UnimplementedMessageReceiverServer can be embedded to have forward compatible implementations.
type UnimplementedMessageReceiverServer struct {
}

func (*UnimplementedMessageReceiverServer) AsyncQueue(ctx context.Context, req *GossipMessage) (*GossipReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsyncQueue not implemented")
}
func (*UnimplementedMessageReceiverServer) SyncQueue(ctx context.Context, req *GossipMessage) (*GossipReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncQueue not implemented")
}
func (*UnimplementedMessageReceiverServer) StreamAsyncQueue(srv MessageReceiver_StreamAsyncQueueServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAsyncQueue not implemented")
}
func (*UnimplementedMessageReceiverServer) StreamSyncQueue(srv MessageReceiver_StreamSyncQueueServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSyncQueue not implemented")
}

func RegisterMessageReceiverServer(s *grpc.Server, srv MessageReceiverServer) {
	s.RegisterService(&_MessageReceiver_serviceDesc, srv)
}

func _MessageReceiver_AsyncQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GossipMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageReceiverServer).AsyncQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.gossip.messages.MessageReceiver/AsyncQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageReceiverServer).AsyncQueue(ctx, req.(*GossipMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageReceiver_SyncQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GossipMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageReceiverServer).SyncQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.gossip.messages.MessageReceiver/SyncQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageReceiverServer).SyncQueue(ctx, req.(*GossipMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageReceiver_StreamAsyncQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageReceiverServer).StreamAsyncQueue(&messageReceiverStreamAsyncQueueServer{stream})
}

type MessageReceiver_StreamAsyncQueueServer interface {
	Send(*GossipReply) error
	Recv() (*GossipMessage, error)
	grpc.ServerStream
}

type messageReceiverStreamAsyncQueueServer struct {
	grpc.ServerStream
}

func (x *messageReceiverStreamAsyncQueueServer) Send(m *GossipReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageReceiverStreamAsyncQueueServer) Recv() (*GossipMessage, error) {
	m := new(GossipMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageReceiver_StreamSyncQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageReceiverServer).StreamSyncQueue(&messageReceiverStreamSyncQueueServer{stream})
}

type MessageReceiver_StreamSyncQueueServer interface {
	Send(*GossipReply) error
	Recv() (*GossipMessage, error)
	grpc.ServerStream
}

type messageReceiverStreamSyncQueueServer struct {
	grpc.ServerStream
}

func (x *messageReceiverStreamSyncQueueServer) Send(m *GossipReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageReceiverStreamSyncQueueServer) Recv() (*GossipMessage, error) {
	m := new(GossipMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageReceiver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flow.gossip.messages.MessageReceiver",
	HandlerType: (*MessageReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AsyncQueue",
			Handler:    _MessageReceiver_AsyncQueue_Handler,
		},
		{
			MethodName: "SyncQueue",
			Handler:    _MessageReceiver_SyncQueue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAsyncQueue",
			Handler:       _MessageReceiver_StreamAsyncQueue_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamSyncQueue",
			Handler:       _MessageReceiver_StreamSyncQueue_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gossip/messages/messages.proto",
}
