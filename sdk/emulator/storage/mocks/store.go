// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dapperlabs/flow-go/sdk/emulator/storage (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	crypto "github.com/dapperlabs/flow-go/crypto"
	flow "github.com/dapperlabs/flow-go/model/flow"
	types "github.com/dapperlabs/flow-go/sdk/emulator/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CommitBlock mocks base method
func (m *MockStore) CommitBlock(arg0 types.Block, arg1 []flow.Transaction, arg2 flow.Ledger, arg3 []flow.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitBlock", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitBlock indicates an expected call of CommitBlock
func (mr *MockStoreMockRecorder) CommitBlock(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitBlock", reflect.TypeOf((*MockStore)(nil).CommitBlock), arg0, arg1, arg2, arg3)
}

// GetBlockByHash mocks base method
func (m *MockStore) GetBlockByHash(arg0 crypto.Hash) (types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", arg0)
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockStoreMockRecorder) GetBlockByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockStore)(nil).GetBlockByHash), arg0)
}

// GetBlockByNumber mocks base method
func (m *MockStore) GetBlockByNumber(arg0 uint64) (types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", arg0)
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber
func (mr *MockStoreMockRecorder) GetBlockByNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockStore)(nil).GetBlockByNumber), arg0)
}

// GetEvents mocks base method
func (m *MockStore) GetEvents(arg0 string, arg1, arg2 uint64) ([]flow.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]flow.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents
func (mr *MockStoreMockRecorder) GetEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockStore)(nil).GetEvents), arg0, arg1, arg2)
}

// GetLatestBlock mocks base method
func (m *MockStore) GetLatestBlock() (types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock")
	ret0, _ := ret[0].(types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock
func (mr *MockStoreMockRecorder) GetLatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockStore)(nil).GetLatestBlock))
}

// GetLedger mocks base method
func (m *MockStore) GetLedger(arg0 uint64) (flow.Ledger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLedger", arg0)
	ret0, _ := ret[0].(flow.Ledger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedger indicates an expected call of GetLedger
func (mr *MockStoreMockRecorder) GetLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedger", reflect.TypeOf((*MockStore)(nil).GetLedger), arg0)
}

// GetTransaction mocks base method
func (m *MockStore) GetTransaction(arg0 crypto.Hash) (flow.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0)
	ret0, _ := ret[0].(flow.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction
func (mr *MockStoreMockRecorder) GetTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockStore)(nil).GetTransaction), arg0)
}

// InsertBlock mocks base method
func (m *MockStore) InsertBlock(arg0 types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBlock indicates an expected call of InsertBlock
func (mr *MockStoreMockRecorder) InsertBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBlock", reflect.TypeOf((*MockStore)(nil).InsertBlock), arg0)
}

// InsertEvents mocks base method
func (m *MockStore) InsertEvents(arg0 uint64, arg1 []flow.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEvents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertEvents indicates an expected call of InsertEvents
func (mr *MockStoreMockRecorder) InsertEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEvents", reflect.TypeOf((*MockStore)(nil).InsertEvents), arg0, arg1)
}

// InsertTransaction mocks base method
func (m *MockStore) InsertTransaction(arg0 flow.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransaction indicates an expected call of InsertTransaction
func (mr *MockStoreMockRecorder) InsertTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockStore)(nil).InsertTransaction), arg0)
}

// SetLedger mocks base method
func (m *MockStore) SetLedger(arg0 uint64, arg1 flow.Ledger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLedger", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLedger indicates an expected call of SetLedger
func (mr *MockStoreMockRecorder) SetLedger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLedger", reflect.TypeOf((*MockStore)(nil).SetLedger), arg0, arg1)
}
