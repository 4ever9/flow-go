// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shared/gossip.proto

package shared

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Message models a single message that is supposed to get exchanged by the gossip network
type GossipMessage struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Method               string   `protobuf:"bytes,2,opt,name=Method,proto3" json:"Method,omitempty"`
	Recipients           []string `protobuf:"bytes,3,rep,name=Recipients,proto3" json:"Recipients,omitempty"`
	Sender               string   `protobuf:"bytes,4,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Path                 []string `protobuf:"bytes,5,rep,name=Path,proto3" json:"Path,omitempty"`
	TTL                  uint64   `protobuf:"varint,6,opt,name=TTL,proto3" json:"TTL,omitempty"`
	Uuid                 string   `protobuf:"bytes,7,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GossipMessage) Reset()         { *m = GossipMessage{} }
func (m *GossipMessage) String() string { return proto.CompactTextString(m) }
func (*GossipMessage) ProtoMessage()    {}
func (*GossipMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b864370d9939db87, []int{0}
}

func (m *GossipMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GossipMessage.Unmarshal(m, b)
}
func (m *GossipMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GossipMessage.Marshal(b, m, deterministic)
}
func (m *GossipMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GossipMessage.Merge(m, src)
}
func (m *GossipMessage) XXX_Size() int {
	return xxx_messageInfo_GossipMessage.Size(m)
}
func (m *GossipMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GossipMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GossipMessage proto.InternalMessageInfo

func (m *GossipMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GossipMessage) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *GossipMessage) GetRecipients() []string {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *GossipMessage) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *GossipMessage) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *GossipMessage) GetTTL() uint64 {
	if m != nil {
		return m.TTL
	}
	return 0
}

func (m *GossipMessage) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type GossipReply struct {
	ResponseByte         []byte   `protobuf:"bytes,1,opt,name=responseByte,proto3" json:"responseByte,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GossipReply) Reset()         { *m = GossipReply{} }
func (m *GossipReply) String() string { return proto.CompactTextString(m) }
func (*GossipReply) ProtoMessage()    {}
func (*GossipReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b864370d9939db87, []int{1}
}

func (m *GossipReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GossipReply.Unmarshal(m, b)
}
func (m *GossipReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GossipReply.Marshal(b, m, deterministic)
}
func (m *GossipReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GossipReply.Merge(m, src)
}
func (m *GossipReply) XXX_Size() int {
	return xxx_messageInfo_GossipReply.Size(m)
}
func (m *GossipReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GossipReply.DiscardUnknown(m)
}

var xxx_messageInfo_GossipReply proto.InternalMessageInfo

func (m *GossipReply) GetResponseByte() []byte {
	if m != nil {
		return m.ResponseByte
	}
	return nil
}

func init() {
	proto.RegisterType((*GossipMessage)(nil), "flow.shared.gossip.GossipMessage")
	proto.RegisterType((*GossipReply)(nil), "flow.shared.gossip.GossipReply")
}

func init() { proto.RegisterFile("shared/gossip.proto", fileDescriptor_b864370d9939db87) }

var fileDescriptor_b864370d9939db87 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0xc5, 0x24, 0xa4, 0xe4, 0x28, 0x02, 0x1d, 0x12, 0xb2, 0x18, 0x20, 0x64, 0xca, 0x14, 0x04,
	0x7c, 0x01, 0x5d, 0x58, 0xa8, 0xd4, 0xba, 0x9d, 0xd8, 0x42, 0x73, 0x34, 0x91, 0xa2, 0xd8, 0xb2,
	0x1d, 0x50, 0xbe, 0x8b, 0x85, 0xcf, 0x43, 0xb1, 0x83, 0x44, 0x85, 0xd8, 0xd8, 0xde, 0xbb, 0x77,
	0xcf, 0x7a, 0x7e, 0x07, 0x67, 0xa6, 0x2a, 0x34, 0x95, 0x37, 0x5b, 0x69, 0x4c, 0xad, 0x72, 0xa5,
	0xa5, 0x95, 0x88, 0xaf, 0x8d, 0x7c, 0xcf, 0xbd, 0x92, 0x7b, 0x25, 0xfd, 0x60, 0x70, 0xfc, 0xe8,
	0xe0, 0x9c, 0x8c, 0x29, 0xb6, 0x84, 0x1c, 0x26, 0x8b, 0xa2, 0x6f, 0x64, 0x51, 0x72, 0x96, 0xb0,
	0x6c, 0x2a, 0xbe, 0x29, 0x9e, 0x43, 0x34, 0x27, 0x5b, 0xc9, 0x92, 0xef, 0x27, 0x2c, 0x8b, 0xc5,
	0xc8, 0xf0, 0x12, 0x40, 0xd0, 0xa6, 0x56, 0x35, 0xb5, 0xd6, 0xf0, 0x20, 0x09, 0xb2, 0x58, 0xfc,
	0x98, 0x0c, 0xbe, 0x15, 0xb5, 0x25, 0x69, 0x1e, 0x7a, 0x9f, 0x67, 0x88, 0x10, 0x2e, 0x0a, 0x5b,
	0xf1, 0x03, 0xe7, 0x70, 0x18, 0x4f, 0x21, 0x58, 0xaf, 0x9f, 0x78, 0x94, 0xb0, 0x2c, 0x14, 0x03,
	0x1c, 0xb6, 0xba, 0xae, 0x2e, 0xf9, 0xc4, 0x79, 0x1d, 0x4e, 0x6f, 0xe1, 0xc8, 0x87, 0x16, 0xa4,
	0x9a, 0x1e, 0x53, 0x98, 0x6a, 0x32, 0x4a, 0xb6, 0x86, 0x66, 0xbd, 0xa5, 0x31, 0xf7, 0xce, 0xec,
	0xee, 0x93, 0xc1, 0xc9, 0xf8, 0xc5, 0x21, 0x1a, 0xbd, 0x91, 0x46, 0x01, 0xf0, 0x60, 0xfa, 0x76,
	0xb3, 0xec, 0xa8, 0x23, 0xbc, 0xce, 0x7f, 0xf7, 0x93, 0xef, 0x74, 0x73, 0x71, 0xf5, 0xf7, 0x8a,
	0x4b, 0x92, 0xee, 0xe1, 0x12, 0xe2, 0xd5, 0xff, 0x3e, 0x39, 0x3b, 0x7c, 0x8e, 0xbc, 0xfc, 0x12,
	0xb9, 0x43, 0xde, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x08, 0x87, 0x2b, 0xdf, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageRecieverClient is the client API for MessageReciever service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageRecieverClient interface {
	AsyncQueue(ctx context.Context, in *GossipMessage, opts ...grpc.CallOption) (*GossipReply, error)
	SyncQueue(ctx context.Context, in *GossipMessage, opts ...grpc.CallOption) (*GossipReply, error)
}

type messageRecieverClient struct {
	cc *grpc.ClientConn
}

func NewMessageRecieverClient(cc *grpc.ClientConn) MessageRecieverClient {
	return &messageRecieverClient{cc}
}

func (c *messageRecieverClient) AsyncQueue(ctx context.Context, in *GossipMessage, opts ...grpc.CallOption) (*GossipReply, error) {
	out := new(GossipReply)
	err := c.cc.Invoke(ctx, "/flow.shared.gossip.MessageReciever/AsyncQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRecieverClient) SyncQueue(ctx context.Context, in *GossipMessage, opts ...grpc.CallOption) (*GossipReply, error) {
	out := new(GossipReply)
	err := c.cc.Invoke(ctx, "/flow.shared.gossip.MessageReciever/SyncQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageRecieverServer is the server API for MessageReciever service.
type MessageRecieverServer interface {
	AsyncQueue(context.Context, *GossipMessage) (*GossipReply, error)
	SyncQueue(context.Context, *GossipMessage) (*GossipReply, error)
}

// UnimplementedMessageRecieverServer can be embedded to have forward compatible implementations.
type UnimplementedMessageRecieverServer struct {
}

func (*UnimplementedMessageRecieverServer) AsyncQueue(ctx context.Context, req *GossipMessage) (*GossipReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsyncQueue not implemented")
}
func (*UnimplementedMessageRecieverServer) SyncQueue(ctx context.Context, req *GossipMessage) (*GossipReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncQueue not implemented")
}

func RegisterMessageRecieverServer(s *grpc.Server, srv MessageRecieverServer) {
	s.RegisterService(&_MessageReciever_serviceDesc, srv)
}

func _MessageReciever_AsyncQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GossipMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRecieverServer).AsyncQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.shared.gossip.MessageReciever/AsyncQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRecieverServer).AsyncQueue(ctx, req.(*GossipMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageReciever_SyncQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GossipMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRecieverServer).SyncQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.shared.gossip.MessageReciever/SyncQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRecieverServer).SyncQueue(ctx, req.(*GossipMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageReciever_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flow.shared.gossip.MessageReciever",
	HandlerType: (*MessageRecieverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AsyncQueue",
			Handler:    _MessageReciever_AsyncQueue_Handler,
		},
		{
			MethodName: "SyncQueue",
			Handler:    _MessageReciever_SyncQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/gossip.proto",
}
