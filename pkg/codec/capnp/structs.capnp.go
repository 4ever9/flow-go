// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Z struct{ capnp.Struct }
type Z_Which uint16

const (
	Z_Which_ping       Z_Which = 0
	Z_Which_pong       Z_Which = 1
	Z_Which_auth       Z_Which = 2
	Z_Which_announce   Z_Which = 3
	Z_Which_request    Z_Which = 4
	Z_Which_event      Z_Which = 5
	Z_Which_collection Z_Which = 6
	Z_Which_receipt    Z_Which = 7
	Z_Which_approval   Z_Which = 8
	Z_Which_seal       Z_Which = 9
	Z_Which_block      Z_Which = 10
	Z_Which_vote       Z_Which = 11
	Z_Which_timeout    Z_Which = 12
)

func (w Z_Which) String() string {
	const s = "pingpongauthannouncerequesteventcollectionreceiptapprovalsealblockvotetimeout"
	switch w {
	case Z_Which_ping:
		return s[0:4]
	case Z_Which_pong:
		return s[4:8]
	case Z_Which_auth:
		return s[8:12]
	case Z_Which_announce:
		return s[12:20]
	case Z_Which_request:
		return s[20:27]
	case Z_Which_event:
		return s[27:32]
	case Z_Which_collection:
		return s[32:42]
	case Z_Which_receipt:
		return s[42:49]
	case Z_Which_approval:
		return s[49:57]
	case Z_Which_seal:
		return s[57:61]
	case Z_Which_block:
		return s[61:66]
	case Z_Which_vote:
		return s[66:70]
	case Z_Which_timeout:
		return s[70:77]

	}
	return "Z_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Z_TypeID is the unique identifier for the type Z.
const Z_TypeID = 0x8ecbe73cacf4e2a7

func NewZ(s *capnp.Segment) (Z, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Z{st}, err
}

func NewRootZ(s *capnp.Segment) (Z, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Z{st}, err
}

func ReadRootZ(msg *capnp.Message) (Z, error) {
	root, err := msg.RootPtr()
	return Z{root.Struct()}, err
}

func (s Z) String() string {
	str, _ := text.Marshal(0x8ecbe73cacf4e2a7, s.Struct)
	return str
}

func (s Z) Which() Z_Which {
	return Z_Which(s.Struct.Uint16(0))
}
func (s Z) Ping() (Ping, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != ping")
	}
	p, err := s.Struct.Ptr(0)
	return Ping{Struct: p.Struct()}, err
}

func (s Z) HasPing() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetPing(v Ping) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPing sets the ping field to a newly
// allocated Ping struct, preferring placement in s's segment.
func (s Z) NewPing() (Ping, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewPing(s.Struct.Segment())
	if err != nil {
		return Ping{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Pong() (Pong, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != pong")
	}
	p, err := s.Struct.Ptr(0)
	return Pong{Struct: p.Struct()}, err
}

func (s Z) HasPong() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetPong(v Pong) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPong sets the pong field to a newly
// allocated Pong struct, preferring placement in s's segment.
func (s Z) NewPong() (Pong, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPong(s.Struct.Segment())
	if err != nil {
		return Pong{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Auth() (Auth, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != auth")
	}
	p, err := s.Struct.Ptr(0)
	return Auth{Struct: p.Struct()}, err
}

func (s Z) HasAuth() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetAuth(v Auth) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAuth sets the auth field to a newly
// allocated Auth struct, preferring placement in s's segment.
func (s Z) NewAuth() (Auth, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewAuth(s.Struct.Segment())
	if err != nil {
		return Auth{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Announce() (Announce, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != announce")
	}
	p, err := s.Struct.Ptr(0)
	return Announce{Struct: p.Struct()}, err
}

func (s Z) HasAnnounce() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetAnnounce(v Announce) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAnnounce sets the announce field to a newly
// allocated Announce struct, preferring placement in s's segment.
func (s Z) NewAnnounce() (Announce, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewAnnounce(s.Struct.Segment())
	if err != nil {
		return Announce{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Request() (Request, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != request")
	}
	p, err := s.Struct.Ptr(0)
	return Request{Struct: p.Struct()}, err
}

func (s Z) HasRequest() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetRequest(v Request) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated Request struct, preferring placement in s's segment.
func (s Z) NewRequest() (Request, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewRequest(s.Struct.Segment())
	if err != nil {
		return Request{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Event() (Event, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != event")
	}
	p, err := s.Struct.Ptr(0)
	return Event{Struct: p.Struct()}, err
}

func (s Z) HasEvent() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetEvent(v Event) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event struct, preferring placement in s's segment.
func (s Z) NewEvent() (Event, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewEvent(s.Struct.Segment())
	if err != nil {
		return Event{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Collection() (Collection, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != collection")
	}
	p, err := s.Struct.Ptr(0)
	return Collection{Struct: p.Struct()}, err
}

func (s Z) HasCollection() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetCollection(v Collection) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCollection sets the collection field to a newly
// allocated Collection struct, preferring placement in s's segment.
func (s Z) NewCollection() (Collection, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewCollection(s.Struct.Segment())
	if err != nil {
		return Collection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Receipt() (Receipt, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != receipt")
	}
	p, err := s.Struct.Ptr(0)
	return Receipt{Struct: p.Struct()}, err
}

func (s Z) HasReceipt() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetReceipt(v Receipt) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewReceipt sets the receipt field to a newly
// allocated Receipt struct, preferring placement in s's segment.
func (s Z) NewReceipt() (Receipt, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewReceipt(s.Struct.Segment())
	if err != nil {
		return Receipt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Approval() (Approval, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != approval")
	}
	p, err := s.Struct.Ptr(0)
	return Approval{Struct: p.Struct()}, err
}

func (s Z) HasApproval() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetApproval(v Approval) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewApproval sets the approval field to a newly
// allocated Approval struct, preferring placement in s's segment.
func (s Z) NewApproval() (Approval, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewApproval(s.Struct.Segment())
	if err != nil {
		return Approval{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Seal() (Seal, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != seal")
	}
	p, err := s.Struct.Ptr(0)
	return Seal{Struct: p.Struct()}, err
}

func (s Z) HasSeal() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetSeal(v Seal) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSeal sets the seal field to a newly
// allocated Seal struct, preferring placement in s's segment.
func (s Z) NewSeal() (Seal, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewSeal(s.Struct.Segment())
	if err != nil {
		return Seal{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Block() (Block, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != block")
	}
	p, err := s.Struct.Ptr(0)
	return Block{Struct: p.Struct()}, err
}

func (s Z) HasBlock() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetBlock(v Block) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated Block struct, preferring placement in s's segment.
func (s Z) NewBlock() (Block, error) {
	s.Struct.SetUint16(0, 10)
	ss, err := NewBlock(s.Struct.Segment())
	if err != nil {
		return Block{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Vote() (Vote, error) {
	if s.Struct.Uint16(0) != 11 {
		panic("Which() != vote")
	}
	p, err := s.Struct.Ptr(0)
	return Vote{Struct: p.Struct()}, err
}

func (s Z) HasVote() bool {
	if s.Struct.Uint16(0) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetVote(v Vote) error {
	s.Struct.SetUint16(0, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVote sets the vote field to a newly
// allocated Vote struct, preferring placement in s's segment.
func (s Z) NewVote() (Vote, error) {
	s.Struct.SetUint16(0, 11)
	ss, err := NewVote(s.Struct.Segment())
	if err != nil {
		return Vote{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Timeout() (Timeout, error) {
	if s.Struct.Uint16(0) != 12 {
		panic("Which() != timeout")
	}
	p, err := s.Struct.Ptr(0)
	return Timeout{Struct: p.Struct()}, err
}

func (s Z) HasTimeout() bool {
	if s.Struct.Uint16(0) != 12 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetTimeout(v Timeout) error {
	s.Struct.SetUint16(0, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTimeout sets the timeout field to a newly
// allocated Timeout struct, preferring placement in s's segment.
func (s Z) NewTimeout() (Timeout, error) {
	s.Struct.SetUint16(0, 12)
	ss, err := NewTimeout(s.Struct.Segment())
	if err != nil {
		return Timeout{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Z_List is a list of Z.
type Z_List struct{ capnp.List }

// NewZ creates a new list of Z.
func NewZ_List(s *capnp.Segment, sz int32) (Z_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Z_List{l}, err
}

func (s Z_List) At(i int) Z { return Z{s.List.Struct(i)} }

func (s Z_List) Set(i int, v Z) error { return s.List.SetStruct(i, v.Struct) }

func (s Z_List) String() string {
	str, _ := text.MarshalList(0x8ecbe73cacf4e2a7, s.List)
	return str
}

// Z_Promise is a wrapper for a Z promised by a client call.
type Z_Promise struct{ *capnp.Pipeline }

func (p Z_Promise) Struct() (Z, error) {
	s, err := p.Pipeline.Struct()
	return Z{s}, err
}

func (p Z_Promise) Ping() Ping_Promise {
	return Ping_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Pong() Pong_Promise {
	return Pong_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Auth() Auth_Promise {
	return Auth_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Announce() Announce_Promise {
	return Announce_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Request() Request_Promise {
	return Request_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Event() Event_Promise {
	return Event_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Collection() Collection_Promise {
	return Collection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Receipt() Receipt_Promise {
	return Receipt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Approval() Approval_Promise {
	return Approval_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Seal() Seal_Promise {
	return Seal_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Block() Block_Promise {
	return Block_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Vote() Vote_Promise {
	return Vote_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Timeout() Timeout_Promise {
	return Timeout_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Ping struct{ capnp.Struct }

// Ping_TypeID is the unique identifier for the type Ping.
const Ping_TypeID = 0xcd85c944f3858c03

func NewPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Ping{st}, err
}

func NewRootPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Ping{st}, err
}

func ReadRootPing(msg *capnp.Message) (Ping, error) {
	root, err := msg.RootPtr()
	return Ping{root.Struct()}, err
}

func (s Ping) String() string {
	str, _ := text.Marshal(0xcd85c944f3858c03, s.Struct)
	return str
}

func (s Ping) Nonce() uint32 {
	return s.Struct.Uint32(0)
}

func (s Ping) SetNonce(v uint32) {
	s.Struct.SetUint32(0, v)
}

// Ping_List is a list of Ping.
type Ping_List struct{ capnp.List }

// NewPing creates a new list of Ping.
func NewPing_List(s *capnp.Segment, sz int32) (Ping_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Ping_List{l}, err
}

func (s Ping_List) At(i int) Ping { return Ping{s.List.Struct(i)} }

func (s Ping_List) Set(i int, v Ping) error { return s.List.SetStruct(i, v.Struct) }

func (s Ping_List) String() string {
	str, _ := text.MarshalList(0xcd85c944f3858c03, s.List)
	return str
}

// Ping_Promise is a wrapper for a Ping promised by a client call.
type Ping_Promise struct{ *capnp.Pipeline }

func (p Ping_Promise) Struct() (Ping, error) {
	s, err := p.Pipeline.Struct()
	return Ping{s}, err
}

type Pong struct{ capnp.Struct }

// Pong_TypeID is the unique identifier for the type Pong.
const Pong_TypeID = 0xa6e7d6326996b9d1

func NewPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Pong{st}, err
}

func NewRootPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Pong{st}, err
}

func ReadRootPong(msg *capnp.Message) (Pong, error) {
	root, err := msg.RootPtr()
	return Pong{root.Struct()}, err
}

func (s Pong) String() string {
	str, _ := text.Marshal(0xa6e7d6326996b9d1, s.Struct)
	return str
}

func (s Pong) Nonce() uint32 {
	return s.Struct.Uint32(0)
}

func (s Pong) SetNonce(v uint32) {
	s.Struct.SetUint32(0, v)
}

// Pong_List is a list of Pong.
type Pong_List struct{ capnp.List }

// NewPong creates a new list of Pong.
func NewPong_List(s *capnp.Segment, sz int32) (Pong_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Pong_List{l}, err
}

func (s Pong_List) At(i int) Pong { return Pong{s.List.Struct(i)} }

func (s Pong_List) Set(i int, v Pong) error { return s.List.SetStruct(i, v.Struct) }

func (s Pong_List) String() string {
	str, _ := text.MarshalList(0xa6e7d6326996b9d1, s.List)
	return str
}

// Pong_Promise is a wrapper for a Pong promised by a client call.
type Pong_Promise struct{ *capnp.Pipeline }

func (p Pong_Promise) Struct() (Pong, error) {
	s, err := p.Pipeline.Struct()
	return Pong{s}, err
}

type Auth struct{ capnp.Struct }

// Auth_TypeID is the unique identifier for the type Auth.
const Auth_TypeID = 0xaa330a6be385f064

func NewAuth(s *capnp.Segment) (Auth, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Auth{st}, err
}

func NewRootAuth(s *capnp.Segment) (Auth, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Auth{st}, err
}

func ReadRootAuth(msg *capnp.Message) (Auth, error) {
	root, err := msg.RootPtr()
	return Auth{root.Struct()}, err
}

func (s Auth) String() string {
	str, _ := text.Marshal(0xaa330a6be385f064, s.Struct)
	return str
}

func (s Auth) Node() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Auth) HasNode() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Auth) NodeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Auth) SetNode(v string) error {
	return s.Struct.SetText(0, v)
}

// Auth_List is a list of Auth.
type Auth_List struct{ capnp.List }

// NewAuth creates a new list of Auth.
func NewAuth_List(s *capnp.Segment, sz int32) (Auth_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Auth_List{l}, err
}

func (s Auth_List) At(i int) Auth { return Auth{s.List.Struct(i)} }

func (s Auth_List) Set(i int, v Auth) error { return s.List.SetStruct(i, v.Struct) }

func (s Auth_List) String() string {
	str, _ := text.MarshalList(0xaa330a6be385f064, s.List)
	return str
}

// Auth_Promise is a wrapper for a Auth promised by a client call.
type Auth_Promise struct{ *capnp.Pipeline }

func (p Auth_Promise) Struct() (Auth, error) {
	s, err := p.Pipeline.Struct()
	return Auth{s}, err
}

type Announce struct{ capnp.Struct }

// Announce_TypeID is the unique identifier for the type Announce.
const Announce_TypeID = 0xae6f1d98d49219ee

func NewAnnounce(s *capnp.Segment) (Announce, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Announce{st}, err
}

func NewRootAnnounce(s *capnp.Segment) (Announce, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Announce{st}, err
}

func ReadRootAnnounce(msg *capnp.Message) (Announce, error) {
	root, err := msg.RootPtr()
	return Announce{root.Struct()}, err
}

func (s Announce) String() string {
	str, _ := text.Marshal(0xae6f1d98d49219ee, s.Struct)
	return str
}

func (s Announce) Engine() uint8 {
	return s.Struct.Uint8(0)
}

func (s Announce) SetEngine(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Announce) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Announce) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Announce) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Announce_List is a list of Announce.
type Announce_List struct{ capnp.List }

// NewAnnounce creates a new list of Announce.
func NewAnnounce_List(s *capnp.Segment, sz int32) (Announce_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Announce_List{l}, err
}

func (s Announce_List) At(i int) Announce { return Announce{s.List.Struct(i)} }

func (s Announce_List) Set(i int, v Announce) error { return s.List.SetStruct(i, v.Struct) }

func (s Announce_List) String() string {
	str, _ := text.MarshalList(0xae6f1d98d49219ee, s.List)
	return str
}

// Announce_Promise is a wrapper for a Announce promised by a client call.
type Announce_Promise struct{ *capnp.Pipeline }

func (p Announce_Promise) Struct() (Announce, error) {
	s, err := p.Pipeline.Struct()
	return Announce{s}, err
}

type Request struct{ capnp.Struct }

// Request_TypeID is the unique identifier for the type Request.
const Request_TypeID = 0xbc9f4cbf2f7a3968

func NewRequest(s *capnp.Segment) (Request, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Request{st}, err
}

func NewRootRequest(s *capnp.Segment) (Request, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Request{st}, err
}

func ReadRootRequest(msg *capnp.Message) (Request, error) {
	root, err := msg.RootPtr()
	return Request{root.Struct()}, err
}

func (s Request) String() string {
	str, _ := text.Marshal(0xbc9f4cbf2f7a3968, s.Struct)
	return str
}

func (s Request) Engine() uint8 {
	return s.Struct.Uint8(0)
}

func (s Request) SetEngine(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Request) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Request) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Request_List is a list of Request.
type Request_List struct{ capnp.List }

// NewRequest creates a new list of Request.
func NewRequest_List(s *capnp.Segment, sz int32) (Request_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Request_List{l}, err
}

func (s Request_List) At(i int) Request { return Request{s.List.Struct(i)} }

func (s Request_List) Set(i int, v Request) error { return s.List.SetStruct(i, v.Struct) }

func (s Request_List) String() string {
	str, _ := text.MarshalList(0xbc9f4cbf2f7a3968, s.List)
	return str
}

// Request_Promise is a wrapper for a Request promised by a client call.
type Request_Promise struct{ *capnp.Pipeline }

func (p Request_Promise) Struct() (Request, error) {
	s, err := p.Pipeline.Struct()
	return Request{s}, err
}

type Event struct{ capnp.Struct }

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0xd2320e7dc91a095d

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Event{st}, err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Event{st}, err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.RootPtr()
	return Event{root.Struct()}, err
}

func (s Event) String() string {
	str, _ := text.Marshal(0xd2320e7dc91a095d, s.Struct)
	return str
}

func (s Event) Engine() uint8 {
	return s.Struct.Uint8(0)
}

func (s Event) SetEngine(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Event) Payload() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Event) HasPayload() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Event) SetPayload(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Event_List is a list of Event.
type Event_List struct{ capnp.List }

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Event_List{l}, err
}

func (s Event_List) At(i int) Event { return Event{s.List.Struct(i)} }

func (s Event_List) Set(i int, v Event) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_List) String() string {
	str, _ := text.MarshalList(0xd2320e7dc91a095d, s.List)
	return str
}

// Event_Promise is a wrapper for a Event promised by a client call.
type Event_Promise struct{ *capnp.Pipeline }

func (p Event_Promise) Struct() (Event, error) {
	s, err := p.Pipeline.Struct()
	return Event{s}, err
}

type Collection struct{ capnp.Struct }

// Collection_TypeID is the unique identifier for the type Collection.
const Collection_TypeID = 0xa02f4becfc05bfc0

func NewCollection(s *capnp.Segment) (Collection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Collection{st}, err
}

func NewRootCollection(s *capnp.Segment) (Collection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Collection{st}, err
}

func ReadRootCollection(msg *capnp.Message) (Collection, error) {
	root, err := msg.RootPtr()
	return Collection{root.Struct()}, err
}

func (s Collection) String() string {
	str, _ := text.Marshal(0xa02f4becfc05bfc0, s.Struct)
	return str
}

// Collection_List is a list of Collection.
type Collection_List struct{ capnp.List }

// NewCollection creates a new list of Collection.
func NewCollection_List(s *capnp.Segment, sz int32) (Collection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Collection_List{l}, err
}

func (s Collection_List) At(i int) Collection { return Collection{s.List.Struct(i)} }

func (s Collection_List) Set(i int, v Collection) error { return s.List.SetStruct(i, v.Struct) }

func (s Collection_List) String() string {
	str, _ := text.MarshalList(0xa02f4becfc05bfc0, s.List)
	return str
}

// Collection_Promise is a wrapper for a Collection promised by a client call.
type Collection_Promise struct{ *capnp.Pipeline }

func (p Collection_Promise) Struct() (Collection, error) {
	s, err := p.Pipeline.Struct()
	return Collection{s}, err
}

type Receipt struct{ capnp.Struct }

// Receipt_TypeID is the unique identifier for the type Receipt.
const Receipt_TypeID = 0x9e47b7a447b32806

func NewReceipt(s *capnp.Segment) (Receipt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Receipt{st}, err
}

func NewRootReceipt(s *capnp.Segment) (Receipt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Receipt{st}, err
}

func ReadRootReceipt(msg *capnp.Message) (Receipt, error) {
	root, err := msg.RootPtr()
	return Receipt{root.Struct()}, err
}

func (s Receipt) String() string {
	str, _ := text.Marshal(0x9e47b7a447b32806, s.Struct)
	return str
}

// Receipt_List is a list of Receipt.
type Receipt_List struct{ capnp.List }

// NewReceipt creates a new list of Receipt.
func NewReceipt_List(s *capnp.Segment, sz int32) (Receipt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Receipt_List{l}, err
}

func (s Receipt_List) At(i int) Receipt { return Receipt{s.List.Struct(i)} }

func (s Receipt_List) Set(i int, v Receipt) error { return s.List.SetStruct(i, v.Struct) }

func (s Receipt_List) String() string {
	str, _ := text.MarshalList(0x9e47b7a447b32806, s.List)
	return str
}

// Receipt_Promise is a wrapper for a Receipt promised by a client call.
type Receipt_Promise struct{ *capnp.Pipeline }

func (p Receipt_Promise) Struct() (Receipt, error) {
	s, err := p.Pipeline.Struct()
	return Receipt{s}, err
}

type Approval struct{ capnp.Struct }

// Approval_TypeID is the unique identifier for the type Approval.
const Approval_TypeID = 0x93efa191d0dc50fc

func NewApproval(s *capnp.Segment) (Approval, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Approval{st}, err
}

func NewRootApproval(s *capnp.Segment) (Approval, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Approval{st}, err
}

func ReadRootApproval(msg *capnp.Message) (Approval, error) {
	root, err := msg.RootPtr()
	return Approval{root.Struct()}, err
}

func (s Approval) String() string {
	str, _ := text.Marshal(0x93efa191d0dc50fc, s.Struct)
	return str
}

// Approval_List is a list of Approval.
type Approval_List struct{ capnp.List }

// NewApproval creates a new list of Approval.
func NewApproval_List(s *capnp.Segment, sz int32) (Approval_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Approval_List{l}, err
}

func (s Approval_List) At(i int) Approval { return Approval{s.List.Struct(i)} }

func (s Approval_List) Set(i int, v Approval) error { return s.List.SetStruct(i, v.Struct) }

func (s Approval_List) String() string {
	str, _ := text.MarshalList(0x93efa191d0dc50fc, s.List)
	return str
}

// Approval_Promise is a wrapper for a Approval promised by a client call.
type Approval_Promise struct{ *capnp.Pipeline }

func (p Approval_Promise) Struct() (Approval, error) {
	s, err := p.Pipeline.Struct()
	return Approval{s}, err
}

type Seal struct{ capnp.Struct }

// Seal_TypeID is the unique identifier for the type Seal.
const Seal_TypeID = 0xd3b210ad68a1f63d

func NewSeal(s *capnp.Segment) (Seal, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Seal{st}, err
}

func NewRootSeal(s *capnp.Segment) (Seal, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Seal{st}, err
}

func ReadRootSeal(msg *capnp.Message) (Seal, error) {
	root, err := msg.RootPtr()
	return Seal{root.Struct()}, err
}

func (s Seal) String() string {
	str, _ := text.Marshal(0xd3b210ad68a1f63d, s.Struct)
	return str
}

// Seal_List is a list of Seal.
type Seal_List struct{ capnp.List }

// NewSeal creates a new list of Seal.
func NewSeal_List(s *capnp.Segment, sz int32) (Seal_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Seal_List{l}, err
}

func (s Seal_List) At(i int) Seal { return Seal{s.List.Struct(i)} }

func (s Seal_List) Set(i int, v Seal) error { return s.List.SetStruct(i, v.Struct) }

func (s Seal_List) String() string {
	str, _ := text.MarshalList(0xd3b210ad68a1f63d, s.List)
	return str
}

// Seal_Promise is a wrapper for a Seal promised by a client call.
type Seal_Promise struct{ *capnp.Pipeline }

func (p Seal_Promise) Struct() (Seal, error) {
	s, err := p.Pipeline.Struct()
	return Seal{s}, err
}

type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0xda77c5c716d843b8

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.RootPtr()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0xda77c5c716d843b8, s.Struct)
	return str
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0xda77c5c716d843b8, s.List)
	return str
}

// Block_Promise is a wrapper for a Block promised by a client call.
type Block_Promise struct{ *capnp.Pipeline }

func (p Block_Promise) Struct() (Block, error) {
	s, err := p.Pipeline.Struct()
	return Block{s}, err
}

type Vote struct{ capnp.Struct }

// Vote_TypeID is the unique identifier for the type Vote.
const Vote_TypeID = 0xfd469507c95f5539

func NewVote(s *capnp.Segment) (Vote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Vote{st}, err
}

func NewRootVote(s *capnp.Segment) (Vote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Vote{st}, err
}

func ReadRootVote(msg *capnp.Message) (Vote, error) {
	root, err := msg.RootPtr()
	return Vote{root.Struct()}, err
}

func (s Vote) String() string {
	str, _ := text.Marshal(0xfd469507c95f5539, s.Struct)
	return str
}

// Vote_List is a list of Vote.
type Vote_List struct{ capnp.List }

// NewVote creates a new list of Vote.
func NewVote_List(s *capnp.Segment, sz int32) (Vote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Vote_List{l}, err
}

func (s Vote_List) At(i int) Vote { return Vote{s.List.Struct(i)} }

func (s Vote_List) Set(i int, v Vote) error { return s.List.SetStruct(i, v.Struct) }

func (s Vote_List) String() string {
	str, _ := text.MarshalList(0xfd469507c95f5539, s.List)
	return str
}

// Vote_Promise is a wrapper for a Vote promised by a client call.
type Vote_Promise struct{ *capnp.Pipeline }

func (p Vote_Promise) Struct() (Vote, error) {
	s, err := p.Pipeline.Struct()
	return Vote{s}, err
}

type Timeout struct{ capnp.Struct }

// Timeout_TypeID is the unique identifier for the type Timeout.
const Timeout_TypeID = 0xb3266243bdce93a6

func NewTimeout(s *capnp.Segment) (Timeout, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Timeout{st}, err
}

func NewRootTimeout(s *capnp.Segment) (Timeout, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Timeout{st}, err
}

func ReadRootTimeout(msg *capnp.Message) (Timeout, error) {
	root, err := msg.RootPtr()
	return Timeout{root.Struct()}, err
}

func (s Timeout) String() string {
	str, _ := text.Marshal(0xb3266243bdce93a6, s.Struct)
	return str
}

// Timeout_List is a list of Timeout.
type Timeout_List struct{ capnp.List }

// NewTimeout creates a new list of Timeout.
func NewTimeout_List(s *capnp.Segment, sz int32) (Timeout_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Timeout_List{l}, err
}

func (s Timeout_List) At(i int) Timeout { return Timeout{s.List.Struct(i)} }

func (s Timeout_List) Set(i int, v Timeout) error { return s.List.SetStruct(i, v.Struct) }

func (s Timeout_List) String() string {
	str, _ := text.MarshalList(0xb3266243bdce93a6, s.List)
	return str
}

// Timeout_Promise is a wrapper for a Timeout promised by a client call.
type Timeout_Promise struct{ *capnp.Pipeline }

func (p Timeout_Promise) Struct() (Timeout, error) {
	s, err := p.Pipeline.Struct()
	return Timeout{s}, err
}

const schema_d168b59a52c33ef7 = "x\xda\xb4\x94mh\x1cE\x18\xc7\x9fg\xe7f\xf7\x92" +
	"\xde%\x1bf\x11,\x94|Q\xa9\x05MM\x0b\x92b" +
	"\x8dM\xac\x15\xf5\xc3]\xcf\x16)\x06\xbdn\x86\xdc\x92" +
	"uw\x9b\xec\xa5\xadT\x8a\xd2@?Tim+\xf5" +
	"\xf0\xa5)RA\xac`JQ\x8b\xa5\x8a\x04\x89\xa2\x18" +
	"\xdfP\x11DE\x8a\xe0\x1b\xf4\xcdj\xe2\xc83w\xde" +
	"\xd6t\x0b\x82\xf4\xdb2\xbf\xff\xf3<\xff\x99\xf9\xcf." +
	"]o\xdcf\xdc\xc4o6\x01\x8awrS\xbd\xf8\xdd" +
	"\x99\x97o9\xf5\xfe\x13PlCT\xe7o}gm" +
	"\xedXe\x06V\xa3\x95\x07\x10\xc8\x1e\x13\x9cY\x00\xcb" +
	"\x90}c\x00\xaa\xd9\xc2\xd7\x1f\xed\x99\xf8u/t\xb4" +
	"]\xa4\xceX\x00b\x8e\x1f\x17\xdc\xb4\x80)s\xf1\xd1" +
	"5/\xbc\xb6\xe6\xb9\x14\xd1\xb7|R\xfc\xc8I\xf4\xd6" +
	"I>\xfb\xd3\xdd]\x07SDS\xfc=1\xa3E3" +
	"o<\xe5u\x7f~\xea\xf0<wZu\x84\xd7\xc41" +
	"N_\xaf\xf2^@5\xf8\xdb\xf8\xf7\xc3\xad\xcb^\xfa" +
	"wC\x8e\xa4\x98\xe15\xf1\xa5\xd6~\xa6\xb5\xbf\\\xfd" +
	"\xe4\xa7\x07\x16\x85\xaf\xcc\xeb[\x17\x9f\xe5\xc7\xc5\x9c\x16" +
	"_\xe0\x9b\x01\xd5\xe1\xbd\x1f\x9e\xe8\xdfx\xdd\xd1\x14\xa7" +
	"\xeb\xccI1\xa0\xf7\\\xe9y\xb8\xeb\xe4=\xcf\xbf\x99" +
	"\xda\xb1\xc7\x9c\x14\xabL\xfaZiRG\xb6k\xfc\xf4" +
	"\xed\xd3\xe3\x1f\xa4m\xebi\xb3&&\xb4\xf6Y\x93\xac" +
	"\x0e\xb4,\x9c~\xa4\xad\xfb\xe3\xd4\xc6'\xccCbJ" +
	"\x8b\xdf\xd6\x8dW\x9e\x9b\xa8\x1c\xb1'?I\xb1\xba\xc8" +
	"\xaa\x89k-\xb2\xfaz\xff\x17W\xbd;\xb5\xf9\xab\x14" +
	"\x11Z\x87D\x8b\x16\xf5\xac{`\xda\xda\x7f\xc7\\\x8a" +
	"\xe8\x07\xb3&~6-\xe8R\xa3\xf1H\xd5\x8dGo" +
	"D\xb7\x1c\x05\xd1\x8a\x0dP@,.g\x99\x9cR\x19" +
	"\x04\x10\x03\xb8\x04\xa0t\x1f2,\x0d\xa2\x81y\xfcK" +
	"9H\xa0\xac\xc1\xfd\x04*\x04\x8c9\xe5\xa0\x01 \xa4" +
	"\x06\x0f\x12\xf0\x09\xb0Y\xe5 \x03\x10\x1e\xde\x05P\xaa" +
	"\x10\x88\x09d\xfeT\x0ef\x00\xc4&\xec\x03(\xf9\x04" +
	"\xb6\x10\xe0\x7f(\x079\x80\xa8b7@)\"\xb0\x8d" +
	"\x80yA9h\x02\x88\xad\xb8\x01\xa0\xb4\x85\xc0\x0e\x02" +
	"\xd6\xef\xca\xd1\xa7\xf9\xa8n\xb5\x8d\xc0N\x02\xd9\xf3\xca" +
	"\xc1,\x80\x18\xd7\xc3w\x10\xd8M\xa0\xe5\x9cr\xb0\x05" +
	"@<\xae\xed\xee$\xb0\x8f@\xebY\xe5`+\x80\xd8" +
	"\xa3\x87\xef\"p\x80\xc0\x823\xca\xc1\x05\x00b\xbf\xae" +
	"\xd8M\xe0\x19\x02\xb9\xd3\xca\xc1\x1c\xdd\xbb\x1e\xbe\x8f\xc0" +
	"A4\xb0=\xf2\x82!\xb4\x93\xa8\x00\xa2\x0d\xd8\x1e\x85" +
	"z\xb9\xf90\x1a\xcb\xe5j\\A;y\x03\xf5eU" +
	"\x0e\x82\xb0\x1a\xb8\x12\x00\xd0NR_\xa7\xdbG\xe4\xa6" +
	"\xaa\x1c\x8d\xd1N\xd2['\x9drL\x06\xb4\xde\x0c_" +
	"\xa3\x9f\x1b\xfa\xbetc\x0fX\x18\xa0\x9d\xbc\xe1fC" +
	"Wz\x11\x156\x7f\x01\xff\x18\x89\xa2\x91p\xac\xec\xd7" +
	"\x8d4\xff\"\x0d\xf7\xa3\xb2\xec\xa3\x9d\xa4\xb7\xe1b\xa3" +
	"\x1f\xba\xc3h'\x81m\xc8\xc7\xc2X\xa2\x9dD\xb41" +
	"=\xf6\x1e\x92a\x95\xa67_lc\xfa\xbc\x9c\xae\x8a" +
	"z\xebn\x0ax\x09[+;\xf5\x1e.FF\x1d\xf5" +
	"76\x1f\x06\x00)\x95\x85\x90\x05C\xf4\x002,\x03" +
	"@\xf9\xef\xc8w\x03\x14\xb3\x0c\x8b\x8e\x81\x9dA\x18\xb8" +
	"\x12\xb3``6\xc5R\x95\xc5\x95y\xc5K\x92\xe2\xf6" +
	" \x1c\x94\x98\x03\x03s)\xb5Ao\xfd\x96\xa9>\xdb" +
	"\xac\xbf~\x05@\xf1\x1a\x86\xc5\xa5\x06\"\xeaw\xd7q" +
	"\xc3B\x80\xe2b\x86\xc5\xe5\x06\xf6\xca`\xc8\x0b$\x9a" +
	"`\xa0\x09\xc8\xbcA\xcc\x83\x81\xf9K\x07\xdc\xebu\xea" +
	"\x93M?.\x9d\xa1+5\xba\xe0\xfd\x8fC]=f" +
	"\xc9\xe0\xbfX\xeb\xbb\xac\xb5\xedQy\xab\x1f\x96/\xeb" +
	"\xaf$Yj\x8c\xfa|+t\x87S\xc0\xfa\x90\xc5t" +
	"Q\x7f\x07\x00\x00\xff\xffV\x95\x10\xc6"

func init() {
	schemas.Register(schema_d168b59a52c33ef7,
		0x8ecbe73cacf4e2a7,
		0x93efa191d0dc50fc,
		0x9e47b7a447b32806,
		0xa02f4becfc05bfc0,
		0xa6e7d6326996b9d1,
		0xaa330a6be385f064,
		0xae6f1d98d49219ee,
		0xb3266243bdce93a6,
		0xbc9f4cbf2f7a3968,
		0xcd85c944f3858c03,
		0xd2320e7dc91a095d,
		0xd3b210ad68a1f63d,
		0xda77c5c716d843b8,
		0xfd469507c95f5539)
}
