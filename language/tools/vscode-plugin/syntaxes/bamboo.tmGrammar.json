{
    "scopeName": "source.bamboo",
    "patterns": [
      { "include": "#comments" },
      { "include": "#literals" },
      { "include": "#operators" }
    ],
    "repository": {
      "comments": {
        "patterns": [
          {
            "captures": {
              "1": {
                "name": "punctuation.definition.comment.bamboo"
              }
            },
            "match": "\\A^(#!).*$\\n?",
            "name": "comment.line.number-sign.bamboo"
          },
          {
            "begin": "/\\*\\*(?!/)",
            "beginCaptures": {
              "0": {
                "name": "punctuation.definition.comment.begin.bamboo"
              }
            },
            "end": "\\*/",
            "endCaptures": {
              "0": {
                "name": "punctuation.definition.comment.end.bamboo"
              }
            },
            "name": "comment.block.documentation.bamboo",
            "patterns": [
              {
                "include": "#nested"
              }
            ]
          },
          {
            "begin": "/\\*:",
            "beginCaptures": {
              "0": {
                "name": "punctuation.definition.comment.begin.bamboo"
              }
            },
            "end": "\\*/",
            "endCaptures": {
              "0": {
                "name": "punctuation.definition.comment.end.bamboo"
              }
            },
            "name": "comment.block.documentation.playground.bamboo",
            "patterns": [
              {
                "include": "#nested"
              }
            ]
          },
          {
            "begin": "/\\*",
            "beginCaptures": {
              "0": {
                "name": "punctuation.definition.comment.begin.bamboo"
              }
            },
            "end": "\\*/",
            "endCaptures": {
              "0": {
                "name": "punctuation.definition.comment.end.bamboo"
              }
            },
            "name": "comment.block.bamboo",
            "patterns": [
              {
                "include": "#nested"
              }
            ]
          },
          {
            "match": "\\*/",
            "name": "invalid.illegal.unexpected-end-of-block-comment.bamboo"
          },
          {
            "begin": "(^[ \\t]+)?(?=//)",
            "beginCaptures": {
              "1": {
                "name": "punctuation.whitespace.comment.leading.bamboo"
              }
            },
            "end": "(?!\\G)",
            "patterns": [
              {
                "begin": "///",
                "beginCaptures": {
                  "0": {
                    "name": "punctuation.definition.comment.bamboo"
                  }
                },
                "end": "^",
                "name": "comment.line.triple-slash.documentation.bamboo"
              },
              {
                "begin": "//:",
                "beginCaptures": {
                  "0": {
                    "name": "punctuation.definition.comment.bamboo"
                  }
                },
                "end": "^",
                "name": "comment.line.double-slash.documentation.bamboo"
              },
              {
                "begin": "//",
                "beginCaptures": {
                  "0": {
                    "name": "punctuation.definition.comment.bamboo"
                  }
                },
                "end": "^",
                "name": "comment.line.double-slash.bamboo"
              }
            ]
          }
        ],
        "repository": {
          "nested": {
            "begin": "/\\*",
            "end": "\\*/",
            "patterns": [
              {
                "include": "#nested"
              }
            ]
          }
        }
      },
      "literals": {
        "patterns": [
          {
            "include": "#boolean"
          },
          {
            "include": "#numeric"
          },
          {
            "include": "#string"
          },
          {
            "match": "\\bnil\\b",
            "name": "constant.language.nil.bamboo"
          }
        ],
        "repository": {
          "boolean": {
            "match": "\\b(true|false)\\b",
            "name": "constant.language.boolean.bamboo"
          },
          "numeric": {
            "patterns": [
              {
                "include": "#binary"
              },
              {
                "include": "#octal"
              },
              {
                "include": "#decimal"
              },
              {
                "include": "#hexadecimal"
              }
            ],
            "repository": {
              "binary":  {
                "comment": "",
                "match": "(\\B\\-|\\b)0b[01]([_01]*[01])?\\b",
                "name": "constant.numeric.integer.binary"
              },
              "octal":  {
                "comment": "",
                "match": "(\\B\\-|\\b)0o[0-7]([_0-7]*[0-7])?\\b",
                "name": "constant.numeric.integer.octal"
              },
              "decimal":  {
                "comment": "",
                "match": "(\\B\\-|\\b)[0-9]([_0-9]*[0-9])?\\b",
                "name": "constant.numeric.integer.decimal"
              },
              "hexadecimal":  {
                "comment": "",
                "match": "(\\B\\-|\\b)0x[0-9A-Fa-f]([_0-9A-Fa-f]*[0-9A-Fa-f])?\\b",
                "name": "constant.numeric.integer.hexadecimal"
              }
            }
          },
          "string": {
            "patterns": [
              {
                "begin": "\"",
                "beginCaptures": {
                  "0": {
                    "name": "punctuation.definition.string.begin.bamboo"
                  }
                },
                "end": "\"",
                "endCaptures": {
                  "0": {
                    "name": "punctuation.definition.string.end.bamboo"
                  }
                },
                "name": "string.quoted.double.single-line.bamboo",
                "patterns": [
                  {
                    "match": "\\r|\\n",
                    "name": "invalid.illegal.returns-not-allowed.bamboo"
                  },
                  {
                    "include": "#string-guts"
                  }
                ]
              }
            ],
            "repository": {
              "string-guts": {
                "patterns": [
                  {
                    "match": "\\\\[0\\\\tnr\"']",
                    "name": "constant.character.escape.bamboo"
                  },
                  {
                    "match": "\\\\u\\{[0-9a-fA-F]{1,8}\\}",
                    "name": "constant.character.escape.unicode.bamboo"
                  }
                ]
              }
            }
          }
        }
      },
      "operators": {
        "patterns": [
          {
            "match": "\\-",
            "name": "keyword.operator.arithmetic.unary.bamboo"
          },
          {
            "match": "!",
            "name": "keyword.operator.logical.not.bamboo"
          },
          {
            "match": "=",
            "name": "keyword.operator.assignment.bamboo"
          },
          {
            "match": "\\+|\\-|\\*|/",
            "name": "keyword.operator.arithmetic.bamboo"
          },
          {
            "match": "&(\\+|\\-|\\*)",
            "name": "keyword.operator.arithmetic.overflow.bamboo"
          },
          {
            "match": "%",
            "name": "keyword.operator.arithmetic.remainder.bamboo"
          },
          {
            "match": "==|!=|>|<|>=|<=",
            "name": "keyword.operator.comparison.bamboo"
          },
          {
            "match": "\\?\\?",
            "name": "keyword.operator.coalescing.bamboo"
          },
          {
            "match": "&&|\\|\\|",
            "name": "keyword.operator.logical.bamboo"
          }
        ]
      }
    }
  }