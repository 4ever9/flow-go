
func TestCrazy(t *testing.T) {
	trieHeight := 17 // should be key size (in bits) + 1
	fStore := mtrie.NewMForest(trieHeight)
	rootHash := fStore.GetEmptyRootHash()

	keys := [][]byte{[]byte([]uint8{uint8(46), uint8(139)}),
		[]byte([]uint8{uint8(73), uint8(209)}),
		[]byte([]uint8{uint8(114), uint8(27)}),
		[]byte([]uint8{uint8(145), uint8(232)}),
		[]byte([]uint8{uint8(176), uint8(185)}),
		[]byte([]uint8{uint8(193), uint8(14)}),
		[]byte([]uint8{uint8(207), uint8(204)})}
	values := [][]byte{[]byte([]uint8{uint8(46), uint8(139)}),
		[]byte([]uint8{uint8(73), uint8(209)}),
		[]byte([]uint8{uint8(114), uint8(27)}),
		[]byte([]uint8{uint8(145), uint8(232)}),
		[]byte([]uint8{uint8(176), uint8(185)}),
		[]byte([]uint8{uint8(193), uint8(14)}),
		[]byte([]uint8{uint8(207), uint8(204)})}
	// keys := [][]byte{[]byte([]uint8{uint8(97), uint8(193)}), []byte([]uint8{uint8(154), uint8(187)}), []byte([]uint8{uint8(226), uint8(30)})}
	// values := [][]byte{[]byte([]uint8{uint8(97), uint8(193)}), []byte([]uint8{uint8(154), uint8(187)}), []byte([]uint8{uint8(226), uint8(30)})}

	// keys := [][]byte{[]byte([]uint8{uint8(3), uint8(247)}), []byte([]uint8{uint8(7), uint8(3)}), []byte([]uint8{uint8(30), uint8(188)}), []byte([]uint8{uint8(45), uint8(174)}), []byte([]uint8{uint8(53), uint8(74)}), []byte([]uint8{uint8(67), uint8(2)}), []byte([]uint8{uint8(72), uint8(227)}), []byte([]uint8{uint8(73), uint8(207)}), []byte([]uint8{uint8(74), uint8(118)}), []byte([]uint8{uint8(80), uint8(238)}), []byte([]uint8{uint8(84), uint8(111)}), []byte([]uint8{uint8(85), uint8(139)}), []byte([]uint8{uint8(86), uint8(44)}), []byte([]uint8{uint8(98), uint8(98)}), []byte([]uint8{uint8(104), uint8(107)}), []byte([]uint8{uint8(107), uint8(161)}), []byte([]uint8{uint8(53), uint8(74)}), []byte([]uint8{uint8(116), uint8(129)}), []byte([]uint8{uint8(137), uint8(182)}), []byte([]uint8{uint8(141), uint8(87)}), []byte([]uint8{uint8(141), uint8(218)}), []byte([]uint8{uint8(155), uint8(164)}), []byte([]uint8{uint8(160), uint8(73)}), []byte([]uint8{uint8(166), uint8(199)}), []byte([]uint8{uint8(177), uint8(94)}), []byte([]uint8{uint8(180), uint8(176)}), []byte([]uint8{uint8(206), uint8(55)}), []byte([]uint8{uint8(219), uint8(110)}), []byte([]uint8{uint8(220), uint8(205)}), []byte([]uint8{uint8(225), uint8(60)}), []byte([]uint8{uint8(239), uint8(168)})}
	// values := [][]byte{[]byte([]uint8{uint8(3), uint8(247)}), []byte([]uint8{uint8(7), uint8(3)}), []byte([]uint8{uint8(30), uint8(188)}), []byte([]uint8{uint8(45), uint8(174)}), []byte([]uint8{uint8(53), uint8(74)}), []byte([]uint8{uint8(67), uint8(2)}), []byte([]uint8{uint8(72), uint8(227)}), []byte([]uint8{uint8(73), uint8(207)}), []byte([]uint8{uint8(74), uint8(118)}), []byte([]uint8{uint8(80), uint8(238)}), []byte([]uint8{uint8(84), uint8(111)}), []byte([]uint8{uint8(85), uint8(139)}), []byte([]uint8{uint8(86), uint8(44)}), []byte([]uint8{uint8(98), uint8(98)}), []byte([]uint8{uint8(104), uint8(107)}), []byte([]uint8{uint8(107), uint8(161)}), []byte([]uint8{uint8(53), uint8(74)}), []byte([]uint8{uint8(116), uint8(129)}), []byte([]uint8{uint8(137), uint8(182)}), []byte([]uint8{uint8(141), uint8(87)}), []byte([]uint8{uint8(141), uint8(218)}), []byte([]uint8{uint8(155), uint8(164)}), []byte([]uint8{uint8(160), uint8(73)}), []byte([]uint8{uint8(166), uint8(199)}), []byte([]uint8{uint8(177), uint8(94)}), []byte([]uint8{uint8(180), uint8(176)}), []byte([]uint8{uint8(206), uint8(55)}), []byte([]uint8{uint8(219), uint8(110)}), []byte([]uint8{uint8(220), uint8(205)}), []byte([]uint8{uint8(225), uint8(60)}), []byte([]uint8{uint8(239), uint8(168)})}
	rootHash, err := fStore.Update(keys, values, rootHash)
	require.NoError(t, err)

	keys = [][]byte{[]byte([]uint8{uint8(175), uint8(135)}),
		[]byte([]uint8{uint8(138), uint8(56)}),
		[]byte([]uint8{uint8(195), uint8(233)})}
	values = [][]byte{[]byte([]uint8{uint8(175), uint8(135)}),
		[]byte([]uint8{uint8(138), uint8(56)}),
		[]byte([]uint8{uint8(195), uint8(233)})}

	// keys = [][]byte{[]byte([]uint8{uint8(140), uint8(229)}), []byte([]uint8{uint8(0), uint8(240)})}
	// values = [][]byte{[]byte([]uint8{uint8(140), uint8(229)}), []byte([]uint8{uint8(0), uint8(240)})}
	_, err = fStore.Update(keys, values, rootHash)
	t.Fatal("XXX")
}

func TestFullParentExpandRight(t *testing.T) {
	trieHeight := 17 // should be key size (in bits) + 1
	fStore := mtrie.NewMForest(trieHeight)
	rootHash := fStore.GetEmptyRootHash()

	k1 := []byte([]uint8{uint8(53), uint8(74)})
	v1 := []byte{'A'}
	k2 := []byte([]uint8{uint8(116), uint8(129)})
	v2 := []byte{'B'}
	keys := [][]byte{k1, k2}
	values := [][]byte{v1, v2}
	rootHash, err := fStore.Update(keys, values, rootHash)
	require.NoError(t, err)
	k3 := []byte([]uint8{uint8(118), uint8(85)})
	v3 := []byte{'C'}
	keys = [][]byte{k3}
	values = [][]byte{v3}
	_, err = fStore.Update(keys, values, rootHash)
	t.Fatal("XXX")
}

func TestFullParentExpandLeft(t *testing.T) {
	trieHeight := 17 // should be key size (in bits) + 1
	fStore := mtrie.NewMForest(trieHeight)
	rootHash := fStore.GetEmptyRootHash()

	k1 := []byte([]uint8{uint8(55), uint8(74)})
	v1 := []byte{'A'}
	k2 := []byte([]uint8{uint8(116), uint8(129)})
	v2 := []byte{'B'}
	keys := [][]byte{k1, k2}
	values := [][]byte{v1, v2}
	rootHash, err := fStore.Update(keys, values, rootHash)
	require.NoError(t, err)
	k3 := []byte([]uint8{uint8(53), uint8(85)})
	v3 := []byte{'C'}
	keys = [][]byte{k3}
	values = [][]byte{v3}
	rootHash, err = fStore.Update(keys, values, rootHash)
	k4 := []byte([]uint8{uint8(53), uint8(75)})
	v4 := []byte{'C'}
	keys = [][]byte{k4}
	values = [][]byte{v4}
	rootHash, err = fStore.Update(keys, values, rootHash)

	t.Fatal("XXX")
}