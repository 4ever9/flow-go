// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	storage "github.com/dapperlabs/flow-go/storage"
	mock "github.com/stretchr/testify/mock"
)

// LedgerVerifier is an autogenerated mock type for the LedgerVerifier type
type LedgerVerifier struct {
	mock.Mock
}

// VerifyGetRegistersProof provides a mock function with given fields: registerIDs, stateCommitment, values, proof
func (_m *LedgerVerifier) VerifyGetRegistersProof(registerIDs []storage.RegisterID, stateCommitment storage.StateCommitment, values []storage.RegisterValue, proof []storage.StorageProof) (bool, error) {
	ret := _m.Called(registerIDs, stateCommitment, values, proof)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]storage.RegisterID, storage.StateCommitment, []storage.RegisterValue, []storage.StorageProof) bool); ok {
		r0 = rf(registerIDs, stateCommitment, values, proof)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]storage.RegisterID, storage.StateCommitment, []storage.RegisterValue, []storage.StorageProof) error); ok {
		r1 = rf(registerIDs, stateCommitment, values, proof)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyUpdateRegistersProof provides a mock function with given fields: registerIDs, values, startStateCommitment, finalStateCommitment, proof
func (_m *LedgerVerifier) VerifyUpdateRegistersProof(registerIDs []storage.RegisterID, values []storage.RegisterValue, startStateCommitment storage.StateCommitment, finalStateCommitment storage.StateCommitment, proof []storage.StorageProof) (bool, error) {
	ret := _m.Called(registerIDs, values, startStateCommitment, finalStateCommitment, proof)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]storage.RegisterID, []storage.RegisterValue, storage.StateCommitment, storage.StateCommitment, []storage.StorageProof) bool); ok {
		r0 = rf(registerIDs, values, startStateCommitment, finalStateCommitment, proof)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]storage.RegisterID, []storage.RegisterValue, storage.StateCommitment, storage.StateCommitment, []storage.StorageProof) error); ok {
		r1 = rf(registerIDs, values, startStateCommitment, finalStateCommitment, proof)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
