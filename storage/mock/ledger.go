// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"
import storage "github.com/dapperlabs/flow-go/storage"

// Ledger is an autogenerated mock type for the Ledger type
type Ledger struct {
	mock.Mock
}

// GetRegisters provides a mock function with given fields: registerIDs, stateCommitment
func (_m *Ledger) GetRegisters(registerIDs []storage.RegisterID, stateCommitment storage.StateCommitment) ([]storage.RegisterValue, error) {
	ret := _m.Called(registerIDs, stateCommitment)

	var r0 []storage.RegisterValue
	if rf, ok := ret.Get(0).(func([]storage.RegisterID, storage.StateCommitment) []storage.RegisterValue); ok {
		r0 = rf(registerIDs, stateCommitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.RegisterValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]storage.RegisterID, storage.StateCommitment) error); ok {
		r1 = rf(registerIDs, stateCommitment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistersWithProof provides a mock function with given fields: registerIDs, stateCommitment
func (_m *Ledger) GetRegistersWithProof(registerIDs []storage.RegisterID, stateCommitment storage.StateCommitment) ([]storage.RegisterValue, []storage.StorageProof, error) {
	ret := _m.Called(registerIDs, stateCommitment)

	var r0 []storage.RegisterValue
	if rf, ok := ret.Get(0).(func([]storage.RegisterID, storage.StateCommitment) []storage.RegisterValue); ok {
		r0 = rf(registerIDs, stateCommitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.RegisterValue)
		}
	}

	var r1 []storage.StorageProof
	if rf, ok := ret.Get(1).(func([]storage.RegisterID, storage.StateCommitment) []storage.StorageProof); ok {
		r1 = rf(registerIDs, stateCommitment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]storage.StorageProof)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func([]storage.RegisterID, storage.StateCommitment) error); ok {
		r2 = rf(registerIDs, stateCommitment)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateRegister provides a mock function with given fields: registerIDs, values, stateCommitment
func (_m *Ledger) UpdateRegister(registerIDs []storage.RegisterID, values []storage.RegisterValue, stateCommitment storage.StateCommitment) (storage.StateCommitment, error) {
	ret := _m.Called(registerIDs, values, stateCommitment)

	var r0 storage.StateCommitment
	if rf, ok := ret.Get(0).(func([]storage.RegisterID, []storage.RegisterValue, storage.StateCommitment) storage.StateCommitment); ok {
		r0 = rf(registerIDs, values, stateCommitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.StateCommitment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]storage.RegisterID, []storage.RegisterValue, storage.StateCommitment) error); ok {
		r1 = rf(registerIDs, values, stateCommitment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRegisterWithProof provides a mock function with given fields: registerIDs, values, stateCommitment
func (_m *Ledger) UpdateRegisterWithProof(registerIDs []storage.RegisterID, values []storage.RegisterValue, stateCommitment storage.StateCommitment) (storage.StateCommitment, []storage.StorageProof, error) {
	ret := _m.Called(registerIDs, values, stateCommitment)

	var r0 storage.StateCommitment
	if rf, ok := ret.Get(0).(func([]storage.RegisterID, []storage.RegisterValue, storage.StateCommitment) storage.StateCommitment); ok {
		r0 = rf(registerIDs, values, stateCommitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.StateCommitment)
		}
	}

	var r1 []storage.StorageProof
	if rf, ok := ret.Get(1).(func([]storage.RegisterID, []storage.RegisterValue, storage.StateCommitment) []storage.StorageProof); ok {
		r1 = rf(registerIDs, values, stateCommitment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]storage.StorageProof)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func([]storage.RegisterID, []storage.RegisterValue, storage.StateCommitment) error); ok {
		r2 = rf(registerIDs, values, stateCommitment)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
