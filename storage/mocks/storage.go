// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dapperlabs/flow-go/storage (interfaces: Blocks,Collections)

// Package mocks is a generated GoMock package.
package mocks

import (
	crypto "github.com/dapperlabs/flow-go/crypto"
	flow "github.com/dapperlabs/flow-go/model/flow"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBlocks is a mock of Blocks interface
type MockBlocks struct {
	ctrl     *gomock.Controller
	recorder *MockBlocksMockRecorder
}

// MockBlocksMockRecorder is the mock recorder for MockBlocks
type MockBlocksMockRecorder struct {
	mock *MockBlocks
}

// NewMockBlocks creates a new mock instance
func NewMockBlocks(ctrl *gomock.Controller) *MockBlocks {
	mock := &MockBlocks{ctrl: ctrl}
	mock.recorder = &MockBlocksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlocks) EXPECT() *MockBlocksMockRecorder {
	return m.recorder
}

// ByHash mocks base method
func (m *MockBlocks) ByHash(arg0 crypto.Hash) (*flow.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByHash", arg0)
	ret0, _ := ret[0].(*flow.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByHash indicates an expected call of ByHash
func (mr *MockBlocksMockRecorder) ByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByHash", reflect.TypeOf((*MockBlocks)(nil).ByHash), arg0)
}

// ByNumber mocks base method
func (m *MockBlocks) ByNumber(arg0 uint64) (*flow.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByNumber", arg0)
	ret0, _ := ret[0].(*flow.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByNumber indicates an expected call of ByNumber
func (mr *MockBlocksMockRecorder) ByNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByNumber", reflect.TypeOf((*MockBlocks)(nil).ByNumber), arg0)
}

// Save mocks base method
func (m *MockBlocks) Save(arg0 *flow.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockBlocksMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBlocks)(nil).Save), arg0)
}

// MockCollections is a mock of Collections interface
type MockCollections struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionsMockRecorder
}

// MockCollectionsMockRecorder is the mock recorder for MockCollections
type MockCollectionsMockRecorder struct {
	mock *MockCollections
}

// NewMockCollections creates a new mock instance
func NewMockCollections(ctrl *gomock.Controller) *MockCollections {
	mock := &MockCollections{ctrl: ctrl}
	mock.recorder = &MockCollectionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCollections) EXPECT() *MockCollectionsMockRecorder {
	return m.recorder
}

// ByFingerprint mocks base method
func (m *MockCollections) ByFingerprint(arg0 flow.Fingerprint) (*flow.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByFingerprint", arg0)
	ret0, _ := ret[0].(*flow.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByFingerprint indicates an expected call of ByFingerprint
func (mr *MockCollectionsMockRecorder) ByFingerprint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByFingerprint", reflect.TypeOf((*MockCollections)(nil).ByFingerprint), arg0)
}

// GuaranteeByFingerprint mocks base method
func (m *MockCollections) GuaranteeByFingerprint(arg0 flow.Fingerprint) (*flow.CollectionGuarantee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuaranteeByFingerprint", arg0)
	ret0, _ := ret[0].(*flow.CollectionGuarantee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuaranteeByFingerprint indicates an expected call of GuaranteeByFingerprint
func (mr *MockCollectionsMockRecorder) GuaranteeByFingerprint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuaranteeByFingerprint", reflect.TypeOf((*MockCollections)(nil).GuaranteeByFingerprint), arg0)
}

// InsertGuarantee mocks base method
func (m *MockCollections) InsertGuarantee(arg0 *flow.CollectionGuarantee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGuarantee", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertGuarantee indicates an expected call of InsertGuarantee
func (mr *MockCollectionsMockRecorder) InsertGuarantee(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGuarantee", reflect.TypeOf((*MockCollections)(nil).InsertGuarantee), arg0)
}

// Remove mocks base method
func (m *MockCollections) Remove(arg0 flow.Fingerprint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockCollectionsMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCollections)(nil).Remove), arg0)
}

// Save mocks base method
func (m *MockCollections) Save(arg0 *flow.Collection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockCollectionsMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCollections)(nil).Save), arg0)
}

// TransactionsByFingerprint mocks base method
func (m *MockCollections) TransactionsByFingerprint(arg0 flow.Fingerprint) ([]*flow.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionsByFingerprint", arg0)
	ret0, _ := ret[0].([]*flow.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionsByFingerprint indicates an expected call of TransactionsByFingerprint
func (mr *MockCollectionsMockRecorder) TransactionsByFingerprint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionsByFingerprint", reflect.TypeOf((*MockCollections)(nil).TransactionsByFingerprint), arg0)
}
