// Code generated by mockery v2.13.1. DO NOT EDIT.

package jobs

import (
	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	mock "github.com/stretchr/testify/mock"

	module "github.com/onflow/flow-go/module"
)

// ExecutionDataReader is an autogenerated mock type for the ExecutionDataReader type
type ExecutionDataReader struct {
	mock.Mock
}

// AddContext provides a mock function with given fields: ctx
func (_m *ExecutionDataReader) AddContext(ctx irrecoverable.SignalerContext) {
	_m.Called(ctx)
}

// AtIndex provides a mock function with given fields: height
func (_m *ExecutionDataReader) AtIndex(height uint64) (module.Job, error) {
	ret := _m.Called(height)

	var r0 module.Job
	if rf, ok := ret.Get(0).(func(uint64) module.Job); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(module.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Head provides a mock function with given fields:
func (_m *ExecutionDataReader) Head() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewExecutionDataReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewExecutionDataReader creates a new instance of ExecutionDataReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExecutionDataReader(t mockConstructorTestingTNewExecutionDataReader) *ExecutionDataReader {
	mock := &ExecutionDataReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
