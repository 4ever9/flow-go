// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import flow "github.com/dapperlabs/flow-go/model/flow"
import mock "github.com/stretchr/testify/mock"
import opentracing "github.com/opentracing/opentracing-go"

// Tracer is an autogenerated mock type for the Tracer type
type Tracer struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *Tracer) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// FinishSpan provides a mock function with given fields: entity
func (_m *Tracer) FinishSpan(entity flow.Identifier) {
	_m.Called(entity)
}

// GetSpan provides a mock function with given fields: entity
func (_m *Tracer) GetSpan(entity flow.Identifier) opentracing.Span {
	ret := _m.Called(entity)

	var r0 opentracing.Span
	if rf, ok := ret.Get(0).(func(flow.Identifier) opentracing.Span); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(opentracing.Span)
		}
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *Tracer) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// StartSpan provides a mock function with given fields: entity, spanName, opts
func (_m *Tracer) StartSpan(entity flow.Identifier, spanName string, opts ...opentracing.StartSpanOption) opentracing.Span {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, entity, spanName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 opentracing.Span
	if rf, ok := ret.Get(0).(func(flow.Identifier, string, ...opentracing.StartSpanOption) opentracing.Span); ok {
		r0 = rf(entity, spanName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(opentracing.Span)
		}
	}

	return r0
}
