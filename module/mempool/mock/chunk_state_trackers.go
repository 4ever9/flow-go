// Code generated by mockery v1.0.0. DO NOT EDIT.

package mempool

import flow "github.com/dapperlabs/flow-go/model/flow"

import mock "github.com/stretchr/testify/mock"
import tracker "github.com/dapperlabs/flow-go/model/verification/tracker"

// ChunkStateTrackers is an autogenerated mock type for the ChunkStateTrackers type
type ChunkStateTrackers struct {
	mock.Mock
}

// Add provides a mock function with given fields: cst
func (_m *ChunkStateTrackers) Add(cst *tracker.ChunkStateTracker) error {
	ret := _m.Called(cst)

	var r0 error
	if rf, ok := ret.Get(0).(func(*tracker.ChunkStateTracker) error); ok {
		r0 = rf(cst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// All provides a mock function with given fields:
func (_m *ChunkStateTrackers) All() []*tracker.ChunkStateTracker {
	ret := _m.Called()

	var r0 []*tracker.ChunkStateTracker
	if rf, ok := ret.Get(0).(func() []*tracker.ChunkStateTracker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*tracker.ChunkStateTracker)
		}
	}

	return r0
}

// ByChunkID provides a mock function with given fields: chunkID
func (_m *ChunkStateTrackers) ByChunkID(chunkID flow.Identifier) (*tracker.ChunkStateTracker, error) {
	ret := _m.Called(chunkID)

	var r0 *tracker.ChunkStateTracker
	if rf, ok := ret.Get(0).(func(flow.Identifier) *tracker.ChunkStateTracker); ok {
		r0 = rf(chunkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tracker.ChunkStateTracker)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(chunkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Has provides a mock function with given fields: chunkID
func (_m *ChunkStateTrackers) Has(chunkID flow.Identifier) bool {
	ret := _m.Called(chunkID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(chunkID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Rem provides a mock function with given fields: chunkID
func (_m *ChunkStateTrackers) Rem(chunkID flow.Identifier) bool {
	ret := _m.Called(chunkID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(chunkID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
