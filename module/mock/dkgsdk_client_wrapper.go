// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	context "context"

	cadence "github.com/onflow/cadence"

	flow "github.com/onflow/flow-go/model/flow"

	flow_go_sdk "github.com/onflow/flow-go-sdk"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// DKGSDKClientWrapper is an autogenerated mock type for the DKGSDKClientWrapper type
type DKGSDKClientWrapper struct {
	mock.Mock
}

// ExecuteScriptAtLatestBlock provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *DKGSDKClientWrapper) ExecuteScriptAtLatestBlock(_a0 context.Context, _a1 flow.Identifier, _a2 []byte, _a3 []cadence.Value, _a4 ...grpc.CallOption) (cadence.Value, error) {
	_va := make([]interface{}, len(_a4))
	for _i := range _a4 {
		_va[_i] = _a4[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2, _a3)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 cadence.Value
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier, []byte, []cadence.Value, ...grpc.CallOption) cadence.Value); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier, []byte, []cadence.Value, ...grpc.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: _a0, _a1, _a2
func (_m *DKGSDKClientWrapper) GetAccount(_a0 context.Context, _a1 flow_go_sdk.Address, _a2 ...grpc.CallOption) (*flow_go_sdk.Account, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *flow_go_sdk.Account
	if rf, ok := ret.Get(0).(func(context.Context, flow_go_sdk.Address, ...grpc.CallOption) *flow_go_sdk.Account); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow_go_sdk.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, flow_go_sdk.Address, ...grpc.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountAtLatestBlock provides a mock function with given fields: _a0, _a1, _a2
func (_m *DKGSDKClientWrapper) GetAccountAtLatestBlock(_a0 context.Context, _a1 flow_go_sdk.Address, _a2 ...grpc.CallOption) (*flow_go_sdk.Account, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *flow_go_sdk.Account
	if rf, ok := ret.Get(0).(func(context.Context, flow_go_sdk.Address, ...grpc.CallOption) *flow_go_sdk.Account); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow_go_sdk.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, flow_go_sdk.Address, ...grpc.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBlock provides a mock function with given fields: _a0, _a1, _a2
func (_m *DKGSDKClientWrapper) GetLatestBlock(_a0 context.Context, _a1 bool, _a2 ...grpc.CallOption) (*flow_go_sdk.Block, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *flow_go_sdk.Block
	if rf, ok := ret.Get(0).(func(context.Context, bool, ...grpc.CallOption) *flow_go_sdk.Block); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow_go_sdk.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool, ...grpc.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionResult provides a mock function with given fields: _a0, _a1, _a2
func (_m *DKGSDKClientWrapper) GetTransactionResult(_a0 context.Context, _a1 flow_go_sdk.Identifier, _a2 ...grpc.CallOption) (*flow_go_sdk.TransactionResult, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *flow_go_sdk.TransactionResult
	if rf, ok := ret.Get(0).(func(context.Context, flow_go_sdk.Identifier, ...grpc.CallOption) *flow_go_sdk.TransactionResult); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow_go_sdk.TransactionResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, flow_go_sdk.Identifier, ...grpc.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTransaction provides a mock function with given fields: _a0, _a1, _a2
func (_m *DKGSDKClientWrapper) SendTransaction(_a0 context.Context, _a1 flow_go_sdk.Transaction, _a2 ...grpc.CallOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, flow_go_sdk.Transaction, ...grpc.CallOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
