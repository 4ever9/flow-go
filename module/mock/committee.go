// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import flow "github.com/dapperlabs/flow-go/model/flow"
import mock "github.com/stretchr/testify/mock"

// Committee is an autogenerated mock type for the Committee type
type Committee struct {
	mock.Mock
}

// Get provides a mock function with given fields: nodeID
func (_m *Committee) Get(nodeID string) (flow.Identity, error) {
	ret := _m.Called(nodeID)

	var r0 flow.Identity
	if rf, ok := ret.Get(0).(func(string) flow.Identity); ok {
		r0 = rf(nodeID)
	} else {
		r0 = ret.Get(0).(flow.Identity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Leader provides a mock function with given fields: height
func (_m *Committee) Leader(height uint64) flow.Identity {
	ret := _m.Called(height)

	var r0 flow.Identity
	if rf, ok := ret.Get(0).(func(uint64) flow.Identity); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Get(0).(flow.Identity)
	}

	return r0
}

// Me provides a mock function with given fields:
func (_m *Committee) Me() flow.Identity {
	ret := _m.Called()

	var r0 flow.Identity
	if rf, ok := ret.Get(0).(func() flow.Identity); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(flow.Identity)
	}

	return r0
}

// Quorum provides a mock function with given fields:
func (_m *Committee) Quorum() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Select provides a mock function with given fields:
func (_m *Committee) Select() flow.IdentityList {
	ret := _m.Called()

	var r0 flow.IdentityList
	if rf, ok := ret.Get(0).(func() flow.IdentityList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.IdentityList)
		}
	}

	return r0
}
