// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import collection "github.com/dapperlabs/flow-go/model/collection"
import mock "github.com/stretchr/testify/mock"

// Mempool is an autogenerated mock type for the Mempool type
type Mempool struct {
	mock.Mock
}

// Add provides a mock function with given fields: coll
func (_m *Mempool) Add(coll *collection.GuaranteedCollection) error {
	ret := _m.Called(coll)

	var r0 error
	if rf, ok := ret.Get(0).(func(*collection.GuaranteedCollection) error); ok {
		r0 = rf(coll)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// All provides a mock function with given fields:
func (_m *Mempool) All() []*collection.GuaranteedCollection {
	ret := _m.Called()

	var r0 []*collection.GuaranteedCollection
	if rf, ok := ret.Get(0).(func() []*collection.GuaranteedCollection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*collection.GuaranteedCollection)
		}
	}

	return r0
}

// Drop provides a mock function with given fields:
func (_m *Mempool) Drop() {
	_m.Called()
}

// Get provides a mock function with given fields: hash
func (_m *Mempool) Get(hash []byte) (*collection.GuaranteedCollection, error) {
	ret := _m.Called(hash)

	var r0 *collection.GuaranteedCollection
	if rf, ok := ret.Get(0).(func([]byte) *collection.GuaranteedCollection); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collection.GuaranteedCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Has provides a mock function with given fields: hash
func (_m *Mempool) Has(hash []byte) bool {
	ret := _m.Called(hash)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Hash provides a mock function with given fields:
func (_m *Mempool) Hash() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *Mempool) Size() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}
