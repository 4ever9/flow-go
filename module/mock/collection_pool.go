// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import crypto "github.com/dapperlabs/flow-go/crypto"
import flow "github.com/dapperlabs/flow-go/model/flow"
import mock "github.com/stretchr/testify/mock"

// CollectionPool is an autogenerated mock type for the CollectionPool type
type CollectionPool struct {
	mock.Mock
}

// Add provides a mock function with given fields: coll
func (_m *CollectionPool) Add(coll *flow.GuaranteedCollection) error {
	ret := _m.Called(coll)

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.GuaranteedCollection) error); ok {
		r0 = rf(coll)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// All provides a mock function with given fields:
func (_m *CollectionPool) All() []*flow.GuaranteedCollection {
	ret := _m.Called()

	var r0 []*flow.GuaranteedCollection
	if rf, ok := ret.Get(0).(func() []*flow.GuaranteedCollection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flow.GuaranteedCollection)
		}
	}

	return r0
}

// Get provides a mock function with given fields: fp
func (_m *CollectionPool) Get(fp flow.Fingerprint) (*flow.GuaranteedCollection, error) {
	ret := _m.Called(fp)

	var r0 *flow.GuaranteedCollection
	if rf, ok := ret.Get(0).(func(flow.Fingerprint) *flow.GuaranteedCollection); ok {
		r0 = rf(fp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.GuaranteedCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Fingerprint) error); ok {
		r1 = rf(fp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Has provides a mock function with given fields: fp
func (_m *CollectionPool) Has(fp flow.Fingerprint) bool {
	ret := _m.Called(fp)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Fingerprint) bool); ok {
		r0 = rf(fp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Hash provides a mock function with given fields:
func (_m *CollectionPool) Hash() crypto.Hash {
	ret := _m.Called()

	var r0 crypto.Hash
	if rf, ok := ret.Get(0).(func() crypto.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Hash)
		}
	}

	return r0
}

// Rem provides a mock function with given fields: fp
func (_m *CollectionPool) Rem(fp flow.Fingerprint) bool {
	ret := _m.Called(fp)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Fingerprint) bool); ok {
		r0 = rf(fp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *CollectionPool) Size() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}
