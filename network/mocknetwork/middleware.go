// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocknetwork

import (
	host "github.com/libp2p/go-libp2p-core/host"
	flow "github.com/onflow/flow-go/model/flow"

	irrecoverable "github.com/onflow/flow-go/module/irrecoverable"

	message "github.com/onflow/flow-go/network/message"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"

	routing "github.com/libp2p/go-libp2p-core/routing"
)

// Middleware is an autogenerated mock type for the Middleware type
type Middleware struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *Middleware) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Host provides a mock function with given fields:
func (_m *Middleware) Host() host.Host {
	ret := _m.Called()

	var r0 host.Host
	if rf, ok := ret.Get(0).(func() host.Host); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(host.Host)
		}
	}

	return r0
}

// IsConnected provides a mock function with given fields: nodeID
func (_m *Middleware) IsConnected(nodeID flow.Identifier) (bool, error) {
	ret := _m.Called(nodeID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(flow.Identifier) bool); ok {
		r0 = rf(nodeID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: msg, channel
func (_m *Middleware) Publish(msg *message.Message, channel network.Channel) error {
	ret := _m.Called(msg, channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(*message.Message, network.Channel) error); ok {
		r0 = rf(msg, channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *Middleware) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// RoutingSystem provides a mock function with given fields:
func (_m *Middleware) RoutingSystem() routing.Routing {
	ret := _m.Called()

	var r0 routing.Routing
	if rf, ok := ret.Get(0).(func() routing.Routing); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(routing.Routing)
		}
	}

	return r0
}

// SendDirect provides a mock function with given fields: msg, targetID
func (_m *Middleware) SendDirect(msg *message.Message, targetID flow.Identifier) error {
	ret := _m.Called(msg, targetID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*message.Message, flow.Identifier) error); ok {
		r0 = rf(msg, targetID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOverlay provides a mock function with given fields: _a0
func (_m *Middleware) SetOverlay(_a0 network.Overlay) {
	_m.Called(_a0)
}

// Start provides a mock function with given fields: _a0
func (_m *Middleware) Start(_a0 irrecoverable.SignalerContext) {
	_m.Called(_a0)
}

// Subscribe provides a mock function with given fields: channel
func (_m *Middleware) Subscribe(channel network.Channel) error {
	ret := _m.Called(channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(network.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: channel
func (_m *Middleware) Unsubscribe(channel network.Channel) error {
	ret := _m.Called(channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(network.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNodeAddresses provides a mock function with given fields:
func (_m *Middleware) UpdateNodeAddresses() {
	_m.Called()
}
