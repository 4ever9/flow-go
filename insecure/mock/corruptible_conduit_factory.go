// Code generated by mockery v2.12.1. DO NOT EDIT.

package mockinsecure

import (
	insecure "github.com/onflow/flow-go/insecure"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	network "github.com/onflow/flow-go/network"

	testing "testing"
)

// CorruptibleConduitFactory is an autogenerated mock type for the CorruptibleConduitFactory type
type CorruptibleConduitFactory struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *CorruptibleConduitFactory) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Multicast provides a mock function with given fields: event, num, targetIDs
func (_m *CorruptibleConduitFactory) Multicast(event interface{}, num uint, targetIDs ...flow.Identifier) error {
	_va := make([]interface{}, len(targetIDs))
	for _i := range targetIDs {
		_va[_i] = targetIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, event, num)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint, ...flow.Identifier) error); ok {
		r0 = rf(event, num, targetIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: event, targetIDs
func (_m *CorruptibleConduitFactory) Publish(event interface{}, targetIDs ...flow.Identifier) error {
	_va := make([]interface{}, len(targetIDs))
	for _i := range targetIDs {
		_va[_i] = targetIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, event)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...flow.Identifier) error); ok {
		r0 = rf(event, targetIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendOnFlowNetwork provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *CorruptibleConduitFactory) SendOnFlowNetwork(_a0 interface{}, _a1 network.Channel, _a2 insecure.Protocol, _a3 uint, _a4 ...flow.Identifier) error {
	_va := make([]interface{}, len(_a4))
	for _i := range _a4 {
		_va[_i] = _a4[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2, _a3)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, network.Channel, insecure.Protocol, uint, ...flow.Identifier) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unicast provides a mock function with given fields: event, targetID
func (_m *CorruptibleConduitFactory) Unicast(event interface{}, targetID flow.Identifier) error {
	ret := _m.Called(event, targetID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, flow.Identifier) error); ok {
		r0 = rf(event, targetID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCorruptibleConduitFactory creates a new instance of CorruptibleConduitFactory. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCorruptibleConduitFactory(t testing.TB) *CorruptibleConduitFactory {
	mock := &CorruptibleConduitFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
