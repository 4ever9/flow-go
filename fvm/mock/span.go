// Code generated by mockery v2.13.0. DO NOT EDIT.

package mock

import (
	log "github.com/opentracing/opentracing-go/log"
	mock "github.com/stretchr/testify/mock"

	opentracing "github.com/opentracing/opentracing-go"
)

// Span is an autogenerated mock type for the Span type
type Span struct {
	mock.Mock
}

// BaggageItem provides a mock function with given fields: restrictedKey
func (_m *Span) BaggageItem(restrictedKey string) string {
	ret := _m.Called(restrictedKey)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(restrictedKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Context provides a mock function with given fields:
func (_m *Span) Context() opentracing.SpanContext {
	ret := _m.Called()

	var r0 opentracing.SpanContext
	if rf, ok := ret.Get(0).(func() opentracing.SpanContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(opentracing.SpanContext)
		}
	}

	return r0
}

// End provides a mock function with given fields:
func (_m *Span) End() {
	_m.Called()
}

// Finish provides a mock function with given fields:
func (_m *Span) Finish() {
	_m.Called()
}

// FinishWithOptions provides a mock function with given fields: opts
func (_m *Span) FinishWithOptions(opts opentracing.FinishOptions) {
	_m.Called(opts)
}

// IsNoOp provides a mock function with given fields:
func (_m *Span) IsNoOp() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Log provides a mock function with given fields: data
func (_m *Span) Log(data opentracing.LogData) {
	_m.Called(data)
}

// LogEvent provides a mock function with given fields: event
func (_m *Span) LogEvent(event string) {
	_m.Called(event)
}

// LogEventWithPayload provides a mock function with given fields: event, payload
func (_m *Span) LogEventWithPayload(event string, payload interface{}) {
	_m.Called(event, payload)
}

// LogFields provides a mock function with given fields: fields
func (_m *Span) LogFields(fields ...log.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// LogKV provides a mock function with given fields: alternatingKeyValues
func (_m *Span) LogKV(alternatingKeyValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, alternatingKeyValues...)
	_m.Called(_ca...)
}

// SetBaggageItem provides a mock function with given fields: restrictedKey, value
func (_m *Span) SetBaggageItem(restrictedKey string, value string) opentracing.Span {
	ret := _m.Called(restrictedKey, value)

	var r0 opentracing.Span
	if rf, ok := ret.Get(0).(func(string, string) opentracing.Span); ok {
		r0 = rf(restrictedKey, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(opentracing.Span)
		}
	}

	return r0
}

// SetOperationName provides a mock function with given fields: operationName
func (_m *Span) SetOperationName(operationName string) opentracing.Span {
	ret := _m.Called(operationName)

	var r0 opentracing.Span
	if rf, ok := ret.Get(0).(func(string) opentracing.Span); ok {
		r0 = rf(operationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(opentracing.Span)
		}
	}

	return r0
}

// SetTag provides a mock function with given fields: key, value
func (_m *Span) SetTag(key string, value interface{}) opentracing.Span {
	ret := _m.Called(key, value)

	var r0 opentracing.Span
	if rf, ok := ret.Get(0).(func(string, interface{}) opentracing.Span); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(opentracing.Span)
		}
	}

	return r0
}

// Tracer provides a mock function with given fields:
func (_m *Span) Tracer() opentracing.Tracer {
	ret := _m.Called()

	var r0 opentracing.Tracer
	if rf, ok := ret.Get(0).(func() opentracing.Tracer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(opentracing.Tracer)
		}
	}

	return r0
}

type NewSpanT interface {
	mock.TestingT
	Cleanup(func())
}

// NewSpan creates a new instance of Span. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSpan(t NewSpanT) *Span {
	mock := &Span{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
