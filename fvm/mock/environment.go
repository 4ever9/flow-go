// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import ast "github.com/onflow/cadence/runtime/ast"
import cadence "github.com/onflow/cadence"
import common "github.com/onflow/cadence/runtime/common"
import flow "github.com/dapperlabs/flow-go/model/flow"
import fvm "github.com/dapperlabs/flow-go/fvm"
import mock "github.com/stretchr/testify/mock"
import runtime "github.com/onflow/cadence/runtime"

// Environment is an autogenerated mock type for the Environment type
type Environment struct {
	mock.Mock
}

// AddAccountKey provides a mock function with given fields: address, publicKey
func (_m *Environment) AddAccountKey(address common.Address, publicKey []byte) error {
	ret := _m.Called(address, publicKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Address, []byte) error); ok {
		r0 = rf(address, publicKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheProgram provides a mock function with given fields: _a0, _a1
func (_m *Environment) CacheProgram(_a0 ast.Location, _a1 *ast.Program) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(ast.Location, *ast.Program) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccount provides a mock function with given fields: payer
func (_m *Environment) CreateAccount(payer common.Address) (common.Address, error) {
	ret := _m.Called(payer)

	var r0 common.Address
	if rf, ok := ret.Get(0).(func(common.Address) common.Address); ok {
		r0 = rf(payer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(payer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodeArgument provides a mock function with given fields: argument, argumentType
func (_m *Environment) DecodeArgument(argument []byte, argumentType cadence.Type) (cadence.Value, error) {
	ret := _m.Called(argument, argumentType)

	var r0 cadence.Value
	if rf, ok := ret.Get(0).(func([]byte, cadence.Type) cadence.Value); ok {
		r0 = rf(argument, argumentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, cadence.Type) error); ok {
		r1 = rf(argument, argumentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmitEvent provides a mock function with given fields: _a0
func (_m *Environment) EmitEvent(_a0 cadence.Event) {
	_m.Called(_a0)
}

// ForTransaction provides a mock function with given fields: tx, txCtx
func (_m *Environment) ForTransaction(tx *flow.TransactionBody, txCtx fvm.Context) fvm.Environment {
	ret := _m.Called(tx, txCtx)

	var r0 fvm.Environment
	if rf, ok := ret.Get(0).(func(*flow.TransactionBody, fvm.Context) fvm.Environment); ok {
		r0 = rf(tx, txCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fvm.Environment)
		}
	}

	return r0
}

// GenerateUUID provides a mock function with given fields:
func (_m *Environment) GenerateUUID() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetBlockAtHeight provides a mock function with given fields: height
func (_m *Environment) GetBlockAtHeight(height uint64) (runtime.BlockHash, int64, bool, error) {
	ret := _m.Called(height)

	var r0 runtime.BlockHash
	if rf, ok := ret.Get(0).(func(uint64) runtime.BlockHash); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.BlockHash)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(uint64) int64); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(uint64) bool); ok {
		r2 = rf(height)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(uint64) error); ok {
		r3 = rf(height)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetCachedProgram provides a mock function with given fields: _a0
func (_m *Environment) GetCachedProgram(_a0 ast.Location) (*ast.Program, error) {
	ret := _m.Called(_a0)

	var r0 *ast.Program
	if rf, ok := ret.Get(0).(func(ast.Location) *ast.Program); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ast.Program)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ast.Location) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComputationLimit provides a mock function with given fields:
func (_m *Environment) GetComputationLimit() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetCurrentBlockHeight provides a mock function with given fields:
func (_m *Environment) GetCurrentBlockHeight() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetSigningAccounts provides a mock function with given fields:
func (_m *Environment) GetSigningAccounts() []common.Address {
	ret := _m.Called()

	var r0 []common.Address
	if rf, ok := ret.Get(0).(func() []common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	return r0
}

// GetValue provides a mock function with given fields: owner, controller, key
func (_m *Environment) GetValue(owner []byte, controller []byte, key []byte) ([]byte, error) {
	ret := _m.Called(owner, controller, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, []byte, []byte) []byte); ok {
		r0 = rf(owner, controller, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, []byte, []byte) error); ok {
		r1 = rf(owner, controller, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Log provides a mock function with given fields: _a0
func (_m *Environment) Log(_a0 string) {
	_m.Called(_a0)
}

// RemoveAccountKey provides a mock function with given fields: address, index
func (_m *Environment) RemoveAccountKey(address common.Address, index int) ([]byte, error) {
	ret := _m.Called(address, index)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(common.Address, int) []byte); ok {
		r0 = rf(address, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, int) error); ok {
		r1 = rf(address, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveImport provides a mock function with given fields: _a0
func (_m *Environment) ResolveImport(_a0 ast.Location) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(ast.Location) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ast.Location) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetValue provides a mock function with given fields: owner, controller, key, value
func (_m *Environment) SetValue(owner []byte, controller []byte, key []byte, value []byte) error {
	ret := _m.Called(owner, controller, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte, []byte, []byte) error); ok {
		r0 = rf(owner, controller, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountCode provides a mock function with given fields: address, code
func (_m *Environment) UpdateAccountCode(address common.Address, code []byte) error {
	ret := _m.Called(address, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Address, []byte) error); ok {
		r0 = rf(address, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValueExists provides a mock function with given fields: owner, controller, key
func (_m *Environment) ValueExists(owner []byte, controller []byte, key []byte) (bool, error) {
	ret := _m.Called(owner, controller, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, []byte, []byte) bool); ok {
		r0 = rf(owner, controller, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, []byte, []byte) error); ok {
		r1 = rf(owner, controller, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithBlockHeader provides a mock function with given fields: header
func (_m *Environment) WithBlockHeader(header *flow.Header) fvm.Environment {
	ret := _m.Called(header)

	var r0 fvm.Environment
	if rf, ok := ret.Get(0).(func(*flow.Header) fvm.Environment); ok {
		r0 = rf(header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fvm.Environment)
		}
	}

	return r0
}

// getEvents provides a mock function with given fields:
func (_m *Environment) getEvents() []cadence.Event {
	ret := _m.Called()

	var r0 []cadence.Event
	if rf, ok := ret.Get(0).(func() []cadence.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cadence.Event)
		}
	}

	return r0
}

// getLogs provides a mock function with given fields:
func (_m *Environment) getLogs() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}
