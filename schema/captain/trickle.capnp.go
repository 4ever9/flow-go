// Code generated by capnpc-go. DO NOT EDIT.

package captain

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Auth struct{ capnp.Struct }

// Auth_TypeID is the unique identifier for the type Auth.
const Auth_TypeID = 0xd8cdf7e707cbaf27

func NewAuth(s *capnp.Segment) (Auth, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Auth{st}, err
}

func NewRootAuth(s *capnp.Segment) (Auth, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Auth{st}, err
}

func ReadRootAuth(msg *capnp.Message) (Auth, error) {
	root, err := msg.RootPtr()
	return Auth{root.Struct()}, err
}

func (s Auth) String() string {
	str, _ := text.Marshal(0xd8cdf7e707cbaf27, s.Struct)
	return str
}

func (s Auth) NodeId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Auth) HasNodeId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Auth) NodeIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Auth) SetNodeId(v string) error {
	return s.Struct.SetText(0, v)
}

// Auth_List is a list of Auth.
type Auth_List struct{ capnp.List }

// NewAuth creates a new list of Auth.
func NewAuth_List(s *capnp.Segment, sz int32) (Auth_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Auth_List{l}, err
}

func (s Auth_List) At(i int) Auth { return Auth{s.List.Struct(i)} }

func (s Auth_List) Set(i int, v Auth) error { return s.List.SetStruct(i, v.Struct) }

func (s Auth_List) String() string {
	str, _ := text.MarshalList(0xd8cdf7e707cbaf27, s.List)
	return str
}

// Auth_Promise is a wrapper for a Auth promised by a client call.
type Auth_Promise struct{ *capnp.Pipeline }

func (p Auth_Promise) Struct() (Auth, error) {
	s, err := p.Pipeline.Struct()
	return Auth{s}, err
}

type Ping struct{ capnp.Struct }

// Ping_TypeID is the unique identifier for the type Ping.
const Ping_TypeID = 0x8b3b5f400419ca82

func NewPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Ping{st}, err
}

func NewRootPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Ping{st}, err
}

func ReadRootPing(msg *capnp.Message) (Ping, error) {
	root, err := msg.RootPtr()
	return Ping{root.Struct()}, err
}

func (s Ping) String() string {
	str, _ := text.Marshal(0x8b3b5f400419ca82, s.Struct)
	return str
}

func (s Ping) Nonce() uint32 {
	return s.Struct.Uint32(0)
}

func (s Ping) SetNonce(v uint32) {
	s.Struct.SetUint32(0, v)
}

// Ping_List is a list of Ping.
type Ping_List struct{ capnp.List }

// NewPing creates a new list of Ping.
func NewPing_List(s *capnp.Segment, sz int32) (Ping_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Ping_List{l}, err
}

func (s Ping_List) At(i int) Ping { return Ping{s.List.Struct(i)} }

func (s Ping_List) Set(i int, v Ping) error { return s.List.SetStruct(i, v.Struct) }

func (s Ping_List) String() string {
	str, _ := text.MarshalList(0x8b3b5f400419ca82, s.List)
	return str
}

// Ping_Promise is a wrapper for a Ping promised by a client call.
type Ping_Promise struct{ *capnp.Pipeline }

func (p Ping_Promise) Struct() (Ping, error) {
	s, err := p.Pipeline.Struct()
	return Ping{s}, err
}

type Pong struct{ capnp.Struct }

// Pong_TypeID is the unique identifier for the type Pong.
const Pong_TypeID = 0xc10601ff09f32611

func NewPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Pong{st}, err
}

func NewRootPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Pong{st}, err
}

func ReadRootPong(msg *capnp.Message) (Pong, error) {
	root, err := msg.RootPtr()
	return Pong{root.Struct()}, err
}

func (s Pong) String() string {
	str, _ := text.Marshal(0xc10601ff09f32611, s.Struct)
	return str
}

func (s Pong) Nonce() uint32 {
	return s.Struct.Uint32(0)
}

func (s Pong) SetNonce(v uint32) {
	s.Struct.SetUint32(0, v)
}

// Pong_List is a list of Pong.
type Pong_List struct{ capnp.List }

// NewPong creates a new list of Pong.
func NewPong_List(s *capnp.Segment, sz int32) (Pong_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Pong_List{l}, err
}

func (s Pong_List) At(i int) Pong { return Pong{s.List.Struct(i)} }

func (s Pong_List) Set(i int, v Pong) error { return s.List.SetStruct(i, v.Struct) }

func (s Pong_List) String() string {
	str, _ := text.MarshalList(0xc10601ff09f32611, s.List)
	return str
}

// Pong_Promise is a wrapper for a Pong promised by a client call.
type Pong_Promise struct{ *capnp.Pipeline }

func (p Pong_Promise) Struct() (Pong, error) {
	s, err := p.Pipeline.Struct()
	return Pong{s}, err
}

type Announce struct{ capnp.Struct }

// Announce_TypeID is the unique identifier for the type Announce.
const Announce_TypeID = 0xda6b658bc18baf1d

func NewAnnounce(s *capnp.Segment) (Announce, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Announce{st}, err
}

func NewRootAnnounce(s *capnp.Segment) (Announce, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Announce{st}, err
}

func ReadRootAnnounce(msg *capnp.Message) (Announce, error) {
	root, err := msg.RootPtr()
	return Announce{root.Struct()}, err
}

func (s Announce) String() string {
	str, _ := text.Marshal(0xda6b658bc18baf1d, s.Struct)
	return str
}

func (s Announce) EngineId() uint8 {
	return s.Struct.Uint8(0)
}

func (s Announce) SetEngineId(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Announce) EventId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Announce) HasEventId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Announce) SetEventId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Announce_List is a list of Announce.
type Announce_List struct{ capnp.List }

// NewAnnounce creates a new list of Announce.
func NewAnnounce_List(s *capnp.Segment, sz int32) (Announce_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Announce_List{l}, err
}

func (s Announce_List) At(i int) Announce { return Announce{s.List.Struct(i)} }

func (s Announce_List) Set(i int, v Announce) error { return s.List.SetStruct(i, v.Struct) }

func (s Announce_List) String() string {
	str, _ := text.MarshalList(0xda6b658bc18baf1d, s.List)
	return str
}

// Announce_Promise is a wrapper for a Announce promised by a client call.
type Announce_Promise struct{ *capnp.Pipeline }

func (p Announce_Promise) Struct() (Announce, error) {
	s, err := p.Pipeline.Struct()
	return Announce{s}, err
}

type Request struct{ capnp.Struct }

// Request_TypeID is the unique identifier for the type Request.
const Request_TypeID = 0xe526bff04d4ce1e9

func NewRequest(s *capnp.Segment) (Request, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Request{st}, err
}

func NewRootRequest(s *capnp.Segment) (Request, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Request{st}, err
}

func ReadRootRequest(msg *capnp.Message) (Request, error) {
	root, err := msg.RootPtr()
	return Request{root.Struct()}, err
}

func (s Request) String() string {
	str, _ := text.Marshal(0xe526bff04d4ce1e9, s.Struct)
	return str
}

func (s Request) EngineId() uint8 {
	return s.Struct.Uint8(0)
}

func (s Request) SetEngineId(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Request) EventId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Request) HasEventId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetEventId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Request_List is a list of Request.
type Request_List struct{ capnp.List }

// NewRequest creates a new list of Request.
func NewRequest_List(s *capnp.Segment, sz int32) (Request_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Request_List{l}, err
}

func (s Request_List) At(i int) Request { return Request{s.List.Struct(i)} }

func (s Request_List) Set(i int, v Request) error { return s.List.SetStruct(i, v.Struct) }

func (s Request_List) String() string {
	str, _ := text.MarshalList(0xe526bff04d4ce1e9, s.List)
	return str
}

// Request_Promise is a wrapper for a Request promised by a client call.
type Request_Promise struct{ *capnp.Pipeline }

func (p Request_Promise) Struct() (Request, error) {
	s, err := p.Pipeline.Struct()
	return Request{s}, err
}

type Response struct{ capnp.Struct }

// Response_TypeID is the unique identifier for the type Response.
const Response_TypeID = 0xe06f2535c7dfe01b

func NewResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Response{st}, err
}

func NewRootResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Response{st}, err
}

func ReadRootResponse(msg *capnp.Message) (Response, error) {
	root, err := msg.RootPtr()
	return Response{root.Struct()}, err
}

func (s Response) String() string {
	str, _ := text.Marshal(0xe06f2535c7dfe01b, s.Struct)
	return str
}

func (s Response) EngineId() uint8 {
	return s.Struct.Uint8(0)
}

func (s Response) SetEngineId(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Response) EventId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Response) HasEventId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetEventId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Response) OriginId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Response) HasOriginId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Response) OriginIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Response) SetOriginId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Response) TargetIds() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s Response) HasTargetIds() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Response) SetTargetIds(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewTargetIds sets the targetIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Response) NewTargetIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Response) Payload() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Response) HasPayload() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Response) SetPayload(v []byte) error {
	return s.Struct.SetData(3, v)
}

// Response_List is a list of Response.
type Response_List struct{ capnp.List }

// NewResponse creates a new list of Response.
func NewResponse_List(s *capnp.Segment, sz int32) (Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Response_List{l}, err
}

func (s Response_List) At(i int) Response { return Response{s.List.Struct(i)} }

func (s Response_List) Set(i int, v Response) error { return s.List.SetStruct(i, v.Struct) }

func (s Response_List) String() string {
	str, _ := text.MarshalList(0xe06f2535c7dfe01b, s.List)
	return str
}

// Response_Promise is a wrapper for a Response promised by a client call.
type Response_Promise struct{ *capnp.Pipeline }

func (p Response_Promise) Struct() (Response, error) {
	s, err := p.Pipeline.Struct()
	return Response{s}, err
}

const schema_f71cc0af2f870b3c = "x\xda\xac\x90?h\x13Q\x1c\xc7\xbf\xdf\xf7\xde]S" +
	"l\x02\xc7\xdd\"*\x9d\xac\x0a\xa2V-h\xb5\xa4\xba" +
	"E\x14\xf2\xba9\x88\x84\xdc#\x86\x96w1\x7f,\x82" +
	"\xa5*\x14+qPp\xca\"\x82\x0e\x05!\xe2\xd8E" +
	";\x09\x8a\x8b\x93\xb8X\x07\x117\xd1\xa1\xe3\xc9]!" +
	"\x954\x88\xa0\xdb\x8f\xbb\xcf\xf7\xfby\xbf\xdf\x91\x1f\x9c" +
	"\x16\xe3\xce\xa3\x0c\xa0C\xc7\x8do\xbf\xd9\xa9\xa6/\x9f" +
	"jC\xe7\xc8\xf8\xf4\x8e;\x87\xbb\xafvo@\x0d\x01" +
	"\xfe\x84\xea\xf8S\xe9tR\xe5\xc1\xd8\x1b\xfb9\x1c\xd3" +
	"]\x1b\xc4^T\x1d\xbf\x94N\x97Rv_\xf7\xed\xd0" +
	"\xd7\x8dw\x1f\xe0\xe5~C\x1d&\xc4\x82\xea\xf8K)" +
	"{+e\xf7t\xdbkm3\xfb\xb1\xafw\x13~\xac" +
	"V\xfd\x95\x14~\xaa\xe6\xc1x\xd7\xfa\xa7\xd7\x13{\xa3" +
	"\xf5~8E\x1cg\xd5\xcf:C\xc0\xb1ag\x94`" +
	"\xfc\xed\xf3\xf9\x0b\xdf_\x8e}\x19X=\xe1\xbe\xf0\xa7" +
	"\xdct?w\x1e\xef\xe3f\xbdZ\x9e\x9d3\x87X." +
	"\xd5lm\xb2X\x95\xb6R$\xb5\x92\x0aP\x04\xbc\xec" +
	"Q@g$u 8j#[6\xcc@0\x03n" +
	"\x0bG\xff\x10>\xd3\x92\xcd+}\xe1\xc9\xadp\xdeF" +
	"\xa1)\x84\x1c\x81\xe0\xc8\x80\xb4\xcd\xdb\xa8e\xcb&i" +
	"\xc8\xf4\x1a\x0e\x9c\x03\xf4~I}\\\x90\x0c\x98|\x1b" +
	"?\x0b\xe8\x83\x92\xfa\x84`ll\xa5jM!\x04@" +
	"\x17\x82.\xb8h\xae\x19\xdb,\x84\xccB0\xbb]5" +
	"c\xf2\x8dZd\x1b\xa9*\xe8\xa9\x16\x12\xd5\x0dI\xbd" +
	"\xbc\xa5ZJT7%\xf5=AO0\xa0\x00\xbc\xbb" +
	"\x09\xb8,\xa9\x1f\x0azR\x04\x94\x80\xf7`\x06\xd0\xf7" +
	"%\xf53AO\xc9\x80\x0a\xf0V\x92\xf8\x13I\xfd\xfc" +
	"/_\x1a\xd5\xab\x95\xaa\xdddz\x87*\xd5+\xa6Y" +
	"\x08\xc1\x06s`Q2\xfd\x95\x03\x17k\xa5\xebsQ" +
	"\xe9\x0f\x8b\x8e^m\x99F\xf3\xff\x9f\xf4W\x00\x00\x00" +
	"\xff\xff/\x88\xc9\xe8"

func init() {
	schemas.Register(schema_f71cc0af2f870b3c,
		0x8b3b5f400419ca82,
		0xc10601ff09f32611,
		0xd8cdf7e707cbaf27,
		0xda6b658bc18baf1d,
		0xe06f2535c7dfe01b,
		0xe526bff04d4ce1e9)
}
