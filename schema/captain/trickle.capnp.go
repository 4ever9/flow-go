// Code generated by capnpc-go. DO NOT EDIT.

package captain

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Auth struct{ capnp.Struct }

// Auth_TypeID is the unique identifier for the type Auth.
const Auth_TypeID = 0xd8cdf7e707cbaf27

func NewAuth(s *capnp.Segment) (Auth, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Auth{st}, err
}

func NewRootAuth(s *capnp.Segment) (Auth, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Auth{st}, err
}

func ReadRootAuth(msg *capnp.Message) (Auth, error) {
	root, err := msg.RootPtr()
	return Auth{root.Struct()}, err
}

func (s Auth) String() string {
	str, _ := text.Marshal(0xd8cdf7e707cbaf27, s.Struct)
	return str
}

func (s Auth) NodeId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Auth) HasNodeId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Auth) SetNodeId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Auth_List is a list of Auth.
type Auth_List struct{ capnp.List }

// NewAuth creates a new list of Auth.
func NewAuth_List(s *capnp.Segment, sz int32) (Auth_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Auth_List{l}, err
}

func (s Auth_List) At(i int) Auth { return Auth{s.List.Struct(i)} }

func (s Auth_List) Set(i int, v Auth) error { return s.List.SetStruct(i, v.Struct) }

func (s Auth_List) String() string {
	str, _ := text.MarshalList(0xd8cdf7e707cbaf27, s.List)
	return str
}

// Auth_Promise is a wrapper for a Auth promised by a client call.
type Auth_Promise struct{ *capnp.Pipeline }

func (p Auth_Promise) Struct() (Auth, error) {
	s, err := p.Pipeline.Struct()
	return Auth{s}, err
}

type Ping struct{ capnp.Struct }

// Ping_TypeID is the unique identifier for the type Ping.
const Ping_TypeID = 0x8b3b5f400419ca82

func NewPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Ping{st}, err
}

func NewRootPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Ping{st}, err
}

func ReadRootPing(msg *capnp.Message) (Ping, error) {
	root, err := msg.RootPtr()
	return Ping{root.Struct()}, err
}

func (s Ping) String() string {
	str, _ := text.Marshal(0x8b3b5f400419ca82, s.Struct)
	return str
}

func (s Ping) Nonce() uint32 {
	return s.Struct.Uint32(0)
}

func (s Ping) SetNonce(v uint32) {
	s.Struct.SetUint32(0, v)
}

// Ping_List is a list of Ping.
type Ping_List struct{ capnp.List }

// NewPing creates a new list of Ping.
func NewPing_List(s *capnp.Segment, sz int32) (Ping_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Ping_List{l}, err
}

func (s Ping_List) At(i int) Ping { return Ping{s.List.Struct(i)} }

func (s Ping_List) Set(i int, v Ping) error { return s.List.SetStruct(i, v.Struct) }

func (s Ping_List) String() string {
	str, _ := text.MarshalList(0x8b3b5f400419ca82, s.List)
	return str
}

// Ping_Promise is a wrapper for a Ping promised by a client call.
type Ping_Promise struct{ *capnp.Pipeline }

func (p Ping_Promise) Struct() (Ping, error) {
	s, err := p.Pipeline.Struct()
	return Ping{s}, err
}

type Pong struct{ capnp.Struct }

// Pong_TypeID is the unique identifier for the type Pong.
const Pong_TypeID = 0xc10601ff09f32611

func NewPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Pong{st}, err
}

func NewRootPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Pong{st}, err
}

func ReadRootPong(msg *capnp.Message) (Pong, error) {
	root, err := msg.RootPtr()
	return Pong{root.Struct()}, err
}

func (s Pong) String() string {
	str, _ := text.Marshal(0xc10601ff09f32611, s.Struct)
	return str
}

func (s Pong) Nonce() uint32 {
	return s.Struct.Uint32(0)
}

func (s Pong) SetNonce(v uint32) {
	s.Struct.SetUint32(0, v)
}

// Pong_List is a list of Pong.
type Pong_List struct{ capnp.List }

// NewPong creates a new list of Pong.
func NewPong_List(s *capnp.Segment, sz int32) (Pong_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Pong_List{l}, err
}

func (s Pong_List) At(i int) Pong { return Pong{s.List.Struct(i)} }

func (s Pong_List) Set(i int, v Pong) error { return s.List.SetStruct(i, v.Struct) }

func (s Pong_List) String() string {
	str, _ := text.MarshalList(0xc10601ff09f32611, s.List)
	return str
}

// Pong_Promise is a wrapper for a Pong promised by a client call.
type Pong_Promise struct{ *capnp.Pipeline }

func (p Pong_Promise) Struct() (Pong, error) {
	s, err := p.Pipeline.Struct()
	return Pong{s}, err
}

type Announce struct{ capnp.Struct }

// Announce_TypeID is the unique identifier for the type Announce.
const Announce_TypeID = 0xda6b658bc18baf1d

func NewAnnounce(s *capnp.Segment) (Announce, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Announce{st}, err
}

func NewRootAnnounce(s *capnp.Segment) (Announce, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Announce{st}, err
}

func ReadRootAnnounce(msg *capnp.Message) (Announce, error) {
	root, err := msg.RootPtr()
	return Announce{root.Struct()}, err
}

func (s Announce) String() string {
	str, _ := text.Marshal(0xda6b658bc18baf1d, s.Struct)
	return str
}

func (s Announce) EngineId() uint8 {
	return s.Struct.Uint8(0)
}

func (s Announce) SetEngineId(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Announce) EventId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Announce) HasEventId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Announce) SetEventId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Announce_List is a list of Announce.
type Announce_List struct{ capnp.List }

// NewAnnounce creates a new list of Announce.
func NewAnnounce_List(s *capnp.Segment, sz int32) (Announce_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Announce_List{l}, err
}

func (s Announce_List) At(i int) Announce { return Announce{s.List.Struct(i)} }

func (s Announce_List) Set(i int, v Announce) error { return s.List.SetStruct(i, v.Struct) }

func (s Announce_List) String() string {
	str, _ := text.MarshalList(0xda6b658bc18baf1d, s.List)
	return str
}

// Announce_Promise is a wrapper for a Announce promised by a client call.
type Announce_Promise struct{ *capnp.Pipeline }

func (p Announce_Promise) Struct() (Announce, error) {
	s, err := p.Pipeline.Struct()
	return Announce{s}, err
}

type Request struct{ capnp.Struct }

// Request_TypeID is the unique identifier for the type Request.
const Request_TypeID = 0xe526bff04d4ce1e9

func NewRequest(s *capnp.Segment) (Request, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Request{st}, err
}

func NewRootRequest(s *capnp.Segment) (Request, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Request{st}, err
}

func ReadRootRequest(msg *capnp.Message) (Request, error) {
	root, err := msg.RootPtr()
	return Request{root.Struct()}, err
}

func (s Request) String() string {
	str, _ := text.Marshal(0xe526bff04d4ce1e9, s.Struct)
	return str
}

func (s Request) EngineId() uint8 {
	return s.Struct.Uint8(0)
}

func (s Request) SetEngineId(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Request) EventId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Request) HasEventId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetEventId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Request_List is a list of Request.
type Request_List struct{ capnp.List }

// NewRequest creates a new list of Request.
func NewRequest_List(s *capnp.Segment, sz int32) (Request_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Request_List{l}, err
}

func (s Request_List) At(i int) Request { return Request{s.List.Struct(i)} }

func (s Request_List) Set(i int, v Request) error { return s.List.SetStruct(i, v.Struct) }

func (s Request_List) String() string {
	str, _ := text.MarshalList(0xe526bff04d4ce1e9, s.List)
	return str
}

// Request_Promise is a wrapper for a Request promised by a client call.
type Request_Promise struct{ *capnp.Pipeline }

func (p Request_Promise) Struct() (Request, error) {
	s, err := p.Pipeline.Struct()
	return Request{s}, err
}

type Response struct{ capnp.Struct }

// Response_TypeID is the unique identifier for the type Response.
const Response_TypeID = 0xe06f2535c7dfe01b

func NewResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Response{st}, err
}

func NewRootResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Response{st}, err
}

func ReadRootResponse(msg *capnp.Message) (Response, error) {
	root, err := msg.RootPtr()
	return Response{root.Struct()}, err
}

func (s Response) String() string {
	str, _ := text.Marshal(0xe06f2535c7dfe01b, s.Struct)
	return str
}

func (s Response) EngineId() uint8 {
	return s.Struct.Uint8(0)
}

func (s Response) SetEngineId(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Response) EventId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Response) HasEventId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetEventId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Response) OriginId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Response) HasOriginId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Response) SetOriginId(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Response) TargetIds() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.DataList{List: p.List()}, err
}

func (s Response) HasTargetIds() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Response) SetTargetIds(v capnp.DataList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewTargetIds sets the targetIds field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Response) NewTargetIds(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Response) Payload() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Response) HasPayload() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Response) SetPayload(v []byte) error {
	return s.Struct.SetData(3, v)
}

// Response_List is a list of Response.
type Response_List struct{ capnp.List }

// NewResponse creates a new list of Response.
func NewResponse_List(s *capnp.Segment, sz int32) (Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Response_List{l}, err
}

func (s Response_List) At(i int) Response { return Response{s.List.Struct(i)} }

func (s Response_List) Set(i int, v Response) error { return s.List.SetStruct(i, v.Struct) }

func (s Response_List) String() string {
	str, _ := text.MarshalList(0xe06f2535c7dfe01b, s.List)
	return str
}

// Response_Promise is a wrapper for a Response promised by a client call.
type Response_Promise struct{ *capnp.Pipeline }

func (p Response_Promise) Struct() (Response, error) {
	s, err := p.Pipeline.Struct()
	return Response{s}, err
}

const schema_f71cc0af2f870b3c = "x\xda\xac\x90\xcfk\x13A\x14\xc7\xdfwf6I\x91" +
	"T\xb6\xbb\x1e\x8a\x86\x9c\xac?\x10c\xab\x05\xa9B[" +
	"\xc1CD!\xd3\x937Y6C\xba\xb4\xce\xc6\xec\xc6" +
	"\"(\x15A\xac\xc4\x83\x82\xe0Y\xf0\"(1\x7f\x80" +
	"hN\x82\xe2]\x85b=\x14\xc9A\x10<\xf4\xb82" +
	"[l%\x14\x9aCo\xcb\xdb\xcf\xfb|\xde\xee\xa9U" +
	"\xcc\xb0q\xebY\x96H^\xb52\xc9\xbd\x8f\xa3b\xe6" +
	"\xda\xb9\x16\xc9\x02\x90\x9c\xdf\xf7\xa0\xd4~\x7fh\x83D" +
	"\x96\xe8t\x87\x8f\xc0\xe9\xf2,\x91\xf3\x96O\x13\x12{" +
	"\xec\xcfP\x82Lw'x\xd5\xc0\xbfR\xb8\x97\xc2G" +
	"\xda\x9f\xb2?7>\x7f!\xbb\xf0\x1fk\xc1\xc0Cb" +
	"\x04\xce\xa8\xd9s\x0e\x08\x03\x17\xda\xadnK-|\xeb" +
	"3o\xd2\x93b\x02\xce\xc5\x94\x9e\x15K\x84\xe4\xe0\xda" +
	"\xf7\x0f\x93\x87\xc3\xb5~:=\xe4\xb9\xa1;\xe9\xe3k" +
	"Q\x04!\xe9\xfd\xb8|\xe5\xf7\xbb\xb1\xf5\x1d\xe5_\xad" +
	"\xe3pz\x96\x91\xaf[K\xd4I\"\x7f^]\xf7J" +
	">\xf7\xea\xb1\x17\xe8R\xdc\x08\xfc\x85Eu\xd2\xf7\xea" +
	"\xba>U\x094j\x15@\x0a.\x88\x04\x88\xec\xfc\x04" +
	"\x91\xccqH\x97\xa1\xa8C\xed+\xe4\x88!G\xd8\xcd" +
	"\x15\xee\x9dk\xb6\x19c\xbe\xcf5\xb5\xed\x9a\xd6aU" +
	"\x95\xab\xc8\x13C~w\x99\xd6\xc5\xb0\xa9}e\x84\xb9" +
	"-\xe1\xb1KD\xf2(\x87<\xc3\x00\xb80\xb3\xf1\x0b" +
	"D\xf2\x04\x87<\xcb\x90(]\x0b\xb4*W\x89\x08\x19" +
	"b\xc8\x10\x96\xd5M\xa5\xe3\x81\xcbs**\xd6C\x1d" +
	"\xa5ew\xab|\xc7\x94os\xc8\x95\xed\xf2}S\xbe" +
	"\xcb!\x1f1\xd8\x0c.\x18\x91\xfd\xd0\x80+\x1c\xf2)" +
	"\x83\xcd\x99\x0bNd?\x99#\x92\x8f9\xe4+\x06[" +
	"p\x17\x82\xc8~i\xd6_p\xc87\x03\x1e\x1e6\x82" +
	"Z\xa07\x99\x7f\xb3\xd8k\xd4T\\\xae\x12\"\x0c\x13" +
	"*\x1c\xe9\xaba\xc2r\xdd\xbb\xb5\x18z\x83\x7f\xf7\x8d" +
	"\xfdM\x15\xc5{\xff\xc3\xff\x06\x00\x00\xff\xffDR\xed" +
	"\xd6"

func init() {
	schemas.Register(schema_f71cc0af2f870b3c,
		0x8b3b5f400419ca82,
		0xc10601ff09f32611,
		0xd8cdf7e707cbaf27,
		0xda6b658bc18baf1d,
		0xe06f2535c7dfe01b,
		0xe526bff04d4ce1e9)
}
