// Code generated by capnpc-go. DO NOT EDIT.

package captain

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Message struct{ capnp.Struct }
type Message_Which uint16

const (
	Message_Which_auth                 Message_Which = 0
	Message_Which_ping                 Message_Which = 1
	Message_Which_pong                 Message_Which = 2
	Message_Which_announce             Message_Which = 3
	Message_Which_request              Message_Which = 4
	Message_Which_response             Message_Which = 5
	Message_Which_guaranteedCollection Message_Which = 6
	Message_Which_snapshotRequest      Message_Which = 7
	Message_Which_snapshotResponse     Message_Which = 8
	Message_Which_mempoolRequest       Message_Which = 9
	Message_Which_mempoolResponse      Message_Which = 10
	Message_Which_blockProposal        Message_Which = 11
	Message_Which_blockVote            Message_Which = 12
	Message_Which_blockCommit          Message_Which = 13
)

func (w Message_Which) String() string {
	const s = "authpingpongannouncerequestresponseguaranteedCollectionsnapshotRequestsnapshotResponsemempoolRequestmempoolResponseblockProposalblockVoteblockCommit"
	switch w {
	case Message_Which_auth:
		return s[0:4]
	case Message_Which_ping:
		return s[4:8]
	case Message_Which_pong:
		return s[8:12]
	case Message_Which_announce:
		return s[12:20]
	case Message_Which_request:
		return s[20:27]
	case Message_Which_response:
		return s[27:35]
	case Message_Which_guaranteedCollection:
		return s[35:55]
	case Message_Which_snapshotRequest:
		return s[55:70]
	case Message_Which_snapshotResponse:
		return s[70:86]
	case Message_Which_mempoolRequest:
		return s[86:100]
	case Message_Which_mempoolResponse:
		return s[100:115]
	case Message_Which_blockProposal:
		return s[115:128]
	case Message_Which_blockVote:
		return s[128:137]
	case Message_Which_blockCommit:
		return s[137:148]

	}
	return "Message_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xaf7a8da44e30bf62

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message{st}, err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message{st}, err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.RootPtr()
	return Message{root.Struct()}, err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xaf7a8da44e30bf62, s.Struct)
	return str
}

func (s Message) Which() Message_Which {
	return Message_Which(s.Struct.Uint16(0))
}
func (s Message) Auth() (Auth, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != auth")
	}
	p, err := s.Struct.Ptr(0)
	return Auth{Struct: p.Struct()}, err
}

func (s Message) HasAuth() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetAuth(v Auth) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAuth sets the auth field to a newly
// allocated Auth struct, preferring placement in s's segment.
func (s Message) NewAuth() (Auth, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAuth(s.Struct.Segment())
	if err != nil {
		return Auth{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Ping() (Ping, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != ping")
	}
	p, err := s.Struct.Ptr(0)
	return Ping{Struct: p.Struct()}, err
}

func (s Message) HasPing() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetPing(v Ping) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPing sets the ping field to a newly
// allocated Ping struct, preferring placement in s's segment.
func (s Message) NewPing() (Ping, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPing(s.Struct.Segment())
	if err != nil {
		return Ping{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Pong() (Pong, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != pong")
	}
	p, err := s.Struct.Ptr(0)
	return Pong{Struct: p.Struct()}, err
}

func (s Message) HasPong() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetPong(v Pong) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPong sets the pong field to a newly
// allocated Pong struct, preferring placement in s's segment.
func (s Message) NewPong() (Pong, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewPong(s.Struct.Segment())
	if err != nil {
		return Pong{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Announce() (Announce, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != announce")
	}
	p, err := s.Struct.Ptr(0)
	return Announce{Struct: p.Struct()}, err
}

func (s Message) HasAnnounce() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetAnnounce(v Announce) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAnnounce sets the announce field to a newly
// allocated Announce struct, preferring placement in s's segment.
func (s Message) NewAnnounce() (Announce, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewAnnounce(s.Struct.Segment())
	if err != nil {
		return Announce{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Request() (Request, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != request")
	}
	p, err := s.Struct.Ptr(0)
	return Request{Struct: p.Struct()}, err
}

func (s Message) HasRequest() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetRequest(v Request) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated Request struct, preferring placement in s's segment.
func (s Message) NewRequest() (Request, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewRequest(s.Struct.Segment())
	if err != nil {
		return Request{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Response() (Response, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != response")
	}
	p, err := s.Struct.Ptr(0)
	return Response{Struct: p.Struct()}, err
}

func (s Message) HasResponse() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetResponse(v Response) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated Response struct, preferring placement in s's segment.
func (s Message) NewResponse() (Response, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewResponse(s.Struct.Segment())
	if err != nil {
		return Response{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) GuaranteedCollection() (GuaranteedCollection, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != guaranteedCollection")
	}
	p, err := s.Struct.Ptr(0)
	return GuaranteedCollection{Struct: p.Struct()}, err
}

func (s Message) HasGuaranteedCollection() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetGuaranteedCollection(v GuaranteedCollection) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGuaranteedCollection sets the guaranteedCollection field to a newly
// allocated GuaranteedCollection struct, preferring placement in s's segment.
func (s Message) NewGuaranteedCollection() (GuaranteedCollection, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewGuaranteedCollection(s.Struct.Segment())
	if err != nil {
		return GuaranteedCollection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) SnapshotRequest() (SnapshotRequest, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != snapshotRequest")
	}
	p, err := s.Struct.Ptr(0)
	return SnapshotRequest{Struct: p.Struct()}, err
}

func (s Message) HasSnapshotRequest() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetSnapshotRequest(v SnapshotRequest) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSnapshotRequest sets the snapshotRequest field to a newly
// allocated SnapshotRequest struct, preferring placement in s's segment.
func (s Message) NewSnapshotRequest() (SnapshotRequest, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewSnapshotRequest(s.Struct.Segment())
	if err != nil {
		return SnapshotRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) SnapshotResponse() (SnapshotResponse, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != snapshotResponse")
	}
	p, err := s.Struct.Ptr(0)
	return SnapshotResponse{Struct: p.Struct()}, err
}

func (s Message) HasSnapshotResponse() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetSnapshotResponse(v SnapshotResponse) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSnapshotResponse sets the snapshotResponse field to a newly
// allocated SnapshotResponse struct, preferring placement in s's segment.
func (s Message) NewSnapshotResponse() (SnapshotResponse, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewSnapshotResponse(s.Struct.Segment())
	if err != nil {
		return SnapshotResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) MempoolRequest() (MempoolRequest, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != mempoolRequest")
	}
	p, err := s.Struct.Ptr(0)
	return MempoolRequest{Struct: p.Struct()}, err
}

func (s Message) HasMempoolRequest() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetMempoolRequest(v MempoolRequest) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMempoolRequest sets the mempoolRequest field to a newly
// allocated MempoolRequest struct, preferring placement in s's segment.
func (s Message) NewMempoolRequest() (MempoolRequest, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewMempoolRequest(s.Struct.Segment())
	if err != nil {
		return MempoolRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) MempoolResponse() (MempoolResponse, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != mempoolResponse")
	}
	p, err := s.Struct.Ptr(0)
	return MempoolResponse{Struct: p.Struct()}, err
}

func (s Message) HasMempoolResponse() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetMempoolResponse(v MempoolResponse) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMempoolResponse sets the mempoolResponse field to a newly
// allocated MempoolResponse struct, preferring placement in s's segment.
func (s Message) NewMempoolResponse() (MempoolResponse, error) {
	s.Struct.SetUint16(0, 10)
	ss, err := NewMempoolResponse(s.Struct.Segment())
	if err != nil {
		return MempoolResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) BlockProposal() (BlockProposal, error) {
	if s.Struct.Uint16(0) != 11 {
		panic("Which() != blockProposal")
	}
	p, err := s.Struct.Ptr(0)
	return BlockProposal{Struct: p.Struct()}, err
}

func (s Message) HasBlockProposal() bool {
	if s.Struct.Uint16(0) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetBlockProposal(v BlockProposal) error {
	s.Struct.SetUint16(0, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockProposal sets the blockProposal field to a newly
// allocated BlockProposal struct, preferring placement in s's segment.
func (s Message) NewBlockProposal() (BlockProposal, error) {
	s.Struct.SetUint16(0, 11)
	ss, err := NewBlockProposal(s.Struct.Segment())
	if err != nil {
		return BlockProposal{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) BlockVote() (BlockVote, error) {
	if s.Struct.Uint16(0) != 12 {
		panic("Which() != blockVote")
	}
	p, err := s.Struct.Ptr(0)
	return BlockVote{Struct: p.Struct()}, err
}

func (s Message) HasBlockVote() bool {
	if s.Struct.Uint16(0) != 12 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetBlockVote(v BlockVote) error {
	s.Struct.SetUint16(0, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockVote sets the blockVote field to a newly
// allocated BlockVote struct, preferring placement in s's segment.
func (s Message) NewBlockVote() (BlockVote, error) {
	s.Struct.SetUint16(0, 12)
	ss, err := NewBlockVote(s.Struct.Segment())
	if err != nil {
		return BlockVote{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) BlockCommit() (BlockCommit, error) {
	if s.Struct.Uint16(0) != 13 {
		panic("Which() != blockCommit")
	}
	p, err := s.Struct.Ptr(0)
	return BlockCommit{Struct: p.Struct()}, err
}

func (s Message) HasBlockCommit() bool {
	if s.Struct.Uint16(0) != 13 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetBlockCommit(v BlockCommit) error {
	s.Struct.SetUint16(0, 13)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockCommit sets the blockCommit field to a newly
// allocated BlockCommit struct, preferring placement in s's segment.
func (s Message) NewBlockCommit() (BlockCommit, error) {
	s.Struct.SetUint16(0, 13)
	ss, err := NewBlockCommit(s.Struct.Segment())
	if err != nil {
		return BlockCommit{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List struct{ capnp.List }

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Message_List{l}, err
}

func (s Message_List) At(i int) Message { return Message{s.List.Struct(i)} }

func (s Message_List) Set(i int, v Message) error { return s.List.SetStruct(i, v.Struct) }

func (s Message_List) String() string {
	str, _ := text.MarshalList(0xaf7a8da44e30bf62, s.List)
	return str
}

// Message_Promise is a wrapper for a Message promised by a client call.
type Message_Promise struct{ *capnp.Pipeline }

func (p Message_Promise) Struct() (Message, error) {
	s, err := p.Pipeline.Struct()
	return Message{s}, err
}

func (p Message_Promise) Auth() Auth_Promise {
	return Auth_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Ping() Ping_Promise {
	return Ping_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Pong() Pong_Promise {
	return Pong_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Announce() Announce_Promise {
	return Announce_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Request() Request_Promise {
	return Request_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Response() Response_Promise {
	return Response_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) GuaranteedCollection() GuaranteedCollection_Promise {
	return GuaranteedCollection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) SnapshotRequest() SnapshotRequest_Promise {
	return SnapshotRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) SnapshotResponse() SnapshotResponse_Promise {
	return SnapshotResponse_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) MempoolRequest() MempoolRequest_Promise {
	return MempoolRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) MempoolResponse() MempoolResponse_Promise {
	return MempoolResponse_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) BlockProposal() BlockProposal_Promise {
	return BlockProposal_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) BlockVote() BlockVote_Promise {
	return BlockVote_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) BlockCommit() BlockCommit_Promise {
	return BlockCommit_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_cc8ede639915bf22 = "x\xdal\xd0[H\x14\x7f\x14\x07\xf0\xef\xd9\x9d\xddu" +
	"\xbd\xce\x9f\x99\x7f\x17$\x84(\x83\x1e\xc4\x08!\x8d\xc8" +
	"\x92\x8a\"C\x9d\xe8)\x92\xd9uPqwf\xdb\x99" +
	"\x85\x92\xa4\x12%K\x0c\xa5z\x90\x16\xeaA)\x04Q" +
	"\xa4\x87n`\x82\x90\x95AB\x0fv!\x0d\xba\x10\xf8" +
	"\x10YY\x96\xfd\xe2l\x8eT\xf48\xe7\xf3=\x97\xf9" +
	"\x15\xceS\xa9g\x83\xefR\x1aPY\xe3\xf3\x8b\xd0p" +
	"\xe1\xbe\x9e\x8e\xc6\x01Tf\x13\x89\xd5\xc3\xffw\x87_" +
	"\x9c\x1d\xc7\x0e\x0ad\x03J\x914\xa4l\x91\x02\xc0\xc6" +
	"bi\xb9\x17\x02A\x115l[\xaf5\x0a(\xac\xc7" +
	"\xccXI\xb9\x91\x97\xfa\xae \xaa\xdc\xe4\x952\x85\x90" +
	"\x08P\x8e\xd2z@s\xc8K\xda\x09\xf2P\x16\xfd\x10" +
	"*14\xa5\xe0\x08C\x0b\x83gA\xa8\xe4\x01\x94\x93" +
	")8\xc6\xd0\xc6\xe0\xfd.T\xf2\x02J+\xed\x01\xb4" +
	"\x16\x86N\x06\xe9\x9bPI\x02\x94\x0e\xda\x0ehm\x0c" +
	"\xe7\x19|\xf3B%\x1f\xa0t\xa5::\x19\x92\x0c\xfe" +
	"\xafB%?\xa0tS\x1f\xa0%\x19\xae2\x04\xbe\x08" +
	"\x95\x02\x80\xd2K\xcd\x80\xd6\xc30\xc8\x906'TJ" +
	"\x03\x94~:\x03h\x83\x0c\xb7\x19\x82\x9f\x85JA@" +
	"\xb9A\x8d\x80v\x9da\x94!\xfd\x93P)\x1dPF" +
	"R\xa3\xee0\x8c3d|\x14*e\x00\xca=\x8a\x03" +
	"\xda\x18\xc3c\x86\xccY\xa1R&\xa0LP\x15\xa0=" +
	"bx\xce\x90\xf5A\xa8\x94\x05(O(\x04h\x93\x0c" +
	"\xaf\xc8C9z\xc2\xa9#Y\xac\x1bx\x10x;\xf7" +
	"p\x12 \x92A9\xb1z\xb3\x96d\xd1|\x7f\xa5T" +
	"Z\xbd\xb9}\xa9l\xa5\xca\xff\xe5\xcf\x06\x05\xf9G\x16" +
	"\xcbB7M+a\x86\x0d\x00$\x8bU\x03\xed#\xed" +
	"F\xc3\xd3E=\x1e7\x0e'\x0c\xdb!Y\xbc{\xb9" +
	"\xb7\xfc\xfdp\xfek\xb7/n\xd81\xcb\xb4\x17\xfbr" +
	"\xa7\xa7\xee\x16\xad\xb5\xa6]\xadM\xe8q\xddt\x0c2" +
	"j\xca\xacH\xc4\x08\xe78\xf5\x96\xc9\xc1\xa4\xd4\xdc\xdf" +
	"wh\xd4\x0d\xda\xa6\x1e\xb3\xeb,\x87\xaa~m\xe2a" +
	"\x19\xbbn\xf5\xe6.;\xd7\xfb\x8f\x8c\xbb\x93d\xb1\xe6" +
	"\xb4\xa7d\xdb\xb3S3n*jDc\x96\x15\xa9\xc2" +
	"\xd6\xa5\x9b\xdf\xc4\xc7\xe6C\xad\xd1\xcb\x7fG\xc8\x9d\xc3" +
	"\xcfdTO\xedV\x9d!7\x13\x8aX\xe1\x86\x8a\xb8" +
	"\x85\xbc\x98e\xeb\x11\x92E\xc1\x95k3;\x0f6$" +
	"\xffH\x1c\xb0\x1c\x90A\xf2B\xcf\x8a\x9bM\x17\xfa;" +
	"\x7f\xb72+\x8a@\xb4\x9e/\xb8\x98_\xbc\x7f\xa2\x8b" +
	"\xdc_\xf9\x19\x00\x00\xff\xff\x13\x0c\xf3\xd5"

func init() {
	schemas.Register(schema_cc8ede639915bf22,
		0xaf7a8da44e30bf62)
}
