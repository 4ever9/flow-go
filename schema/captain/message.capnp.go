// Code generated by capnpc-go. DO NOT EDIT.

package captain

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Message struct{ capnp.Struct }
type Message_Which uint16

const (
	Message_Which_auth                 Message_Which = 0
	Message_Which_ping                 Message_Which = 1
	Message_Which_pong                 Message_Which = 2
	Message_Which_announce             Message_Which = 3
	Message_Which_request              Message_Which = 4
	Message_Which_response             Message_Which = 5
	Message_Which_guaranteedCollection Message_Which = 6
	Message_Which_snapshotRequest      Message_Which = 7
	Message_Which_snapshotResponse     Message_Which = 8
	Message_Which_mempoolRequest       Message_Which = 9
	Message_Which_mempoolResponse      Message_Which = 10
)

func (w Message_Which) String() string {
	const s = "authpingpongannouncerequestresponseguaranteedCollectionsnapshotRequestsnapshotResponsemempoolRequestmempoolResponse"
	switch w {
	case Message_Which_auth:
		return s[0:4]
	case Message_Which_ping:
		return s[4:8]
	case Message_Which_pong:
		return s[8:12]
	case Message_Which_announce:
		return s[12:20]
	case Message_Which_request:
		return s[20:27]
	case Message_Which_response:
		return s[27:35]
	case Message_Which_guaranteedCollection:
		return s[35:55]
	case Message_Which_snapshotRequest:
		return s[55:70]
	case Message_Which_snapshotResponse:
		return s[70:86]
	case Message_Which_mempoolRequest:
		return s[86:100]
	case Message_Which_mempoolResponse:
		return s[100:115]

	}
	return "Message_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xaf7a8da44e30bf62

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message{st}, err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message{st}, err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.RootPtr()
	return Message{root.Struct()}, err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xaf7a8da44e30bf62, s.Struct)
	return str
}

func (s Message) Which() Message_Which {
	return Message_Which(s.Struct.Uint16(0))
}
func (s Message) Auth() (Auth, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != auth")
	}
	p, err := s.Struct.Ptr(0)
	return Auth{Struct: p.Struct()}, err
}

func (s Message) HasAuth() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetAuth(v Auth) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAuth sets the auth field to a newly
// allocated Auth struct, preferring placement in s's segment.
func (s Message) NewAuth() (Auth, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAuth(s.Struct.Segment())
	if err != nil {
		return Auth{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Ping() (Ping, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != ping")
	}
	p, err := s.Struct.Ptr(0)
	return Ping{Struct: p.Struct()}, err
}

func (s Message) HasPing() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetPing(v Ping) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPing sets the ping field to a newly
// allocated Ping struct, preferring placement in s's segment.
func (s Message) NewPing() (Ping, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPing(s.Struct.Segment())
	if err != nil {
		return Ping{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Pong() (Pong, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != pong")
	}
	p, err := s.Struct.Ptr(0)
	return Pong{Struct: p.Struct()}, err
}

func (s Message) HasPong() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetPong(v Pong) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPong sets the pong field to a newly
// allocated Pong struct, preferring placement in s's segment.
func (s Message) NewPong() (Pong, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewPong(s.Struct.Segment())
	if err != nil {
		return Pong{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Announce() (Announce, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != announce")
	}
	p, err := s.Struct.Ptr(0)
	return Announce{Struct: p.Struct()}, err
}

func (s Message) HasAnnounce() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetAnnounce(v Announce) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAnnounce sets the announce field to a newly
// allocated Announce struct, preferring placement in s's segment.
func (s Message) NewAnnounce() (Announce, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewAnnounce(s.Struct.Segment())
	if err != nil {
		return Announce{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Request() (Request, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != request")
	}
	p, err := s.Struct.Ptr(0)
	return Request{Struct: p.Struct()}, err
}

func (s Message) HasRequest() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetRequest(v Request) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated Request struct, preferring placement in s's segment.
func (s Message) NewRequest() (Request, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewRequest(s.Struct.Segment())
	if err != nil {
		return Request{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Response() (Response, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != response")
	}
	p, err := s.Struct.Ptr(0)
	return Response{Struct: p.Struct()}, err
}

func (s Message) HasResponse() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetResponse(v Response) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated Response struct, preferring placement in s's segment.
func (s Message) NewResponse() (Response, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewResponse(s.Struct.Segment())
	if err != nil {
		return Response{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) GuaranteedCollection() (GuaranteedCollection, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != guaranteedCollection")
	}
	p, err := s.Struct.Ptr(0)
	return GuaranteedCollection{Struct: p.Struct()}, err
}

func (s Message) HasGuaranteedCollection() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetGuaranteedCollection(v GuaranteedCollection) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGuaranteedCollection sets the guaranteedCollection field to a newly
// allocated GuaranteedCollection struct, preferring placement in s's segment.
func (s Message) NewGuaranteedCollection() (GuaranteedCollection, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewGuaranteedCollection(s.Struct.Segment())
	if err != nil {
		return GuaranteedCollection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) SnapshotRequest() (SnapshotRequest, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != snapshotRequest")
	}
	p, err := s.Struct.Ptr(0)
	return SnapshotRequest{Struct: p.Struct()}, err
}

func (s Message) HasSnapshotRequest() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetSnapshotRequest(v SnapshotRequest) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSnapshotRequest sets the snapshotRequest field to a newly
// allocated SnapshotRequest struct, preferring placement in s's segment.
func (s Message) NewSnapshotRequest() (SnapshotRequest, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewSnapshotRequest(s.Struct.Segment())
	if err != nil {
		return SnapshotRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) SnapshotResponse() (SnapshotResponse, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != snapshotResponse")
	}
	p, err := s.Struct.Ptr(0)
	return SnapshotResponse{Struct: p.Struct()}, err
}

func (s Message) HasSnapshotResponse() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetSnapshotResponse(v SnapshotResponse) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSnapshotResponse sets the snapshotResponse field to a newly
// allocated SnapshotResponse struct, preferring placement in s's segment.
func (s Message) NewSnapshotResponse() (SnapshotResponse, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewSnapshotResponse(s.Struct.Segment())
	if err != nil {
		return SnapshotResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) MempoolRequest() (MempoolRequest, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != mempoolRequest")
	}
	p, err := s.Struct.Ptr(0)
	return MempoolRequest{Struct: p.Struct()}, err
}

func (s Message) HasMempoolRequest() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetMempoolRequest(v MempoolRequest) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMempoolRequest sets the mempoolRequest field to a newly
// allocated MempoolRequest struct, preferring placement in s's segment.
func (s Message) NewMempoolRequest() (MempoolRequest, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewMempoolRequest(s.Struct.Segment())
	if err != nil {
		return MempoolRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) MempoolResponse() (MempoolResponse, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != mempoolResponse")
	}
	p, err := s.Struct.Ptr(0)
	return MempoolResponse{Struct: p.Struct()}, err
}

func (s Message) HasMempoolResponse() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetMempoolResponse(v MempoolResponse) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMempoolResponse sets the mempoolResponse field to a newly
// allocated MempoolResponse struct, preferring placement in s's segment.
func (s Message) NewMempoolResponse() (MempoolResponse, error) {
	s.Struct.SetUint16(0, 10)
	ss, err := NewMempoolResponse(s.Struct.Segment())
	if err != nil {
		return MempoolResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List struct{ capnp.List }

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Message_List{l}, err
}

func (s Message_List) At(i int) Message { return Message{s.List.Struct(i)} }

func (s Message_List) Set(i int, v Message) error { return s.List.SetStruct(i, v.Struct) }

func (s Message_List) String() string {
	str, _ := text.MarshalList(0xaf7a8da44e30bf62, s.List)
	return str
}

// Message_Promise is a wrapper for a Message promised by a client call.
type Message_Promise struct{ *capnp.Pipeline }

func (p Message_Promise) Struct() (Message, error) {
	s, err := p.Pipeline.Struct()
	return Message{s}, err
}

func (p Message_Promise) Auth() Auth_Promise {
	return Auth_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Ping() Ping_Promise {
	return Ping_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Pong() Pong_Promise {
	return Pong_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Announce() Announce_Promise {
	return Announce_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Request() Request_Promise {
	return Request_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Response() Response_Promise {
	return Response_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) GuaranteedCollection() GuaranteedCollection_Promise {
	return GuaranteedCollection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) SnapshotRequest() SnapshotRequest_Promise {
	return SnapshotRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) SnapshotResponse() SnapshotResponse_Promise {
	return SnapshotResponse_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) MempoolRequest() MempoolRequest_Promise {
	return MempoolRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) MempoolResponse() MempoolResponse_Promise {
	return MempoolResponse_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_cc8ede639915bf22 = "x\xdal\xd0Kh\x13_\x14\x06\xf0\xef\xccL\x92\xa6" +
	"\xfd\xff\xcd\xc8\x8c\x82\x14Q\xa4\xad\x0f\xaa$\xd8.\xac" +
	"\x15\xa3R\xac\xd2J\xd3q#\x14\xcb4\xbd$\xc5d" +
	"f\xccL@\xba\x11\x02\xe2#\xa8\x0bW\x82\x0b\x17v" +
	"S\x90@\xb7.BA\xa8\xf8\xd8\x8b\x82\xad\x0b\x15\xc1" +
	"\x85 Z\xad\x8f+g\xcct!.\xe7\xfc\xbes\xbe" +
	"\xe1\xa6\xafPV\xc9\xc4n\xc6\x81\xdcH,.\xa7\x9a" +
	"\xe9S\xf7\xae\xcf6\x90\xdb@$w47\xdd\xce\xbf" +
	"\xba\xf1\x14C\x94\xe8\x00\x8c\xbd\xea\x82\xd1\xaf&\x80\xfd" +
	"\x19\xd5U\xb0$\xcb\xc2\xf7\xed\x82\xd8Gy\xdbs\xbc" +
	"\x81Q\xb1-\xfc\x1e#\xca\xf5\xaa\xda\x7fRj\x04\x18" +
	"\xdd\xb4\x07\xb0\xb6\x93JV/)\xf4?\xfd\x92&1" +
	"\xec\x0e\xa1\x8b!\xcd\xa0\xfc\x94&)\\\x14\xc2.\x86" +
	">\x06\xf5\x874I\x05\x8c\x0c\x9d\x04\xac4\xc3 \x83" +
	"\xf6]\x9a\xa4\x01\xc6\x01:\x0aX}\x0cY\x86\xd8\x9a" +
	"4)\x06\x18\x87\xc2\x8dA\x86a\x86\xf87iR\x1c" +
	"0\x86h\x1e\xb0\x86\x19N3$\xbeJ\x93\x12\x80\x91" +
	"\xa3\x1a`\x8d1L0\xb4\xadJ\x93\xda\x00\xe3\x0c]" +
	"\x03\xac\x09\x86\"C\xf2\x8b4)\x09\x18\x82f\x01k" +
	"\x9a\xc1ch\xff,Mj\x07\x8crx\xaa\xc4p\x81" +
	"\x14J\xd9\xd5\xa0H\xba\xdc\xd9x\x92x\xb7\xfa\xec9" +
	"@\xa4\x83R\xde\x8cS ]\xd6\x1eo\xd1\xb2\x93\x07" +
	"\xeb\xebc7\x1co\xec\xf9\x94\x94\x14_l\x8d\xa5\xed" +
	"8n\xd5\xc9\x0b\x00\xa4\xcb\xad\x8d\xfab]\x9c{\xd1" +
	"\xd2\x8b\x15q\xbe*\xfc\x80t\xf9\xfe\xf5\xc8\xe8\xc7f" +
	"\xcf\x9bh\xaf\"|\xcfu\xfc\xd6^\xe7\xca\xf2R\x7f" +
	"\xb7\xbb\x12i\xa1jWl'\x10$\xa6\x8f\xb9\xa5\x92" +
	"\xc8\xa7\x82\x19\xd7\xe1\xe0\x1d\xadv\x7f\xfe\xec\xc3(\xe8" +
	";\xb6\xe7\x17\xdd\x80\xc6\xff4\xf1\xb1\x8e\xe3\x0f\xe6:" +
	"7\xdf\x9a\xfbG&\xea$]v]U\x06\x8e\xbc\xbc" +
	"\xfc!J\x95E\xd9s\xdd\xd28\x0e\xaf\xff\xf3\xdb\xca" +
	"\xa3\xb5\xa9K\xe5\xbb\x7fG(\xba\xc3\xcf$&\x97O" +
	"\x98\xc1B+\xf3;\x00\x00\xff\xffw\x10\xb7\xab"

func init() {
	schemas.Register(schema_cc8ede639915bf22,
		0xaf7a8da44e30bf62)
}
