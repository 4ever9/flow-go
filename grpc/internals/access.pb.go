// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internals/access.proto

package bamboo_proto

import (
	context "context"
	fmt "fmt"
	shared "github.com/dapperlabs/bamboo-node/grpc/shared"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("internals/access.proto", fileDescriptor_f72a9d2250ae54f1) }

var fileDescriptor_f72a9d2250ae54f1 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0x6f, 0x44, 0xe1, 0x30, 0x45, 0x03, 0xf3, 0xcf, 0x50, 0x37, 0xc1, 0x6d, 0x5e, 0xe8,
	0x06, 0x7a, 0xed, 0x85, 0x0e, 0x29, 0xde, 0xe8, 0x98, 0xee, 0x01, 0xd2, 0xf6, 0x30, 0x0b, 0x6d,
	0x52, 0x7b, 0x52, 0xf1, 0x91, 0x7c, 0x4c, 0xe9, 0x92, 0x94, 0x66, 0xb4, 0xd6, 0xcb, 0xe6, 0xfb,
	0x9d, 0xdf, 0x77, 0x68, 0x08, 0x1c, 0x46, 0x42, 0x61, 0x26, 0x78, 0x4c, 0x53, 0x1e, 0x04, 0x48,
	0x34, 0x49, 0x33, 0xa9, 0x24, 0xeb, 0xf8, 0x3c, 0xf1, 0xa5, 0xd4, 0x5f, 0xbd, 0x2e, 0x7d, 0xf0,
	0x0c, 0xc3, 0x69, 0x82, 0x44, 0x7c, 0x85, 0x06, 0xba, 0xfd, 0xd9, 0x01, 0x78, 0x58, 0x4f, 0xbd,
	0xc8, 0x10, 0xd9, 0x3d, 0x6c, 0xcd, 0x23, 0xb1, 0x62, 0x27, 0x93, 0xea, 0xf0, 0xa4, 0x38, 0x5b,
	0xe0, 0x67, 0x8e, 0xa4, 0x7a, 0xbd, 0xba, 0x88, 0x52, 0x29, 0x08, 0x59, 0x08, 0xdd, 0x25, 0x61,
	0xf6, 0x96, 0xfb, 0x49, 0xa4, 0xde, 0x33, 0x2e, 0x88, 0x07, 0x2a, 0x92, 0x82, 0x5d, 0xba, 0x43,
	0x05, 0x54, 0x89, 0xad, 0x7a, 0xd8, 0x42, 0x99, 0x96, 0x04, 0x8e, 0x67, 0x71, 0x4e, 0xaa, 0xae,
	0x68, 0xec, 0x2a, 0x0c, 0x57, 0xd3, 0x75, 0xd5, 0x0e, 0x9a, 0xba, 0x25, 0xec, 0x79, 0xe8, 0x94,
	0x0c, 0xdc, 0xd9, 0x1a, 0xfb, 0xc5, 0x1f, 0x84, 0xd1, 0x2e, 0x60, 0xd7, 0x43, 0x35, 0x93, 0x71,
	0x8c, 0xda, 0xda, 0xdf, 0xd8, 0xa8, 0x4c, 0xac, 0x74, 0xd0, 0x0c, 0x94, 0xff, 0xff, 0x60, 0x99,
	0x86, 0x5c, 0x61, 0x75, 0xdb, 0x51, 0xe3, 0x2e, 0x9a, 0xb5, 0xfa, 0x71, 0x2b, 0x67, 0x5a, 0x38,
	0xec, 0xeb, 0x93, 0xca, 0xf2, 0xc3, 0xa6, 0xdd, 0xdc, 0x8e, 0x51, 0x1b, 0x66, 0x2a, 0x5e, 0xa1,
	0xe3, 0xa1, 0x5a, 0xe0, 0x2a, 0x2a, 0x6e, 0x85, 0xd8, 0xb9, 0x3b, 0x57, 0x06, 0xd6, 0xdb, 0x6f,
	0xcc, 0x8d, 0xf0, 0x19, 0xc0, 0x43, 0xf5, 0xc8, 0x63, 0x2e, 0x02, 0x64, 0xa7, 0x2e, 0x6e, 0x8e,
	0xad, 0xec, 0xac, 0x21, 0x35, 0xaa, 0x2f, 0x38, 0x9a, 0x67, 0xb2, 0x78, 0x32, 0x4f, 0xdf, 0x18,
	0xe4, 0xfa, 0x02, 0x02, 0x8c, 0x52, 0xc5, 0xae, 0x37, 0xde, 0x46, 0x3d, 0x66, 0x7b, 0x6e, 0xfe,
	0x49, 0xeb, 0x5e, 0x7f, 0x7b, 0x8d, 0xdd, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff, 0x24, 0x4c, 0x1c,
	0x6d, 0xf0, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccessNodeClient is the client API for AccessNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccessNodeClient interface {
	Ping(ctx context.Context, in *shared.PingRequest, opts ...grpc.CallOption) (*shared.PingResponse, error)
	// Receiving transactions from user agents
	UserSubmitTransaction(ctx context.Context, in *shared.UserTransactionRequest, opts ...grpc.CallOption) (*shared.UserTransactionResponse, error)
	// Receiving transaction from access node
	ClusterSubmitTransaction(ctx context.Context, in *shared.ClusterTransactionRequest, opts ...grpc.CallOption) (*shared.ClusterTransactionResponse, error)
	// Providing transaction the node has committed to, for execution nodes
	GetTransaction(ctx context.Context, in *shared.TransactionRequest, opts ...grpc.CallOption) (*shared.TransactionResponse, error)
	// Providing collection the node has committed to, for execution nodes
	GetCollection(ctx context.Context, in *shared.CollectionRequest, opts ...grpc.CallOption) (*shared.CollectionResponse, error)
	// Notifying access node peers that the node has transactions and/or updated signatures.
	UpdateTransaction(ctx context.Context, in *shared.TransactionUpdateRequest, opts ...grpc.CallOption) (*shared.TransactionUpdateResponse, error)
	// Notifying access node peers that the node has a collection and/or updated signatures.
	UpdateCollection(ctx context.Context, in *shared.CollectionUpdateRequest, opts ...grpc.CallOption) (*shared.CollectionUpdateResponse, error)
	// Providing register values and metadata.
	GetRegisters(ctx context.Context, in *shared.RegistersRequest, opts ...grpc.CallOption) (*shared.RegistersResponse, error)
	// Providing account balances.
	GetBalance(ctx context.Context, in *shared.BalanceRequest, opts ...grpc.CallOption) (*shared.BalanceResponse, error)
	// Process execution result from execute nodes and update registers.
	ProcessExecutionReceipt(ctx context.Context, in *shared.ProcessExecutionReceiptRequest, opts ...grpc.CallOption) (*shared.ProcessExecutionReceiptResponse, error)
}

type accessNodeClient struct {
	cc *grpc.ClientConn
}

func NewAccessNodeClient(cc *grpc.ClientConn) AccessNodeClient {
	return &accessNodeClient{cc}
}

func (c *accessNodeClient) Ping(ctx context.Context, in *shared.PingRequest, opts ...grpc.CallOption) (*shared.PingResponse, error) {
	out := new(shared.PingResponse)
	err := c.cc.Invoke(ctx, "/bamboo.proto.AccessNode/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessNodeClient) UserSubmitTransaction(ctx context.Context, in *shared.UserTransactionRequest, opts ...grpc.CallOption) (*shared.UserTransactionResponse, error) {
	out := new(shared.UserTransactionResponse)
	err := c.cc.Invoke(ctx, "/bamboo.proto.AccessNode/UserSubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessNodeClient) ClusterSubmitTransaction(ctx context.Context, in *shared.ClusterTransactionRequest, opts ...grpc.CallOption) (*shared.ClusterTransactionResponse, error) {
	out := new(shared.ClusterTransactionResponse)
	err := c.cc.Invoke(ctx, "/bamboo.proto.AccessNode/ClusterSubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessNodeClient) GetTransaction(ctx context.Context, in *shared.TransactionRequest, opts ...grpc.CallOption) (*shared.TransactionResponse, error) {
	out := new(shared.TransactionResponse)
	err := c.cc.Invoke(ctx, "/bamboo.proto.AccessNode/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessNodeClient) GetCollection(ctx context.Context, in *shared.CollectionRequest, opts ...grpc.CallOption) (*shared.CollectionResponse, error) {
	out := new(shared.CollectionResponse)
	err := c.cc.Invoke(ctx, "/bamboo.proto.AccessNode/GetCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessNodeClient) UpdateTransaction(ctx context.Context, in *shared.TransactionUpdateRequest, opts ...grpc.CallOption) (*shared.TransactionUpdateResponse, error) {
	out := new(shared.TransactionUpdateResponse)
	err := c.cc.Invoke(ctx, "/bamboo.proto.AccessNode/UpdateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessNodeClient) UpdateCollection(ctx context.Context, in *shared.CollectionUpdateRequest, opts ...grpc.CallOption) (*shared.CollectionUpdateResponse, error) {
	out := new(shared.CollectionUpdateResponse)
	err := c.cc.Invoke(ctx, "/bamboo.proto.AccessNode/UpdateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessNodeClient) GetRegisters(ctx context.Context, in *shared.RegistersRequest, opts ...grpc.CallOption) (*shared.RegistersResponse, error) {
	out := new(shared.RegistersResponse)
	err := c.cc.Invoke(ctx, "/bamboo.proto.AccessNode/GetRegisters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessNodeClient) GetBalance(ctx context.Context, in *shared.BalanceRequest, opts ...grpc.CallOption) (*shared.BalanceResponse, error) {
	out := new(shared.BalanceResponse)
	err := c.cc.Invoke(ctx, "/bamboo.proto.AccessNode/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessNodeClient) ProcessExecutionReceipt(ctx context.Context, in *shared.ProcessExecutionReceiptRequest, opts ...grpc.CallOption) (*shared.ProcessExecutionReceiptResponse, error) {
	out := new(shared.ProcessExecutionReceiptResponse)
	err := c.cc.Invoke(ctx, "/bamboo.proto.AccessNode/ProcessExecutionReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessNodeServer is the server API for AccessNode service.
type AccessNodeServer interface {
	Ping(context.Context, *shared.PingRequest) (*shared.PingResponse, error)
	// Receiving transactions from user agents
	UserSubmitTransaction(context.Context, *shared.UserTransactionRequest) (*shared.UserTransactionResponse, error)
	// Receiving transaction from access node
	ClusterSubmitTransaction(context.Context, *shared.ClusterTransactionRequest) (*shared.ClusterTransactionResponse, error)
	// Providing transaction the node has committed to, for execution nodes
	GetTransaction(context.Context, *shared.TransactionRequest) (*shared.TransactionResponse, error)
	// Providing collection the node has committed to, for execution nodes
	GetCollection(context.Context, *shared.CollectionRequest) (*shared.CollectionResponse, error)
	// Notifying access node peers that the node has transactions and/or updated signatures.
	UpdateTransaction(context.Context, *shared.TransactionUpdateRequest) (*shared.TransactionUpdateResponse, error)
	// Notifying access node peers that the node has a collection and/or updated signatures.
	UpdateCollection(context.Context, *shared.CollectionUpdateRequest) (*shared.CollectionUpdateResponse, error)
	// Providing register values and metadata.
	GetRegisters(context.Context, *shared.RegistersRequest) (*shared.RegistersResponse, error)
	// Providing account balances.
	GetBalance(context.Context, *shared.BalanceRequest) (*shared.BalanceResponse, error)
	// Process execution result from execute nodes and update registers.
	ProcessExecutionReceipt(context.Context, *shared.ProcessExecutionReceiptRequest) (*shared.ProcessExecutionReceiptResponse, error)
}

// UnimplementedAccessNodeServer can be embedded to have forward compatible implementations.
type UnimplementedAccessNodeServer struct {
}

func (*UnimplementedAccessNodeServer) Ping(ctx context.Context, req *shared.PingRequest) (*shared.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedAccessNodeServer) UserSubmitTransaction(ctx context.Context, req *shared.UserTransactionRequest) (*shared.UserTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSubmitTransaction not implemented")
}
func (*UnimplementedAccessNodeServer) ClusterSubmitTransaction(ctx context.Context, req *shared.ClusterTransactionRequest) (*shared.ClusterTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterSubmitTransaction not implemented")
}
func (*UnimplementedAccessNodeServer) GetTransaction(ctx context.Context, req *shared.TransactionRequest) (*shared.TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedAccessNodeServer) GetCollection(ctx context.Context, req *shared.CollectionRequest) (*shared.CollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (*UnimplementedAccessNodeServer) UpdateTransaction(ctx context.Context, req *shared.TransactionUpdateRequest) (*shared.TransactionUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (*UnimplementedAccessNodeServer) UpdateCollection(ctx context.Context, req *shared.CollectionUpdateRequest) (*shared.CollectionUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollection not implemented")
}
func (*UnimplementedAccessNodeServer) GetRegisters(ctx context.Context, req *shared.RegistersRequest) (*shared.RegistersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisters not implemented")
}
func (*UnimplementedAccessNodeServer) GetBalance(ctx context.Context, req *shared.BalanceRequest) (*shared.BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedAccessNodeServer) ProcessExecutionReceipt(ctx context.Context, req *shared.ProcessExecutionReceiptRequest) (*shared.ProcessExecutionReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessExecutionReceipt not implemented")
}

func RegisterAccessNodeServer(s *grpc.Server, srv AccessNodeServer) {
	s.RegisterService(&_AccessNode_serviceDesc, srv)
}

func _AccessNode_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessNodeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamboo.proto.AccessNode/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessNodeServer).Ping(ctx, req.(*shared.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessNode_UserSubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.UserTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessNodeServer).UserSubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamboo.proto.AccessNode/UserSubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessNodeServer).UserSubmitTransaction(ctx, req.(*shared.UserTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessNode_ClusterSubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.ClusterTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessNodeServer).ClusterSubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamboo.proto.AccessNode/ClusterSubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessNodeServer).ClusterSubmitTransaction(ctx, req.(*shared.ClusterTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessNode_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessNodeServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamboo.proto.AccessNode/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessNodeServer).GetTransaction(ctx, req.(*shared.TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessNode_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.CollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessNodeServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamboo.proto.AccessNode/GetCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessNodeServer).GetCollection(ctx, req.(*shared.CollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessNode_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.TransactionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessNodeServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamboo.proto.AccessNode/UpdateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessNodeServer).UpdateTransaction(ctx, req.(*shared.TransactionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessNode_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.CollectionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessNodeServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamboo.proto.AccessNode/UpdateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessNodeServer).UpdateCollection(ctx, req.(*shared.CollectionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessNode_GetRegisters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.RegistersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessNodeServer).GetRegisters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamboo.proto.AccessNode/GetRegisters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessNodeServer).GetRegisters(ctx, req.(*shared.RegistersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessNode_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessNodeServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamboo.proto.AccessNode/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessNodeServer).GetBalance(ctx, req.(*shared.BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessNode_ProcessExecutionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.ProcessExecutionReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessNodeServer).ProcessExecutionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamboo.proto.AccessNode/ProcessExecutionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessNodeServer).ProcessExecutionReceipt(ctx, req.(*shared.ProcessExecutionReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bamboo.proto.AccessNode",
	HandlerType: (*AccessNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AccessNode_Ping_Handler,
		},
		{
			MethodName: "UserSubmitTransaction",
			Handler:    _AccessNode_UserSubmitTransaction_Handler,
		},
		{
			MethodName: "ClusterSubmitTransaction",
			Handler:    _AccessNode_ClusterSubmitTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _AccessNode_GetTransaction_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _AccessNode_GetCollection_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _AccessNode_UpdateTransaction_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _AccessNode_UpdateCollection_Handler,
		},
		{
			MethodName: "GetRegisters",
			Handler:    _AccessNode_GetRegisters_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _AccessNode_GetBalance_Handler,
		},
		{
			MethodName: "ProcessExecutionReceipt",
			Handler:    _AccessNode_ProcessExecutionReceipt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internals/access.proto",
}
