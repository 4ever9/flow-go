// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services/seal/seal.proto

package seal

import (
	context "context"
	fmt "fmt"
	shared "github.com/dapperlabs/bamboo-node/grpc/shared"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubmitResultApprovalRequest struct {
	ResultApproval       *shared.ResultApproval `protobuf:"bytes,1,opt,name=resultApproval,proto3" json:"resultApproval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SubmitResultApprovalRequest) Reset()         { *m = SubmitResultApprovalRequest{} }
func (m *SubmitResultApprovalRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitResultApprovalRequest) ProtoMessage()    {}
func (*SubmitResultApprovalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_409e272a8bbe9ae0, []int{0}
}

func (m *SubmitResultApprovalRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitResultApprovalRequest.Unmarshal(m, b)
}
func (m *SubmitResultApprovalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitResultApprovalRequest.Marshal(b, m, deterministic)
}
func (m *SubmitResultApprovalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitResultApprovalRequest.Merge(m, src)
}
func (m *SubmitResultApprovalRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitResultApprovalRequest.Size(m)
}
func (m *SubmitResultApprovalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitResultApprovalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitResultApprovalRequest proto.InternalMessageInfo

func (m *SubmitResultApprovalRequest) GetResultApproval() *shared.ResultApproval {
	if m != nil {
		return m.ResultApproval
	}
	return nil
}

func init() {
	proto.RegisterType((*SubmitResultApprovalRequest)(nil), "bamboo.services.seal.SubmitResultApprovalRequest")
}

func init() { proto.RegisterFile("services/seal/seal.proto", fileDescriptor_409e272a8bbe9ae0) }

var fileDescriptor_409e272a8bbe9ae0 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8f, 0xc1, 0x4a, 0xc6, 0x30,
	0x10, 0x84, 0xf9, 0x41, 0x7a, 0x48, 0xc1, 0x43, 0xa8, 0x52, 0x5a, 0x04, 0xf1, 0xe4, 0x69, 0x83,
	0xf5, 0x09, 0x14, 0xfa, 0x02, 0xed, 0xcd, 0x5b, 0x62, 0xd7, 0x5a, 0x48, 0x48, 0xcc, 0x26, 0x05,
	0xdf, 0x5e, 0x9a, 0xd0, 0x83, 0xa5, 0xfc, 0x97, 0x40, 0x76, 0x66, 0x98, 0xf9, 0x58, 0x4d, 0xe8,
	0xd7, 0xe5, 0x13, 0x49, 0x10, 0x4a, 0x9d, 0x1e, 0x70, 0xde, 0x06, 0xcb, 0x2b, 0x25, 0x8d, 0xb2,
	0x16, 0x76, 0x03, 0x6c, 0x5a, 0x73, 0x47, 0xdf, 0xd2, 0xe3, 0x24, 0x0c, 0x12, 0xc9, 0x19, 0x29,
	0x9b, 0x9b, 0x76, 0xb6, 0x76, 0xd6, 0x28, 0xd2, 0x4f, 0xc5, 0x2f, 0x81, 0xc6, 0x85, 0xdf, 0x2c,
	0x3e, 0x4d, 0xac, 0x1d, 0xa3, 0x32, 0x4b, 0x18, 0x90, 0xa2, 0x0e, 0x6f, 0xce, 0x79, 0xbb, 0x4a,
	0x3d, 0xe0, 0x4f, 0x44, 0x0a, 0xbc, 0x67, 0xb7, 0xfe, 0x9f, 0x50, 0x5f, 0x1e, 0x2f, 0xcf, 0x65,
	0xf7, 0x00, 0xfb, 0x82, 0x54, 0x09, 0x87, 0xf4, 0x21, 0xd4, 0x39, 0x56, 0x8e, 0x28, 0xf5, 0x98,
	0xe7, 0x72, 0xc9, 0xaa, 0xb3, 0x52, 0xfe, 0x02, 0x67, 0x5c, 0x70, 0x65, 0x60, 0x73, 0x0f, 0x99,
	0x0e, 0x76, 0x3a, 0xe8, 0x37, 0xba, 0xf7, 0xe2, 0xe3, 0x66, 0xcb, 0xaa, 0x22, 0xdd, 0x5f, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x28, 0x83, 0xc0, 0xb8, 0x4c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SealServiceClient is the client API for SealService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SealServiceClient interface {
	SubmitResultApproval(ctx context.Context, in *SubmitResultApprovalRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type sealServiceClient struct {
	cc *grpc.ClientConn
}

func NewSealServiceClient(cc *grpc.ClientConn) SealServiceClient {
	return &sealServiceClient{cc}
}

func (c *sealServiceClient) SubmitResultApproval(ctx context.Context, in *SubmitResultApprovalRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/bamboo.services.seal.SealService/SubmitResultApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SealServiceServer is the server API for SealService service.
type SealServiceServer interface {
	SubmitResultApproval(context.Context, *SubmitResultApprovalRequest) (*empty.Empty, error)
}

// UnimplementedSealServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSealServiceServer struct {
}

func (*UnimplementedSealServiceServer) SubmitResultApproval(ctx context.Context, req *SubmitResultApprovalRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitResultApproval not implemented")
}

func RegisterSealServiceServer(s *grpc.Server, srv SealServiceServer) {
	s.RegisterService(&_SealService_serviceDesc, srv)
}

func _SealService_SubmitResultApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitResultApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SealServiceServer).SubmitResultApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamboo.services.seal.SealService/SubmitResultApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SealServiceServer).SubmitResultApproval(ctx, req.(*SubmitResultApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SealService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bamboo.services.seal.SealService",
	HandlerType: (*SealServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitResultApproval",
			Handler:    _SealService_SubmitResultApproval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/seal/seal.proto",
}
