// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inter/access.proto

package bamboo_proto

import (
	context "context"
	fmt "fmt"
	shared "github.com/dapperlabs/bamboo-node/grpc/shared"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("inter/access.proto", fileDescriptor_56bc4b579d8bc9be) }

var fileDescriptor_56bc4b579d8bc9be = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0xcc, 0x2b, 0x49,
	0x2d, 0xd2, 0x4f, 0x4c, 0x4e, 0x4e, 0x2d, 0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x49, 0x4a, 0xcc, 0x4d, 0xca, 0xcf, 0x87, 0xf0, 0xa4, 0x44, 0x8b, 0x33, 0x12, 0x8b, 0x52, 0x53,
	0xf4, 0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0xa1, 0x8a, 0x8c, 0xbc, 0xb9, 0xb8, 0x1c, 0xc1,
	0x9a, 0xfc, 0xf2, 0x53, 0x52, 0x85, 0x6c, 0xb9, 0x58, 0x02, 0x32, 0xf3, 0xd2, 0x85, 0x24, 0xf5,
	0x90, 0xf5, 0xea, 0x81, 0xc4, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xa4, 0xa4, 0xb0, 0x49,
	0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x26, 0xb1, 0x81, 0xc5, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x96, 0x7a, 0x28, 0x58, 0x8e, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccessNodeClient is the client API for AccessNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccessNodeClient interface {
	Ping(ctx context.Context, in *shared.PingRequest, opts ...grpc.CallOption) (*shared.PingResponse, error)
}

type accessNodeClient struct {
	cc *grpc.ClientConn
}

func NewAccessNodeClient(cc *grpc.ClientConn) AccessNodeClient {
	return &accessNodeClient{cc}
}

func (c *accessNodeClient) Ping(ctx context.Context, in *shared.PingRequest, opts ...grpc.CallOption) (*shared.PingResponse, error) {
	out := new(shared.PingResponse)
	err := c.cc.Invoke(ctx, "/bamboo.proto.AccessNode/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessNodeServer is the server API for AccessNode service.
type AccessNodeServer interface {
	Ping(context.Context, *shared.PingRequest) (*shared.PingResponse, error)
}

// UnimplementedAccessNodeServer can be embedded to have forward compatible implementations.
type UnimplementedAccessNodeServer struct {
}

func (*UnimplementedAccessNodeServer) Ping(ctx context.Context, req *shared.PingRequest) (*shared.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterAccessNodeServer(s *grpc.Server, srv AccessNodeServer) {
	s.RegisterService(&_AccessNode_serviceDesc, srv)
}

func _AccessNode_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessNodeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamboo.proto.AccessNode/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessNodeServer).Ping(ctx, req.(*shared.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bamboo.proto.AccessNode",
	HandlerType: (*AccessNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AccessNode_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inter/access.proto",
}
