// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import crypto "github.com/dapperlabs/flow-go/crypto"
import mock "github.com/stretchr/testify/mock"
import protocol "github.com/dapperlabs/flow-go/protocol"

// State is an autogenerated mock type for the State type
type State struct {
	mock.Mock
}

// AtHash provides a mock function with given fields: hash
func (_m *State) AtHash(hash crypto.Hash) protocol.Snapshot {
	ret := _m.Called(hash)

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func(crypto.Hash) protocol.Snapshot); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// AtNumber provides a mock function with given fields: number
func (_m *State) AtNumber(number uint64) protocol.Snapshot {
	ret := _m.Called(number)

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func(uint64) protocol.Snapshot); ok {
		r0 = rf(number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// Final provides a mock function with given fields:
func (_m *State) Final() protocol.Snapshot {
	ret := _m.Called()

	var r0 protocol.Snapshot
	if rf, ok := ret.Get(0).(func() protocol.Snapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Snapshot)
		}
	}

	return r0
}

// Mutate provides a mock function with given fields:
func (_m *State) Mutate() protocol.Mutator {
	ret := _m.Called()

	var r0 protocol.Mutator
	if rf, ok := ret.Get(0).(func() protocol.Mutator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Mutator)
		}
	}

	return r0
}
