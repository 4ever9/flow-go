// Code generated by Flow Go SDK. DO NOT EDIT

package examples

import (
	"bytes"
	"github.com/dapperlabs/flow-go/sdk/abi/encoding/values"
	"github.com/dapperlabs/flow-go/sdk/abi/types"
	values1 "github.com/dapperlabs/flow-go/sdk/abi/values"
)

type FleetView interface {
	Cars() []carConstructor
}
type fleetView struct {
	_cars []carConstructor
}

func (t *fleetView) Cars() []carConstructor {
	return t._cars
}
func DecodeFleetView(b []byte) (FleetView, error) {
	r := bytes.NewReader(b)
	dec := values.NewDecoder(r)
	v, err := dec.DecodeComposite(fleetType)
	if err != nil {
		return nil, err
	}
	return &fleetView{_cars: v.Fields[uint(0x0)].ToGoValue().([]carConstructor)}, nil
}

var fleetType = types.Composite{
	Fields: map[string]*types.Field{"cars": {
		Identifier: "cars",
		Type:       types.VariableSizedArray{ElementType: types.StructPointer{TypeName: "Car"}},
	}},
	Initializers: [][]*types.Parameter{{&types.Parameter{
		Field: types.Field{
			Identifier: "car1",
			Type:       types.StructPointer{TypeName: "Car"},
		},
		Label: "",
	}, &types.Parameter{
		Field: types.Field{
			Identifier: "car2",
			Type:       types.Optional{Of: types.StructPointer{TypeName: "Car"}},
		},
		Label: "",
	}, &types.Parameter{
		Field: types.Field{
			Identifier: "car3",
			Type:       types.Optional{Of: types.StructPointer{TypeName: "Car"}},
		},
		Label: "",
	}}},
}

type FleetConstructor interface {
	Encode() ([]byte, error)
}
type fleetConstructor struct {
	car1 carConstructor
	car2 *carConstructor
	car3 *carConstructor
}

func (p fleetConstructor) toValue() values1.ConstantSizedArray {
	return values1.ConstantSizedArray{p.car1.toValue(), p.car2.toValue(), p.car3.toValue()}
}
func (p fleetConstructor) Encode() ([]byte, error) {
	var w bytes.Buffer
	encoder := values.NewEncoder(&w)
	err := encoder.EncodeConstantSizedArray(p.toValue())
	if err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func NewFleetConstructor(car1 carConstructor, car2 *carConstructor, car3 *carConstructor) (FleetConstructor, error) {
	return fleetConstructor{
		car1: car1,
		car2: car2,
		car3: car3,
	}, nil
}

type CarView interface {
	Model() string
	Make() string
	Trim() string
}
type carView struct {
	_model string
	_make  string
	_trim  string
}

func (t *carView) Model() string {
	return t._model
}
func (t *carView) Make() string {
	return t._make
}
func (t *carView) Trim() string {
	return t._trim
}
func DecodeCarView(b []byte) (CarView, error) {
	r := bytes.NewReader(b)
	dec := values.NewDecoder(r)
	v, err := dec.DecodeComposite(carType)
	if err != nil {
		return nil, err
	}
	return &carView{
		_make:  v.Fields[uint(0x0)].ToGoValue().(string),
		_model: v.Fields[uint(0x1)].ToGoValue().(string),
		_trim:  v.Fields[uint(0x2)].ToGoValue().(string),
	}, nil
}

var carType = types.Composite{
	Fields: map[string]*types.Field{
		"make": {
			Identifier: "make",
			Type:       types.String{},
		},
		"model": {
			Identifier: "model",
			Type:       types.String{},
		},
		"trim": {
			Identifier: "trim",
			Type:       types.String{},
		},
	},
	Initializers: [][]*types.Parameter{{&types.Parameter{
		Field: types.Field{
			Identifier: "fullname",
			Type:       types.String{},
		},
		Label: "",
	}}},
}

type CarConstructor interface {
	Encode() ([]byte, error)
}
type carConstructor struct {
	fullname string
}

func (p carConstructor) toValue() values1.ConstantSizedArray {
	return values1.ConstantSizedArray{values1.String(p.fullname)}
}
func (p carConstructor) Encode() ([]byte, error) {
	var w bytes.Buffer
	encoder := values.NewEncoder(&w)
	err := encoder.EncodeConstantSizedArray(p.toValue())
	if err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}
func NewCarConstructor(fullname string) (CarConstructor, error) {
	return carConstructor{fullname: fullname}, nil
}
